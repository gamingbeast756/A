{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":22,\"max\":22},\"skills\":{\"hacking\":427,\"strength\":26,\"defense\":127,\"dexterity\":61,\"agility\":67,\"charisma\":121,\"intelligence\":0},\"exp\":{\"hacking\":2450762.4019269184,\"strength\":454.4143504017736,\"defense\":8434.059255329576,\"dexterity\":2375.2012499723896,\"agility\":2162.496660422619,\"charisma\":7223.8319110633865,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.2054438369763656,\"hacking_speed\":1.2070562150358461,\"hacking_money\":1.6785400059167188,\"hacking_grow\":1.061527276469071,\"hacking\":1.5773481653873136,\"strength\":1.2738327317628853,\"defense\":1.401216004939174,\"dexterity\":1.1146036402925248,\"agility\":1.2873672045378663,\"charisma\":1.401216004939174,\"hacking_exp\":1.8858396966474333,\"strength_exp\":1.6113984056800497,\"defense_exp\":1.6113984056800497,\"dexterity_exp\":1.6113984056800497,\"agility_exp\":1.6113984056800497,\"charisma_exp\":1.3428320047333748,\"company_rep\":1.772538246248055,\"faction_rep\":1.3428320047333748,\"crime_money\":1.459600005144973,\"crime_success\":1.061527276469071,\"hacknet_node_money\":2.6772713094371663,\"hacknet_node_purchase_cost\":0.7206597672596773,\"hacknet_node_ram_cost\":0.9420389114505586,\"hacknet_node_core_cost\":0.9420389114505586,\"hacknet_node_level_cost\":0.8007330747329748,\"work_money\":1.1676800041159783,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"SoA - Chaos of Dionysus\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"SoA - Might of Ares\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"SoA - Wisdom of Athena\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"MegaCorp\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":7015.452292875942,\"onlineTimeSeconds\":2968.9999999997626,\"ram\":64,\"totalMoneyGenerated\":3067207.3035422857,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":7015.452292875942,\"onlineTimeSeconds\":2968.799999999763,\"ram\":64,\"totalMoneyGenerated\":3053390.3303364217,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":7015.452292875942,\"onlineTimeSeconds\":2968.799999999763,\"ram\":64,\"totalMoneyGenerated\":3027060.165019952,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":7015.452292875942,\"onlineTimeSeconds\":2967.7999999997637,\"ram\":64,\"totalMoneyGenerated\":3003508.6403663894,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":179,\"moneyGainRatePerSecond\":6278.829802123968,\"onlineTimeSeconds\":2967.1999999997643,\"ram\":64,\"totalMoneyGenerated\":1111554.865127151,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":141,\"moneyGainRatePerSecond\":1644.9533998518461,\"onlineTimeSeconds\":2966.7999999997646,\"ram\":32,\"totalMoneyGenerated\":728410.9885130525,\"name\":\"hacknet-node-5\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{\"MegaCorp\":\"IT Analyst\"},\"karma\":-25206.72749999907,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":343442.077866872,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-2144000,\"codingcontract\":0,\"corporation\":0,\"crime\":10995166.838757118,\"gang\":0,\"hacking\":230778098.82044977,\"hacknet\":13991132.292903107,\"hacknet_expenses\":-143201412.13539916,\"hospitalization\":-12812500,\"infiltration\":215937880.02392396,\"sleeves\":0,\"stock\":0,\"total\":-656557.9221323859,\"work\":899076.2374091949,\"servers\":0,\"other\":-315100000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":840020000,\"class\":-193313472,\"codingcontract\":0,\"corporation\":0,\"crime\":1475645795.627642,\"gang\":0,\"hacking\":384331121878.6431,\"hacknet\":60102013632.08285,\"hacknet_expenses\":-17129223422.766346,\"hospitalization\":-138605188.36304757,\"infiltration\":395415067.1061411,\"sleeves\":0,\"stock\":-1333768092.1214294,\"total\":1425893952.943321,\"work\":220342700.98447105,\"servers\":-202892640676.05194,\"other\":-6590295592.492188,\"augmentations\":-217660818680.10242}},\"playtimeSinceLastAug\":3443200,\"playtimeSinceLastBitnode\":613809200,\"lastAugReset\":1699028847766,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":230000000,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698418731041},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698418851063},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698423350648},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698423831553},{\"ID\":\"NS2\",\"unlockedOn\":1698424491410},{\"ID\":\"TOR\",\"unlockedOn\":1698426124411},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698426244450},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698435726837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698435906834},{\"ID\":\"NITESEC\",\"unlockedOn\":1698469184520},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698470084511},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698519337342},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698528937339},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698533330755},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698612399549},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698623300568},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698623600566},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698672609188},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1698672849779},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698796056687},{\"ID\":\"4S\",\"unlockedOn\":1698797856683}],\"terminalCommandHistory\":[\"home\",\"cls\",\"crack CSEC\",\"sa 5\",\"backdoor\",\"ls\",\"home\",\"cls\",\"connect darkweb\",\"ls\",\"home\",\"cls\",\"scan-analyze 5\",\"cls\",\"nano contractfinder.js\",\"rm contractfinder.js\",\"cls\",\"crack I.I.I.I\",\"sa 5\",\"backdoor\",\"cls\",\"backdoor\",\"home\",\"cls\",\"connect darkweb\",\"buy -l\",\"buy HTTPWorm.exe \",\"home\",\"cls\",\"connect darkweb\",\"buy SQLInject.exe \",\"home\",\"run spread.js\",\"cls\",\"connect darkweb \",\"buy -l\",\"buy DeepscanV2.exe \",\"home\",\"cls\",\"sa 10\",\"home\",\"cls\",\"crack aevum-police\",\"cls\",\"run spread.js\",\"run hack.js -t 2750\",\"cls\",\"nano hack.js\",\"run spread.js\",\"run hack.js -t 2800\"],\"lastUpdate\":1699032291111,\"lastSave\":1699032284696,\"totalPlaytime\":613809200,\"currentWork\":{\"ctor\":\"ClassWork\",\"data\":{\"type\":\"CLASS\",\"singularity\":false,\"cyclesWorked\":1874,\"earnings\":{\"money\":-899520,\"reputation\":0,\"hackExp\":0,\"strExp\":0,\"defExp\":6039.521224488962,\"dexExp\":0,\"agiExp\":0,\"chaExp\":0,\"intExp\":0},\"classType\":\"def\",\"location\":\"Powerhouse Gym\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1fbc07265b326\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.9.3.9\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"home\"}}],[\"buyserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let serverGigs = ns.args[0];\\n  let servers = ns.getPurchasedServers().length;\\n  let ramUsage = ns.getScriptRam(\\\"hack.js\\\");\\n  while (true) {\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") > 55000 * serverGigs) {\\n      ns.purchaseServer(\\\"server\\\" + servers, serverGigs);\\n      ns.scp(\\\"hack.js\\\", \\\"server\\\" + servers);\\n      ns.exec(\\\"hack.js\\\", \\\"server\\\" + servers, Math.floor(serverGigs / ramUsage));\\n      ns.tprint(serverGigs + \\\"gb server bought\\\");\\n      servers++;\\n    }\\n    await ns.sleep(1000);\\n  }\\n} \",\"filename\":\"buyserver.js\",\"server\":\"home\"}}],[\"crack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  let ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n    ports++;\\n  }\\n  ns.tprint(ports + \\\"/\\\" + ns.getServerNumPortsRequired(target) + \\\" ports opened\\\")\\n  // Get root access to target server\\n  ns.nuke(target);\\n}\",\"filename\":\"crack.js\",\"server\":\"home\"}}],[\"clear.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  for(let i=0;i<100;i++){\\n    ns.deleteServer(\\\"server\\\"+i);\\n  }\\n}\",\"filename\":\"clear.js\",\"server\":\"home\"}}],[\"findserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  let seenServers = [\\\"home\\\"]; \\n  let currentServer = \\\"home\\\";\\n  let servers;\\n  let server;\\n  if (ns.serverExists(target)) {\\n    servers = ns.scan(currentServer);\\n    if (!servers.includes(target)) {\\n      for (let i = 0; i < servers.length; i++) {//if scan doesent contain target server\\n\\n        if (!seenServers.includes(servers[i])) {\\n\\n          currentServer=servers[i];\\n          break;\\n        } else if (i == servers.length - 1) {\\n          seenServers.push(currentServer);\\n          currentServer = \\\"home\\\";\\n        }\\n\\n      }\\n    }else{//if scan contains target server\\n      \\n    }\\n  }\\n}\",\"filename\":\"findserver.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(ns.args[0]);\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"decompressLZ.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let str = ns.args[0];\\n  let decoded = '', type = 0, len, ref, pos, i = 0, j;\\n  while (i < str.length) {\\n    if (i > 0) type ^= 1;\\n    len = parseInt(str[i]);\\n    ref = parseInt(str[++i]);\\n    if (len === 0) continue;\\n    if (!isNaN(ref) && type === 1) {\\n      i++;\\n      for (j = 0; j < len; j++) decoded += decoded[decoded.length - ref];\\n    } else {\\n      pos = i;\\n      for (; i < len + pos; i++) decoded += str[i];\\n    }\\n  }\\n  ns.tprint(decoded);\\n}\",\"filename\":\"decompressLZ.js\",\"server\":\"home\"}}],[\"compresslz.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let str=ns.args[0];\\n  // state [i][j] contains a backreference of offset i and length j\\n\\tlet cur_state = Array.from(Array(10), _ => Array(10)), new_state, tmp_state, result;\\n\\tcur_state[0][1] = ''; // initial state is a literal of length 1\\n\\tfor (let i = 1; i < str.length; i++) {\\n\\t\\tnew_state = Array.from(Array(10), _ => Array(10));\\n\\t\\tconst c = str[i];\\n\\t\\t// handle literals\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tconst input = cur_state[0][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tif (len < 9) set(new_state, 0, len + 1, input); // extend current literal\\n\\t\\t\\telse set(new_state, 0, 1, input + '9' + str.substring(i - 9, i) + '0'); // start new literal\\n\\t\\t\\tfor (let offset = 1; offset <= Math.min(9, i); offset++) { // start new backreference\\n\\t\\t\\t\\tif (str[i - offset] === c) set(new_state, offset, 1, input + len + str.substring(i - len, i));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// handle backreferences\\n\\t\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\t\\tconst input = cur_state[offset][len];\\n\\t\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\t\\tif (str[i - offset] === c) {\\n\\t\\t\\t\\t\\tif (len < 9) set(new_state, offset, len + 1, input); // extend current backreference\\n\\t\\t\\t\\t\\telse set(new_state, offset, 1, input + '9' + offset + '0'); // start new backreference\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tset(new_state, 0, 1, input + len + offset); // start new literal\\n\\t\\t\\t\\t// end current backreference and start new backreference\\n\\t\\t\\t\\tfor (let new_offset = 1; new_offset <= Math.min(9, i); new_offset++) {\\n\\t\\t\\t\\t\\tif (str[i - new_offset] === c) set(new_state, new_offset, 1, input + len + offset + '0');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp_state = new_state;\\n\\t\\tnew_state = cur_state;\\n\\t\\tcur_state = tmp_state;\\n\\t}\\n\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\tlet input = cur_state[0][len];\\n\\t\\tif (input === undefined) continue;\\n\\t\\tinput += len + str.substring(str.length - len, str.length);\\n\\t\\t// noinspection JSUnusedAssignment\\n\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t}\\n\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tlet input = cur_state[offset][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tinput += len + '' + offset;\\n\\t\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t\\t}\\n\\t}\\n\\tns.tprint(result ?? '');\\n}\\n\\nfunction set(state, i, j, str) {\\n\\tif (state[i][j] === undefined || str.length < state[i][j].length) state[i][j] = str;\\n}\",\"filename\":\"compresslz.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,2800,2800]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":126728.42761470751,\"onlineMoneyMade\":0,\"onlineRunningTime\":491.6099999999848,\"ramUsage\":2.8,\"server\":\"home\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":2800,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"74.5.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32277529501,\"moneyMax\":806938237525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1289,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"95.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48665007852,\"moneyMax\":1216625196300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1292,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"42.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":23929298672,\"moneyMax\":598232466800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":956,\"serverGrowth\":61,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"13.9.3.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":21315408530,\"moneyMax\":532885213250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":65,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"79.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29337933380,\"moneyMax\":733448334500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1133,\"serverGrowth\":90,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"45.2.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":20626422317,\"moneyMax\":515660557925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1097,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"1.2.2.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":13674178643,\"moneyMax\":341854466075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"33.0.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":19992382768,\"moneyMax\":499809569200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1245,\"serverGrowth\":95,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"61.1.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":24754757902,\"moneyMax\":618868947550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":960,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"43.1.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1771164785,\"moneyMax\":44279119625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1188,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"38.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1539,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"9.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1100807222,\"moneyMax\":27520180550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":70,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"79.5.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":886233866,\"moneyMax\":22155846650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":55,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"69.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":662646447,\"moneyMax\":16566161175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":64,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"51.3.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":731317917,\"moneyMax\":18282947925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"90.0.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":784282882,\"moneyMax\":19607072050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"1.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":903753481,\"moneyMax\":22593837025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"11.3.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1117602894,\"moneyMax\":27940072350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":88,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"63.5.5.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":764025239,\"moneyMax\":19100630975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":71,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"76.2.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":690327316,\"moneyMax\":17258182900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":849,\"serverGrowth\":74,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"44.3.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":831954934,\"moneyMax\":20798873350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":901,\"serverGrowth\":77,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"36.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":810219269,\"moneyMax\":20255481725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":858,\"serverGrowth\":75,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"61.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1136261452,\"moneyMax\":28406536300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"47.3.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":947609141,\"moneyMax\":23690228525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":68,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"40.5.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1043500659,\"moneyMax\":26087516475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"38.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":947615049,\"moneyMax\":23690376225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"75.9.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":831744406,\"moneyMax\":20793610150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":750,\"serverGrowth\":80,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"63.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1423413566,\"moneyMax\":35585339150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":56,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"22.9.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1747851691,\"moneyMax\":43696292275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":90,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"73.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1128360005,\"moneyMax\":28209000125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":72,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"1.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1381737352,\"moneyMax\":34543433800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"54.3.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1037930640,\"moneyMax\":25948266000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":79,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"32.1.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":790031068,\"moneyMax\":19750776700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":740,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"25.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":572448238,\"moneyMax\":14311205950,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":486,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.00999999998464,\"ramUsage\":2.8,\"server\":\"rho-construction\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"92.0.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":622813091,\"moneyMax\":15570327275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":577,\"serverGrowth\":58,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"74.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":387943756,\"moneyMax\":9698593900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":440,\"serverGrowth\":32,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"75.2.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":202707784,\"moneyMax\":5067694600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":394,\"serverGrowth\":44,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"47.4.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zb-institute\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1044391027,\"moneyMax\":26109775675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":735,\"serverGrowth\":84,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,9]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":203.67068723792278,\"onlineMoneyMade\":0,\"onlineRunningTime\":495.00999999998453,\"ramUsage\":2.8,\"server\":\"zb-institute\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"26.9.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":321539902,\"moneyMax\":8038497550,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":456,\"serverGrowth\":50,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"62.7.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":540867925,\"moneyMax\":13521698125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":643,\"serverGrowth\":63,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"97.7.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":506430971,\"moneyMax\":12660774275,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":439,\"serverGrowth\":45,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"42.5.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":161712209,\"moneyMax\":4042805225,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":317,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":496.0099999999845,\"ramUsage\":2.8,\"server\":\"the-hub\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"20.8.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":220155429,\"moneyMax\":5503885725,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":381,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"61.2.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":404,\"serverGrowth\":55,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"95.6.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":84553862,\"moneyMax\":2113846550,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":274,\"serverGrowth\":63,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"51.3.5.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"87.3.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":499.20999999998423,\"ramUsage\":2.8,\"server\":\"foodnstuff\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"50.1.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.12,\"minDifficulty\":3,\"moneyAvailable\":37668.23124667624,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":498.2099999999843,\"ramUsage\":2.8,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"49.6.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":497.20999999998435,\"ramUsage\":2.8,\"server\":\"joesguns\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"46.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"83.3.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":498.2099999999843,\"ramUsage\":2.8,\"server\":\"nectar-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"13.2.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"19.0.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"computek\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.1.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":496.0099999999845,\"ramUsage\":2.8,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"13.3.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,4]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":90.5203054390768,\"onlineMoneyMade\":0,\"onlineRunningTime\":495.00999999998453,\"ramUsage\":2.8,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"96.7.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zer0\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"30.9.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,9]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":203.67068723792278,\"onlineMoneyMade\":0,\"onlineRunningTime\":497.20999999998435,\"ramUsage\":2.8,\"server\":\"max-hardware\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.8.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":68107568,\"moneyMax\":1702689200,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":208,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,9]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":203.67068723792278,\"onlineMoneyMade\":0,\"onlineRunningTime\":497.20999999998435,\"ramUsage\":2.8,\"server\":\"omega-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"54.7.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":52065830,\"moneyMax\":1301645750,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":269,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"54.0.8.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":21.200000000000003,\"minDifficulty\":10,\"moneyAvailable\":148287861.05309233,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,9]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":203.67068723792278,\"onlineMoneyMade\":0,\"onlineRunningTime\":494.00999999998464,\"ramUsage\":2.8,\"server\":\"iron-gym\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"69.8.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":45,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"48.6.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"81.7.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":742,\"serverGrowth\":49,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"41.1.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":542,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"23.5.8.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"59.3.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"75.4.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":523,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"48.5.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":56,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"65.6.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"82.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"31.0.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":165.1483,\"playerReputation\":10828.788030220872}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0214,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":141.6446,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2123.6531959066383}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":23.2942,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":20.2814,\"isBanned\":false,\"isMember\":true,\"playerReputation\":231.45635615467094}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":120.2324,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1703.8615470899501}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":true,\"playerReputation\":85.0236464330357}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":2.0865,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":74.4372,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":39.1518,\"isBanned\":false,\"isMember\":true,\"playerReputation\":505.3300137368722}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":72.4647,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":107.8375,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":105.2172,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1759.1000265553207}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":109.8081,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":118.4629,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1672.2765310623465}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":99.6965,\"isBanned\":false,\"isMember\":true,\"playerReputation\":22503.988660399526}}}","AliasesSave":"{\"crack\":\"run crack.js\",\"scanalyze\":\"scan-analyze\",\"sa\":\"scan-analyze\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":18759.4395605005,\"lastPrice\":18763.611954133135,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":18.238825744513175,\"otlkMagForecast\":30.728393791526813,\"cap\":162678251,\"spreadPerc\":0.5,\"shareTxForMovement\":49761,\"shareTxUntilMovement\":49761,\"totalShares\":88600000,\"maxShares\":17700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":30064.386511186643,\"lastPrice\":30070.23745346231,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.96426380338656,\"otlkMagForecast\":31.089893857799606,\"cap\":522680937,\"spreadPerc\":0.2,\"shareTxForMovement\":45727,\"shareTxUntilMovement\":45727,\"totalShares\":80000000,\"maxShares\":16000000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":22390.69353231016,\"lastPrice\":22382.396538815196,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":14.371985039185043,\"otlkMagForecast\":62.9125322505678,\"cap\":207487963,\"spreadPerc\":0.5,\"shareTxForMovement\":76941,\"shareTxUntilMovement\":76941,\"totalShares\":76800000,\"maxShares\":15400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":21099.078833515836,\"lastPrice\":21105.629152875274,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":12.757828090926154,\"otlkMagForecast\":62.361594931600294,\"cap\":150997642,\"spreadPerc\":0.4,\"shareTxForMovement\":42330,\"shareTxUntilMovement\":42330,\"totalShares\":84600000,\"maxShares\":16900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":38499.090173945784,\"lastPrice\":38486.785080890615,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":13.268521248472538,\"otlkMagForecast\":37.53061373329972,\"cap\":502508081,\"spreadPerc\":0.2,\"shareTxForMovement\":68630,\"shareTxUntilMovement\":68630,\"totalShares\":50800000,\"maxShares\":10200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":132516.5836847571,\"lastPrice\":132452.14117301628,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":true,\"otlkMag\":17.321109792152857,\"otlkMagForecast\":69.28442232758815,\"cap\":127641644,\"spreadPerc\":0.8,\"shareTxForMovement\":33965,\"shareTxUntilMovement\":33965,\"totalShares\":25700000,\"maxShares\":5100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":29407.19052775604,\"lastPrice\":29418.50035066282,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":9.481515671133215,\"otlkMagForecast\":61.018356323105166,\"cap\":511675961,\"spreadPerc\":0.5,\"shareTxForMovement\":87449,\"shareTxUntilMovement\":87449,\"totalShares\":85700000,\"maxShares\":17100000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":16718.764699350824,\"lastPrice\":16728.13845725437,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":16.163693520495634,\"otlkMagForecast\":31.971037193924676,\"cap\":724017050,\"spreadPerc\":0.8,\"shareTxForMovement\":73366,\"shareTxUntilMovement\":73366,\"totalShares\":58600000,\"maxShares\":11700000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":20566.96578256469,\"lastPrice\":20574.589808929035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.333186904664822,\"otlkMagForecast\":42.50149333320115,\"cap\":236467256,\"spreadPerc\":1,\"shareTxForMovement\":80548,\"shareTxUntilMovement\":80548,\"totalShares\":54700000,\"maxShares\":10900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":17696.164950228416,\"lastPrice\":17691.164484762157,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":8.668429745386643,\"otlkMagForecast\":59.09942024101755,\"cap\":279994903,\"spreadPerc\":0.6,\"shareTxForMovement\":54166,\"shareTxUntilMovement\":54166,\"totalShares\":52700000,\"maxShares\":10500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":11129.04670661748,\"lastPrice\":11126.005013186385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":9.044853586310534,\"otlkMagForecast\":59.56397366602354,\"cap\":242330142,\"spreadPerc\":0.3,\"shareTxForMovement\":53264,\"shareTxUntilMovement\":53264,\"totalShares\":70300000,\"maxShares\":14100000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12663.298209928756,\"lastPrice\":12658.781660044498,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.20572253791795,\"otlkMagForecast\":57.00333695991481,\"cap\":225533189,\"spreadPerc\":0.6,\"shareTxForMovement\":73915,\"shareTxUntilMovement\":73915,\"totalShares\":74900000,\"maxShares\":15000000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20074.380202136977,\"lastPrice\":20080.798434158514,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":8.534037967615253,\"otlkMagForecast\":42.277627757853686,\"cap\":161940638,\"spreadPerc\":0.8,\"shareTxForMovement\":84827,\"shareTxUntilMovement\":84827,\"totalShares\":36900000,\"maxShares\":7400000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":19396.305827678905,\"lastPrice\":19401.33887747318,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":9.653243424456782,\"otlkMagForecast\":60.1646423808048,\"cap\":299509338,\"spreadPerc\":1,\"shareTxForMovement\":67235,\"shareTxUntilMovement\":67235,\"totalShares\":52900000,\"maxShares\":10600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15217.420210492995,\"lastPrice\":15221.36890228721,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.697667566899088,\"otlkMagForecast\":56.05156345872618,\"cap\":389838990,\"spreadPerc\":0.7,\"shareTxForMovement\":59673,\"shareTxUntilMovement\":59673,\"totalShares\":38900000,\"maxShares\":7800000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6004.4826330802525,\"lastPrice\":6002.646894187345,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.068791734516154,\"otlkMagForecast\":45.19561967546198,\"cap\":85067168,\"spreadPerc\":0.7,\"shareTxForMovement\":64769,\"shareTxUntilMovement\":64769,\"totalShares\":73800000,\"maxShares\":14800000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":38951.24735984305,\"lastPrice\":38964.422899331505,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":8.582007162289043,\"otlkMagForecast\":58.898015594168,\"cap\":340789212,\"spreadPerc\":0.9,\"shareTxForMovement\":84872,\"shareTxUntilMovement\":84872,\"totalShares\":28200000,\"maxShares\":5600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":12684.984249755309,\"lastPrice\":12681.634793772793,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":10.222145478348416,\"otlkMagForecast\":60.9683604888481,\"cap\":215028879,\"spreadPerc\":0.8,\"shareTxForMovement\":64257,\"shareTxUntilMovement\":64257,\"totalShares\":55600000,\"maxShares\":11100000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":14943.294987334759,\"lastPrice\":14938.38041150571,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":1.2421129293635695,\"otlkMagForecast\":50.228934030252915,\"cap\":337914640,\"spreadPerc\":0.9,\"shareTxForMovement\":79051,\"shareTxUntilMovement\":79051,\"totalShares\":37400000,\"maxShares\":7500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":8114.295845173541,\"lastPrice\":8104.906999047889,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":true,\"otlkMag\":5.815087491424238,\"otlkMagForecast\":60.83302362271873,\"cap\":93840703,\"spreadPerc\":1.2,\"shareTxForMovement\":16996,\"shareTxUntilMovement\":16996,\"totalShares\":53300000,\"maxShares\":10700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6605.881963042039,\"lastPrice\":6601.935707744434,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":6.839271387651876,\"otlkMagForecast\":55.819144347503105,\"cap\":115599573,\"spreadPerc\":0.9,\"shareTxForMovement\":53042,\"shareTxUntilMovement\":53042,\"totalShares\":55700000,\"maxShares\":11100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2613.824471522084,\"lastPrice\":2613.219033078507,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":1.7879248536228438,\"otlkMagForecast\":49.804546309193746,\"cap\":7041596,\"spreadPerc\":0.9,\"shareTxForMovement\":68921,\"shareTxUntilMovement\":68921,\"totalShares\":60100000,\"maxShares\":12000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6956.579830303376,\"lastPrice\":6950.718107992621,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":true,\"otlkMag\":10.618859275587724,\"otlkMagForecast\":61.67569782725808,\"cap\":8610446,\"spreadPerc\":1.2,\"shareTxForMovement\":58984,\"shareTxUntilMovement\":58984,\"totalShares\":30200000,\"maxShares\":6000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3295.303841515426,\"lastPrice\":3297.6400471787165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":5.146447198607711,\"otlkMagForecast\":53.31841837052483,\"cap\":69197357,\"spreadPerc\":1.1,\"shareTxForMovement\":49508,\"shareTxUntilMovement\":49508,\"totalShares\":54000000,\"maxShares\":10800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2593.393200649616,\"lastPrice\":2592.2280847663656,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":true,\"otlkMag\":5.691464848826595,\"otlkMagForecast\":53.24165783794579,\"cap\":35919346,\"spreadPerc\":0.9,\"shareTxForMovement\":117112,\"shareTxUntilMovement\":117112,\"totalShares\":60100000,\"maxShares\":12000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2632.6502289894715,\"lastPrice\":2629.7622833424734,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.37,\"b\":false,\"otlkMag\":1.7823702747842256,\"otlkMagForecast\":46.62397533071331,\"cap\":19477340,\"spreadPerc\":1.7,\"shareTxForMovement\":19228,\"shareTxUntilMovement\":19228,\"totalShares\":21100000,\"maxShares\":4200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2940.981805584398,\"lastPrice\":2939.6196857278483,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":2.1879578641846114,\"otlkMagForecast\":45.97818383829614,\"cap\":27741791,\"spreadPerc\":1.1,\"shareTxForMovement\":63216,\"shareTxUntilMovement\":63216,\"totalShares\":18400000,\"maxShares\":3700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2446.658586175638,\"lastPrice\":2447.542870956324,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":1.5574525797816798,\"otlkMagForecast\":54.11473247468098,\"cap\":45580695,\"spreadPerc\":1,\"shareTxForMovement\":102542,\"shareTxUntilMovement\":102542,\"totalShares\":18800000,\"maxShares\":3800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3700.625892294283,\"lastPrice\":3698.3466870376437,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":true,\"otlkMag\":2.4509576415155196,\"otlkMagForecast\":50.714283858576856,\"cap\":68550386,\"spreadPerc\":1.2,\"shareTxForMovement\":39505,\"shareTxUntilMovement\":39505,\"totalShares\":10400000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":269.98635547772875,\"lastPrice\":270.3216301814302,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.68,\"b\":true,\"otlkMag\":6.324562458136968,\"otlkMagForecast\":55.228376563212414,\"cap\":6467338,\"spreadPerc\":1.4,\"shareTxForMovement\":37502,\"shareTxUntilMovement\":37502,\"totalShares\":112600000,\"maxShares\":22500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":517.5285907833143,\"lastPrice\":517.8187550272283,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":11.866127319354252,\"otlkMagForecast\":38.66833225778213,\"cap\":5635762,\"spreadPerc\":1.3,\"shareTxForMovement\":45488,\"shareTxUntilMovement\":45488,\"totalShares\":346000000,\"maxShares\":69200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":18124.127151643315,\"lastPrice\":18118.25038461993,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":8.678210213768175,\"otlkMagForecast\":41.13184880492478,\"cap\":20636578,\"spreadPerc\":0.7,\"shareTxForMovement\":141881,\"shareTxUntilMovement\":141881,\"totalShares\":22400000,\"maxShares\":4500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":21866.704628778392,\"lastPrice\":21861.234562093112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":11.084569852668173,\"otlkMagForecast\":61.45821881166673,\"cap\":429809071,\"spreadPerc\":0.9,\"shareTxForMovement\":91028,\"shareTxUntilMovement\":91028,\"totalShares\":22500000,\"maxShares\":4500000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1699032285912,\"ticksUntilCycle\":27}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1699022530312","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}