{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":31,\"max\":41},\"skills\":{\"hacking\":1249,\"strength\":320,\"defense\":315,\"dexterity\":330,\"agility\":356,\"charisma\":514,\"intelligence\":0},\"exp\":{\"hacking\":101805248130.97836,\"strength\":108767.6861034888,\"defense\":127396.21375821078,\"dexterity\":125646.20306298725,\"agility\":109257.5678808845,\"charisma\":19493570.94032268,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3392496012474315,\"hacking_speed\":1.3325609925165474,\"hacking_money\":2.237832039598442,\"hacking_grow\":1.3401796859494803,\"hacking\":2.044041084914617,\"strength\":1.871641342209606,\"defense\":1.7902656316787535,\"dexterity\":1.8797789132626916,\"agility\":2.080387730093098,\"charisma\":1.5251930998104295,\"hacking_exp\":2.698579278231366,\"strength_exp\":1.6275142106170488,\"defense_exp\":1.6275142106170488,\"dexterity_exp\":1.871641342209606,\"agility_exp\":1.6275142106170488,\"charisma_exp\":1.461643387318328,\"company_rep\":2.218774661949222,\"faction_rep\":1.680889895416077,\"crime_money\":2.2838177926848875,\"crime_success\":1.2709942498420244,\"hacknet_node_money\":2.704047047848117,\"hacknet_node_purchase_cost\":0.7135237237404649,\"hacknet_node_ram_cost\":0.9327107499875358,\"hacknet_node_core_cost\":0.9327107499875358,\"hacknet_node_level_cost\":0.7928041374894054,\"work_money\":2.095719385700359,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"SoA - Chaos of Dionysus\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"SoA - Might of Ares\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"SoA - Wisdom of Athena\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"SoA - Beauty of Aphrodite\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"SoA - Knowledge of Apollo\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"MegaCorp\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Speakers for the Dead\",\"The Dark Army\",\"The Syndicate\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471242.5999999119,\"ram\":64,\"totalMoneyGenerated\":26256038810.256092,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471242.3999999121,\"ram\":64,\"totalMoneyGenerated\":26256020480.823536,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471242.3999999121,\"ram\":64,\"totalMoneyGenerated\":26256014095.905827,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471242.199999912,\"ram\":64,\"totalMoneyGenerated\":26255986470.931683,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471241.999999912,\"ram\":64,\"totalMoneyGenerated\":26255976178.10451,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471241.799999912,\"ram\":64,\"totalMoneyGenerated\":26255955108.96655,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471241.5999999119,\"ram\":64,\"totalMoneyGenerated\":26255887286.115917,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471241.5999999119,\"ram\":64,\"totalMoneyGenerated\":26255899726.66318,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471241.199999912,\"ram\":64,\"totalMoneyGenerated\":26255916564.400166,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471240.799999912,\"ram\":64,\"totalMoneyGenerated\":26255854685.176228,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471240.5999999119,\"ram\":64,\"totalMoneyGenerated\":26255851797.49027,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1471240.3999999121,\"ram\":64,\"totalMoneyGenerated\":26255829597.10686,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210012.7999998499,\"ram\":64,\"totalMoneyGenerated\":22862208491.269466,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210012.59999985,\"ram\":64,\"totalMoneyGenerated\":22862217940.162907,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210012.39999985,\"ram\":64,\"totalMoneyGenerated\":22862249333.205204,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210012.19999985,\"ram\":64,\"totalMoneyGenerated\":22862252623.60114,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210011.99999985,\"ram\":64,\"totalMoneyGenerated\":22862230425.436054,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210011.7999998499,\"ram\":64,\"totalMoneyGenerated\":22862261842.20123,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210011.59999985,\"ram\":64,\"totalMoneyGenerated\":22862279773.121387,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210011.39999985,\"ram\":64,\"totalMoneyGenerated\":22862283994.31003,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12990.293695987282,\"onlineTimeSeconds\":1210010.99999985,\"ram\":64,\"totalMoneyGenerated\":15717809279.067692,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210010.7999998499,\"ram\":64,\"totalMoneyGenerated\":22862380329.46683,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210008.59999985,\"ram\":64,\"totalMoneyGenerated\":22862363549.848133,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":11,\"level\":200,\"moneyGainRatePerSecond\":18894.972648708776,\"onlineTimeSeconds\":1210008.39999985,\"ram\":64,\"totalMoneyGenerated\":22862339705.27564,\"name\":\"hacknet-node-23\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{\"MegaCorp\":\"Head of Engineering\"},\"karma\":-31077.577499998937,\"numPeopleKilled\":114,\"location\":\"Travel Agency\",\"money\":50025525913.407196,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1254080480,\"codingcontract\":26625000000,\"corporation\":0,\"crime\":1832359542.8808796,\"gang\":0,\"hacking\":450486116061.46027,\"hacknet\":582274108087.196,\"hacknet_expenses\":-4005736267.0884233,\"hospitalization\":-3000000,\"infiltration\":36394171.00173283,\"sleeves\":0,\"stock\":30406594.64971733,\"total\":50024525913.407196,\"work\":3572358203.702488,\"servers\":-1009254400000,\"other\":-315000001,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":840020000,\"class\":-1522152352,\"codingcontract\":26625000000,\"corporation\":0,\"crime\":3308005338.5064054,\"gang\":0,\"hacking\":4645728550446.042,\"hacknet\":759728475381.0726,\"hacknet_expenses\":-22105984718.928448,\"hospitalization\":-223592688.36304757,\"infiltration\":502031260.91991985,\"sleeves\":0,\"stock\":-1303361497.4717124,\"total\":73133928407.69572,\"work\":4088340971.0262003,\"servers\":-2256364324277.292,\"other\":-6906095593.492188,\"augmentations\":-3079260983951.905}},\"playtimeSinceLastAug\":1562672400,\"playtimeSinceLastBitnode\":2680995200,\"lastAugReset\":1699536805465,\"lastNodeReset\":-1,\"purchasedServers\":[\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\",\"server12\",\"server13\",\"server14\",\"server15\",\"server16\",\"server17\"],\"scriptProdSinceLastAug\":21000000000,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698418731041},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698418851063},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698423350648},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698423831553},{\"ID\":\"NS2\",\"unlockedOn\":1698424491410},{\"ID\":\"TOR\",\"unlockedOn\":1698426124411},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698426244450},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698435726837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698435906834},{\"ID\":\"NITESEC\",\"unlockedOn\":1698469184520},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698470084511},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698519337342},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698528937339},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698533330755},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698612399549},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698623300568},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698623600566},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698672609188},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1698672849779},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698796056687},{\"ID\":\"4S\",\"unlockedOn\":1698797856683},{\"ID\":\"FROZE\",\"unlockedOn\":1699079229934},{\"ID\":\"DONATION\",\"unlockedOn\":1699536858900},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1699888069684}],\"terminalCommandHistory\":[\"alias\",\"2to 10\",\"nano server.js\",\"cs 10\",\"cs\",\"cls\",\"cs 14\",\"cs 15\",\"cs 18\",\"cs 19\",\"run buyserver.js 524288\",\"sa\",\"crack darkweb\",\"run fl1ght.exe\",\"connect darkweb\",\"backdoor\",\"hoem\",\"home\",\"cls\",\"ls\",\"run findcontract.js\",\"nano findcontract.js\",\"cls\",\"wget https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master/build/download-bitburner-scripts.js /build/download-bitburner-scripts.js\",\"run /build/download-bitburner-scripts.js\",\"ls\",\"ls contracts\",\"run contracts/contractor.js \",\"cls\",\"run contracts/contractor.js \",\"cls\",\"cs 20\",\"run buyserver.js 1048576\",\"run contracts/contractor.js \",\"cs 20\",\"nano hack.js\",\"sa 10\",\"analyze\",\"home\",\"crack taiyang-digital\",\"crack megacorp\",\"connect megacorp\",\"sa 10\",\"home\",\"cs 20\",\"buyserver 1048576\",\"run buyserver.js 1048576\",\"run spread.js\",\"run hack.js -t 100000\",\"run hack.js -t 10000\"],\"lastUpdate\":1701099478032,\"lastSave\":1701099471137,\"totalPlaytime\":2680995200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1780,\"factionWorkType\":\"field\",\"factionName\":\"Ishima\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1fbc07265b326\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.9.3.9\",\"isConnectedTo\":true,\"maxRam\":32768,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"home\"}}],[\"buyserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let serverGigs = ns.args[0];\\n  let servers = ns.getPurchasedServers().length;\\n  let ramUsage = ns.getScriptRam(\\\"hack.js\\\");\\n  while (true) {\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") > 55000 * serverGigs) {\\n      ns.purchaseServer(\\\"server\\\" + servers, serverGigs);\\n      ns.scp(\\\"hack.js\\\", \\\"server\\\" + servers);\\n      ns.exec(\\\"hack.js\\\", \\\"server\\\" + servers, Math.floor(serverGigs / ramUsage));\\n      ns.tprint(serverGigs + \\\"gb server bought\\\");\\n      servers++;\\n    }\\n    await ns.sleep(1000);\\n  }\\n} \",\"filename\":\"buyserver.js\",\"server\":\"home\"}}],[\"crack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  let ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n    ports++;\\n  }\\n  ns.tprint(ports + \\\"/\\\" + ns.getServerNumPortsRequired(target) + \\\" ports opened\\\")\\n  // Get root access to target server\\n  ns.nuke(target);\\n}\",\"filename\":\"crack.js\",\"server\":\"home\"}}],[\"clear.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  for(let i=0;i<100;i++){\\n    ns.deleteServer(\\\"server\\\"+i);\\n  }\\n}\",\"filename\":\"clear.js\",\"server\":\"home\"}}],[\"findserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  let seenServers = [\\\"home\\\"]; \\n  let currentServer = \\\"home\\\";\\n  let servers;\\n  let server;\\n  if (ns.serverExists(target)) {\\n    servers = ns.scan(currentServer);\\n    if (!servers.includes(target)) {\\n      for (let i = 0; i < servers.length; i++) {//if scan doesent contain target server\\n\\n        if (!seenServers.includes(servers[i])) {\\n\\n          currentServer=servers[i];\\n          break;\\n        } else if (i == servers.length - 1) {\\n          seenServers.push(currentServer);\\n          currentServer = \\\"home\\\";\\n        }\\n\\n      }\\n    }else{//if scan contains target server\\n      \\n    }\\n  }\\n}\",\"filename\":\"findserver.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(ns.args[0]);\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"decompressLZ.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let str = ns.args[0];\\n  let decoded = '', type = 0, len, ref, pos, i = 0, j;\\n  while (i < str.length) {\\n    if (i > 0) type ^= 1;\\n    len = parseInt(str[i]);\\n    ref = parseInt(str[++i]);\\n    if (len === 0) continue;\\n    if (!isNaN(ref) && type === 1) {\\n      i++;\\n      for (j = 0; j < len; j++) decoded += decoded[decoded.length - ref];\\n    } else {\\n      pos = i;\\n      for (; i < len + pos; i++) decoded += str[i];\\n    }\\n  }\\n  ns.tprint(decoded);\\n}\",\"filename\":\"decompressLZ.js\",\"server\":\"home\"}}],[\"compresslz.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let str=ns.args[0];\\n  // state [i][j] contains a backreference of offset i and length j\\n\\tlet cur_state = Array.from(Array(10), _ => Array(10)), new_state, tmp_state, result;\\n\\tcur_state[0][1] = ''; // initial state is a literal of length 1\\n\\tfor (let i = 1; i < str.length; i++) {\\n\\t\\tnew_state = Array.from(Array(10), _ => Array(10));\\n\\t\\tconst c = str[i];\\n\\t\\t// handle literals\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tconst input = cur_state[0][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tif (len < 9) set(new_state, 0, len + 1, input); // extend current literal\\n\\t\\t\\telse set(new_state, 0, 1, input + '9' + str.substring(i - 9, i) + '0'); // start new literal\\n\\t\\t\\tfor (let offset = 1; offset <= Math.min(9, i); offset++) { // start new backreference\\n\\t\\t\\t\\tif (str[i - offset] === c) set(new_state, offset, 1, input + len + str.substring(i - len, i));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// handle backreferences\\n\\t\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\t\\tconst input = cur_state[offset][len];\\n\\t\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\t\\tif (str[i - offset] === c) {\\n\\t\\t\\t\\t\\tif (len < 9) set(new_state, offset, len + 1, input); // extend current backreference\\n\\t\\t\\t\\t\\telse set(new_state, offset, 1, input + '9' + offset + '0'); // start new backreference\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tset(new_state, 0, 1, input + len + offset); // start new literal\\n\\t\\t\\t\\t// end current backreference and start new backreference\\n\\t\\t\\t\\tfor (let new_offset = 1; new_offset <= Math.min(9, i); new_offset++) {\\n\\t\\t\\t\\t\\tif (str[i - new_offset] === c) set(new_state, new_offset, 1, input + len + offset + '0');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp_state = new_state;\\n\\t\\tnew_state = cur_state;\\n\\t\\tcur_state = tmp_state;\\n\\t}\\n\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\tlet input = cur_state[0][len];\\n\\t\\tif (input === undefined) continue;\\n\\t\\tinput += len + str.substring(str.length - len, str.length);\\n\\t\\t// noinspection JSUnusedAssignment\\n\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t}\\n\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tlet input = cur_state[offset][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tinput += len + '' + offset;\\n\\t\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t\\t}\\n\\t}\\n\\tns.tprint(result ?? '');\\n}\\n\\nfunction set(state, i, j, str) {\\n\\tif (state[i][j] === undefined || str.length < state[i][j].length) state[i][j] = str;\\n}\",\"filename\":\"compresslz.js\",\"server\":\"home\"}}],[\"findcontract.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  var serverList; var filename = \\\"contract.txt\\\"\\n  async function scanServers() {//Finds all servers\\n    serverList = ns.scan(\\\"home\\\");\\n    let serverCount = [serverList.length, 0];\\n    let depth = 0;\\n    let checked = 0;\\n    let scanIndex = 0;\\n    while (scanIndex <= serverCount[depth] - 1) {\\n      let results = ns.scan(serverList[checked]);\\n      checked++; for (let j = 0; j <= results.length - 1; j++) {\\n        if (results[j] != \\\"home\\\" && !serverList.includes(results[j])) {\\n          serverList.push(results[j]);\\n          serverCount[depth + 1]++;\\n        }\\n        await ns.sleep(500);\\n      }\\n      if (scanIndex == serverCount[depth] - 1) {\\n        scanIndex = 0;\\n        depth++;\\n        serverCount.push(0);\\n      } else {\\n        scanIndex++\\n      };\\n    }\\n  } while (true) {\\n    await scanServers();\\n    ns.write(filename, \\\"\\\", \\\"w\\\");\\n    \\n    for (let j = 0; j < serverList.length; j++) {\\n      var files = ns.ls(serverList[j], \\\"cct\\\");\\n      ns.tprint(filename, serverList[j] + \\\" -> \\\" + files[0] + \\\"\\\\n\\\", \\\"a\\\");\\n    }\\n  }\\n}\",\"filename\":\"findcontract.js\",\"server\":\"home\"}}],[\"power.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(Math.pow(ns.args[0],ns.args[1]));\\n}\",\"filename\":\"power.js\",\"server\":\"home\"}}],[\"serverprice.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(55000*Math.pow(2,ns.args[0]));\\n}\",\"filename\":\"serverprice.js\",\"server\":\"home\"}}],[\"server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  ns.tprint(Math.pow(2, ns.args[0]));\\n  ns.tprint(55000 * Math.pow(2, ns.args[0]));\\n}\",\"filename\":\"server.js\",\"server\":\"home\"}}],[\"build/download-bitburner-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst url = 'https://raw.githubusercontent.com/mirkoconsiglio/Bitburner-scripts/master';\\n\\tconst listOfScripts = 'build/scripts.txt';\\n\\tns.tprint('----- Downloading scripts -----');\\n\\tns.tprint(`Downloading ${listOfScripts}`);\\n\\tlet download = await ns.wget(`${url}/${listOfScripts}`, '/' + listOfScripts);\\n\\tif (!download) throw new Error(`Could not download ${listOfScripts}`);\\n\\tlet scripts = ns.read('/' + listOfScripts).split('\\\\n');\\n\\tfor (let script of scripts) {\\n\\t\\tif (script === listOfScripts || (script.includes('/') ? '/' : '') + script === ns.getScriptName()) continue;\\n\\t\\tns.tprint(`Downloading ${script}`);\\n\\t\\tdownload = await ns.wget(`${url}/${script}`, (script.includes('/') ? '/' : '') + script);\\n\\t\\tif (!download) ns.alert(`Could not download ${script}`);\\n\\t}\\n\\tns.tprint('----- Download complete -----');\\n}\",\"filename\":\"build/download-bitburner-scripts.js\",\"server\":\"home\"}}],[\"cortex.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {contractor} from '/contracts/contractor.js';\\nimport {spendHashes} from '/hacknet/hash-spender.js';\\nimport {acceptStanek} from '/stanek/accept.js';\\nimport {\\n\\tcopyScriptsToAll,\\n\\tdeployBatchers,\\n\\tenoughRam,\\n\\tgetAccessibleServers,\\n\\tgetCracks,\\n\\tgetGangs,\\n\\tgetPortNumbers,\\n\\tgetScripts,\\n\\tinitData,\\n\\tmanageAndHack,\\n\\tprintBoth,\\n\\tpromptScriptRunning,\\n\\treadFromFile,\\n\\tupdateOverview,\\n\\tupdateReservedRam\\n} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Copy necessary scripts to all servers\\n\\tawait copyScriptsToAll(ns);\\n\\t// Initialise data\\n\\tawait initData(ns);\\n\\t// Constants\\n\\tconst scripts = getScripts();\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst bitnode8 = ns.getPlayer().bitNodeN === 8;\\n\\tconst generalPort = getPortNumbers().general;\\n\\t// Variables\\n\\tlet host = ns.getHostname();\\n\\tlet contractorOnline = true;\\n\\tlet upgradeRam = true;\\n\\tlet upgradeCores = true;\\n\\tlet homeRam = ns.getServer('home').maxRam;\\n\\tlet homeCores = ns.getServer('home').cpuCores;\\n\\tlet tor = !bitnode8;\\n\\tlet programs = !bitnode8;\\n\\tlet wse = true;\\n\\tlet tix = true;\\n\\tlet gang = true;\\n\\tlet corp = !bitnode8;\\n\\tlet bladeburner = !bitnode8;\\n\\tlet stock = true;\\n\\tlet hacknet = !bitnode8;\\n\\tlet sleeve = true;\\n\\tlet stanek = !bitnode8;\\n\\tlet backdoorWorldDaemon = true;\\n\\tlet factions = [];\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tcontractorOnline = readFromFile(ns, generalPort).contractor;\\n\\t\\t// Heal player\\n\\t\\tif (ns.getPlayer().hp.current < ns.getPlayer().hp.max) ns.singularity.hospitalize();\\n\\t\\t// Contract solver (disables itself if any solution was incorrect)\\n\\t\\tif (contractorOnline) contractorOnline = contractor(ns);\\n\\t\\t// Purchase TOR\\n\\t\\tif (tor && !ns.getPlayer().tor && ns.singularity.purchaseTor()) printBoth(ns, `Purchased TOR router`);\\n\\t\\t// Purchase only useful programs\\n\\t\\tif (programs && ns.getPlayer().tor) {\\n\\t\\t\\tfor (const program of getCracks()) {\\n\\t\\t\\t\\tif (!ns.fileExists(program.name, 'home') && ns.getPlayer().skills.hacking >= program.level &&\\n\\t\\t\\t\\t\\tns.singularity.purchaseProgram(program.name))\\n\\t\\t\\t\\t\\tprintBoth(ns, `Purchased ${program.name}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if we want to upgrade home server\\n\\t\\tconst homeServer = ns.getServer('home');\\n\\t\\tconst currentHomeRam = homeServer.maxRam;\\n\\t\\tconst currentHomeCores = homeServer.cpuCores;\\n\\t\\tif (currentHomeRam > homeRam) {\\n\\t\\t\\thomeRam = currentHomeRam;\\n\\t\\t\\tupgradeRam = true;\\n\\t\\t}\\n\\t\\tif (currentHomeCores > homeCores) {\\n\\t\\t\\thomeCores = currentHomeCores;\\n\\t\\t\\tupgradeCores = true;\\n\\t\\t}\\n\\t\\t// Upgrade home RAM\\n\\t\\tif (ns.getPlayer().money >= ns.singularity.getUpgradeHomeRamCost() && upgradeRam &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeRam < 2 ** 30 && enoughRam(ns, scripts.upgradeHomeRam, host)) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeRam, host);\\n\\t\\t\\tupgradeRam = false;\\n\\t\\t}\\n\\t\\t// Upgrade home cores\\n\\t\\tif (ns.getPlayer().money >= ns.singularity.getUpgradeHomeCoresCost() && upgradeCores &&\\n\\t\\t\\t!promptScriptRunning(ns, host) && homeCores < 8 && enoughRam(ns, scripts.upgradeHomeCores, host)) {\\n\\t\\t\\tns.exec(scripts.upgradeHomeCores, host);\\n\\t\\t\\tupgradeCores = false;\\n\\t\\t}\\n\\t\\t// Gang manager\\n\\t\\t// noinspection JSUnresolvedFunction\\n\\t\\tconst hasGangs = ns.getPlayer().bitNodeN === 2 || (ns.singularity.getOwnedSourceFiles().some(s => s.n === 2) && ns.heart.break() <= -54e3);\\n\\t\\tif (hasGangs && !ns.gang.inGang() && gang && !ns.scriptRunning(scripts.gang, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst gangs = getGangs().filter(g => ns.getPlayer().factions.includes(g));\\n\\t\\t\\tgangs.unshift('No');\\n\\t\\t\\tconst gangName = await ns.prompt(`Create a gang?`, {'type': 'select', 'choices': gangs});\\n\\t\\t\\tif (gangName !== 'No') {\\n\\t\\t\\t\\tns.gang.createGang(gangName);\\n\\t\\t\\t\\tprintBoth(ns, `Created a gang with ${gangName}`);\\n\\t\\t\\t} else gang = false;\\n\\t\\t}\\n\\t\\tif (hasGangs && ns.gang.inGang() && gang && !ns.scriptRunning(scripts.gang, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.gang, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start gang manager?`)) {\\n\\t\\t\\t\\tif (!bitnode8) ns.exec(scripts.gang, host);\\n\\t\\t\\t\\telse ns.exec(scripts.gang, host, 1, '--disable-equipment-buying');\\n\\t\\t\\t\\tprintBoth(ns, `Started gang manager`);\\n\\t\\t\\t}\\n\\t\\t\\tgang = false;\\n\\t\\t}\\n\\t\\t// Corp manager\\n\\t\\tconst hasCorps = ns.getPlayer().bitNodeN === 3 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3);\\n\\t\\tif (hasCorps && !ns.getPlayer().hasCorporation && ns.getPlayer().money >= 150e9 && corp\\n\\t\\t\\t&& !ns.scriptRunning(scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tconst name = await ns.prompt(`Create a Corporation? (Leave empty if no)`, {'type': 'text'});\\n\\t\\t\\tif (name !== '') {\\n\\t\\t\\t\\tconst corp = eval('ns.corporation'); // Cheating here because using 1 TiB of RAM to start a corporation is overkill\\n\\t\\t\\t\\tcorp.createCorporation(name, false);\\n\\t\\t\\t\\tprintBoth(ns, `Started a corporation: ${name}`);\\n\\t\\t\\t} else corp = false;\\n\\t\\t}\\n\\t\\tif (hasCorps && ns.getPlayer().hasCorporation && corp && !ns.scriptRunning(scripts.corp, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.corp, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start corp manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.corp, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started corp manager`);\\n\\t\\t\\t}\\n\\t\\t\\tcorp = false;\\n\\t\\t}\\n\\t\\t// Bladeburner manager\\n\\t\\tconst hasBladeburner = ns.getPlayer().bitNodeN === 7 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 7);\\n\\t\\tconst hasCombatStats = ns.getPlayer().skills.strength >= 100 && ns.getPlayer().skills.defense >= 100 &&\\n\\t\\t\\tns.getPlayer().skills.dexterity >= 100 && ns.getPlayer().skills.agility >= 100;\\n\\t\\tif (hasBladeburner && hasCombatStats && !ns.getPlayer().inBladeburner && bladeburner &&\\n\\t\\t\\t!ns.scriptRunning(scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Join Bladeburner Division?`)) {\\n\\t\\t\\t\\tns.bladeburner.joinBladeburnerDivision();\\n\\t\\t\\t\\tprintBoth(ns, `Joined Bladeburner Division`);\\n\\t\\t\\t} else bladeburner = false;\\n\\t\\t}\\n\\t\\tif (hasBladeburner && ns.getPlayer().inBladeburner && bladeburner && !ns.scriptRunning(scripts.bladeburner, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.bladeburner, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Bladeburner manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.bladeburner, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Bladeburner manager`);\\n\\t\\t\\t}\\n\\t\\t\\tbladeburner = false;\\n\\t\\t}\\n\\t\\t// Purchase WSE account\\n\\t\\tif (!ns.stock.hasWSEAccount() && ns.getPlayer().money >= 200e6 &&\\n\\t\\t\\twse && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase WSE account?`)) {\\n\\t\\t\\t\\tns.stock.purchaseWseAccount();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased WSE account`);\\n\\t\\t\\t} else wse = false;\\n\\t\\t}\\n\\t\\t// Purchase TIX API\\n\\t\\tif (!ns.stock.hasTIXAPIAccess() && ns.getPlayer().money >= 5e9 &&\\n\\t\\t\\ttix && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Purchase TIX API?`)) {\\n\\t\\t\\t\\tns.stock.purchaseTixApi();\\n\\t\\t\\t\\tprintBoth(ns, `Purchased TIX API`);\\n\\t\\t\\t} else tix = false;\\n\\t\\t}\\n\\t\\t// Stock market manager\\n\\t\\tif (ns.stock.hasTIXAPIAccess() && stock && !ns.scriptRunning(scripts.stock, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.stock, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start stock market manager?`)) {\\n\\t\\t\\t\\tif (!bitnode8) ns.exec(scripts.stock, host);\\n\\t\\t\\t\\telse ns.exec(scripts.stock, host, 1, '--fracH', 0.001, '--fracB', 0.1);\\n\\t\\t\\t\\tprintBoth(ns, `Started stock market manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstock = false;\\n\\t\\t}\\n\\t\\t// Hacknet manager\\n\\t\\tif (hacknet && !ns.scriptRunning(scripts.hacknet, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.hacknet, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Hacknet manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.hacknet, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Hacknet manager`);\\n\\t\\t\\t}\\n\\t\\t\\thacknet = false;\\n\\t\\t}\\n\\t\\t// Sleeve manager\\n\\t\\tif ((ns.getPlayer().bitNodeN === 10 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 10)) &&\\n\\t\\t\\tsleeve && !ns.scriptRunning(scripts.sleeve, host) &&\\n\\t\\t\\tenoughRam(ns, scripts.sleeve, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start sleeve manager?`)) {\\n\\t\\t\\t\\tif (!bitnode8) ns.exec(scripts.sleeve, host);\\n\\t\\t\\t\\telse ns.exec(scripts.sleeve, host, 1, '--disable-augmentation-buying');\\n\\t\\t\\t\\tprintBoth(ns, `Started sleeve manager`);\\n\\t\\t\\t}\\n\\t\\t\\tsleeve = false;\\n\\t\\t}\\n\\t\\t// Stanek Manager\\n\\t\\tconst hasStanek = ns.getPlayer().bitNodeN === 13 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 13);\\n\\t\\tif (hasStanek && ns.singularity.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) === -1 &&\\n\\t\\t\\tns.getPlayer().money >= 200e3 && stanek && !ns.scriptRunning(scripts.stanek, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Accept Stanek's Gift?`)) {\\n\\t\\t\\t\\tacceptStanek(ns);\\n\\t\\t\\t\\tprintBoth(ns, `Accepted Stanek's Gift`);\\n\\t\\t\\t} else stanek = false;\\n\\t\\t}\\n\\t\\tif (hasStanek && ns.singularity.getOwnedAugmentations().findIndex(e => e.includes('Stanek\\\\'s Gift')) !== -1 &&\\n\\t\\t\\t!ns.scriptRunning(scripts.stanek, host) && stanek &&\\n\\t\\t\\tenoughRam(ns, scripts.stanek, host) && !promptScriptRunning(ns, host)) {\\n\\t\\t\\tif (await ns.prompt(`Start Stanek's Gift manager?`)) {\\n\\t\\t\\t\\tns.exec(scripts.stanek, host);\\n\\t\\t\\t\\tprintBoth(ns, `Started Stanek's Gift manager`);\\n\\t\\t\\t}\\n\\t\\t\\tstanek = false;\\n\\t\\t}\\n\\t\\t// Check faction invites\\n\\t\\tconst factionInvitations = ns.singularity.checkFactionInvitations().filter(faction => !factions.includes(faction));\\n\\t\\tif (factionInvitations.length > 0 && enoughRam(ns, scripts.joinFactions, host) &&\\n\\t\\t\\t!promptScriptRunning(ns, host)) {\\n\\t\\t\\tns.print(`Request to join ${factionInvitations}`);\\n\\t\\t\\tns.exec(scripts.joinFactions, host, 1, ...factionInvitations);\\n\\t\\t\\tfactions = factions.concat(factionInvitations); // Don't ask again\\n\\t\\t}\\n\\t\\t// Backdoor servers\\n\\t\\tfor (const server of getAccessibleServers(ns)) {\\n\\t\\t\\tif (!ns.getServer(server).backdoorInstalled &&\\n\\t\\t\\t\\t!ns.isRunning(scripts.backdoor, host, server) &&\\n\\t\\t\\t\\tserver !== 'home' && enoughRam(ns, scripts.backdoor, host)) {\\n\\t\\t\\t\\tif (server === 'w0r1d_d43m0n' && backdoorWorldDaemon) {\\n\\t\\t\\t\\t\\tif (await ns.prompt(`Install backdoor on w0r1d_d43m0n and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbackdoorWorldDaemon = false;\\n\\t\\t\\t\\t} else if (server !== 'w0r1d_d43m0n') {\\n\\t\\t\\t\\t\\tns.exec(scripts.backdoor, host, 1, server);\\n\\t\\t\\t\\t\\tns.print(`Installing backdoor on ${server}`);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Spend Hashes\\n\\t\\tif (haveHacknetServers) await spendHashes(ns, 'Sell for Money');\\n\\t\\t// Deploy batchers\\n\\t\\tdeployBatchers(ns);\\n\\t\\t// Simple hack manager\\n\\t\\tmanageAndHack(ns);\\n\\t\\t// Update overview\\n\\t\\tupdateOverview(ns);\\n\\t\\t// Update reserved RAM\\n\\t\\tawait updateReservedRam(ns);\\n\\t\\t// Update file data\\n\\t\\tawait modifyFile(ns, generalPort, {contractor: contractorOnline});\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"cortex.js\",\"server\":\"home\"}}],[\"utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} str\\n */\\nexport function printBoth(ns, str) {\\n\\tns.print(str);\\n\\tns.tprint(str);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function copyScriptsToAll(ns) {\\n\\tfor (let server of getServers(ns)) if (server !== 'home') await ns.scp(scriptsToCopy(), server, 'home');\\n}\\n\\n/**\\n *\\n * @returns {Object<string>}\\n */\\nexport function getScripts() {\\n\\treturn {\\n\\t\\tcortex: 'cortex.js',\\n\\t\\tupgradeHomeRam: '/player/upgrade-home-ram.js',\\n\\t\\tupgradeHomeCores: '/player/upgrade-home-cores.js',\\n\\t\\tjoinFactions: '/factions/join-factions.js',\\n\\t\\thack: '/daemons/hack.js',\\n\\t\\tgrow: '/daemons/grow.js',\\n\\t\\tweaken: '/daemons/weaken.js',\\n\\t\\tcharge: '/daemons/charge.js',\\n\\t\\tintelligence: '/daemons/intelligence.js',\\n\\t\\tbatcher: '/hacking/batcher.js',\\n\\t\\tbackdoor: '/hacking/backdoor.js',\\n\\t\\tshare: '/daemons/share.js',\\n\\t\\tutils: 'utils.js',\\n\\t\\tgang: '/gang/manager.js',\\n\\t\\tcorp: '/corporation/autopilot.js',\\n\\t\\tbladeburner: '/bladeburner/autopilot.js',\\n\\t\\tstock: '/stock-market/autopilot.js',\\n\\t\\thacknet: '/hacknet/manager.js',\\n\\t\\tsleeve: '/sleeve/autopilot.js',\\n\\t\\tstanek: '/stanek/controller.js'\\n\\t};\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getManagerScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.cortex,\\n\\t\\tscripts.gang,\\n\\t\\tscripts.corp,\\n\\t\\tscripts.bladeburner,\\n\\t\\tscripts.stock,\\n\\t\\tscripts.hacknet,\\n\\t\\tscripts.sleeve,\\n\\t\\tscripts.stanek,\\n\\t\\tscripts.batcher\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function scriptsToCopy() {\\n\\treturn Object.values(getScripts());\\n}\\n\\n/**\\n *\\n * @returns {Object<Object>}\\n */\\nfunction getOrganisations() {\\n\\treturn {\\n\\t\\t'ECorp': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'ECP',\\n\\t\\t\\tserver: 'ecorp',\\n\\t\\t\\tfaction: 'ECorp',\\n\\t\\t\\tcompany: 'ECorp',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'MegaCorp': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'MGCP',\\n\\t\\t\\tserver: 'megacorp',\\n\\t\\t\\tfaction: 'MegaCorp',\\n\\t\\t\\tcompany: 'MegaCorp',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Blade Industries': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'BLD',\\n\\t\\t\\tserver: 'blade',\\n\\t\\t\\tfaction: 'Blade Industries',\\n\\t\\t\\tcompany: 'Blade Industries',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Clarke Incorporated': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'CLRK',\\n\\t\\t\\tserver: 'clarkinc',\\n\\t\\t\\tfaction: 'Clarke Incorporated',\\n\\t\\t\\tcompany: 'Clarke Incorporated',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'OmniTek Incorporated': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'OMTK',\\n\\t\\t\\tserver: 'omnitek',\\n\\t\\t\\tfaction: 'OmniTek Incorporated',\\n\\t\\t\\tcompany: 'OmniTek Incorporated',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Four Sigma': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'FSIG',\\n\\t\\t\\tserver: '4sigma',\\n\\t\\t\\tfaction: 'Four Sigma',\\n\\t\\t\\tcompany: 'Four Sigma',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'KuaiGong International': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tstockSymbol: 'KGI',\\n\\t\\t\\tserver: 'kuai-gong',\\n\\t\\t\\tfaction: 'KuaiGong International',\\n\\t\\t\\tcompany: 'KuaiGong International',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Fulcrum Technologies': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'FLCM',\\n\\t\\t\\tserver: 'fulcrumtech',\\n\\t\\t\\tcompany: 'Fulcrum Technologies',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software']\\n\\t\\t},\\n\\t\\t'Storm Technologies': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'STM',\\n\\t\\t\\tserver: 'stormtech',\\n\\t\\t\\tcompany: 'Storm Technologies',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'DefComm': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'DCOMM',\\n\\t\\t\\tserver: 'defcomm',\\n\\t\\t\\tcompany: 'DefComm',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Helios Labs': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'HLS',\\n\\t\\t\\tserver: 'helios',\\n\\t\\t\\tcompany: 'Helios Labs',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'VitaLife': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'VITA',\\n\\t\\t\\tserver: 'vitalife',\\n\\t\\t\\tcompany: 'VitaLife',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Icarus Microsystems': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'ICRS',\\n\\t\\t\\tserver: 'icarus',\\n\\t\\t\\tcompany: 'Icarus Microsystems',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Universal Energy': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'UNV',\\n\\t\\t\\tserver: 'univ-energy',\\n\\t\\t\\tcompany: 'Universal Energy',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'AeroCorp': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'AERO',\\n\\t\\t\\tserver: 'aerocorp',\\n\\t\\t\\tcompany: 'AeroCorp',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Omnia Cybersystems': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'OMN',\\n\\t\\t\\tserver: 'omnia',\\n\\t\\t\\tcompany: 'Omnia Cybersystems',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Solaris Space Systems': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tstockSymbol: 'SLRS',\\n\\t\\t\\tserver: 'solaris',\\n\\t\\t\\tcompany: 'Solaris Space Systems',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Global Pharmaceuticals': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tstockSymbol: 'GPH',\\n\\t\\t\\tserver: 'global-pharm',\\n\\t\\t\\tcompany: 'Global Pharmaceuticals',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Nova Medical': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'NVMD',\\n\\t\\t\\tserver: 'nova-med',\\n\\t\\t\\tcompany: 'Nova Medical',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Watchdog Security': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'WDS',\\n\\t\\t\\tcompany: 'Watchdog Security',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'LexoCorp': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'LXO',\\n\\t\\t\\tserver: 'lexo-corp',\\n\\t\\t\\tcompany: 'LexoCorp',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Rho Construction': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'RHOC',\\n\\t\\t\\tserver: 'rho-construction',\\n\\t\\t\\tcompany: 'Rho Construction',\\n\\t\\t\\tcompanyPositions: ['Business', 'Software']\\n\\t\\t},\\n\\t\\t'Alpha Enterprises': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'APHE',\\n\\t\\t\\tserver: 'alpha-ent',\\n\\t\\t\\tcompany: 'Alpha Enterprises',\\n\\t\\t\\tcompanyPositions: ['Business', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'SysCore Securities': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'SYSC',\\n\\t\\t\\tserver: 'syscore',\\n\\t\\t\\tcompany: 'SysCore Securities',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'CompuTek': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tstockSymbol: 'CTK',\\n\\t\\t\\tserver: 'comptek',\\n\\t\\t\\tcompany: 'CompuTek',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'NetLink Technologies': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tstockSymbol: 'NTLK',\\n\\t\\t\\tserver: 'netlink',\\n\\t\\t\\tcompany: 'NetLink Technologies',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software']\\n\\t\\t},\\n\\t\\t'Omega Software': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tstockSymbol: 'OMGA',\\n\\t\\t\\tserver: 'omega-net',\\n\\t\\t\\tcompany: 'Omega Software',\\n\\t\\t\\tcompanyPositions: ['IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'FoodNStuff': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'FNS',\\n\\t\\t\\tserver: 'foodnstuff',\\n\\t\\t\\tcompany: 'FoodNStuff',\\n\\t\\t\\tcompanyPositions: ['Employee', 'part-time Employee']\\n\\t\\t},\\n\\t\\t'Sigma Cosmetics': {stockSymbol: 'SGC', server: 'sigma-cosmetics'},\\n\\t\\t'Joe\\\\'s Guns': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tstockSymbol: 'JGN',\\n\\t\\t\\tserver: 'joesguns',\\n\\t\\t\\tcompany: 'Joe\\\\'s Guns',\\n\\t\\t\\tcompanyPositions: ['Employee', 'part-time Employee']\\n\\t\\t},\\n\\t\\t'Catalyst Ventures': {stockSymbol: 'CTYS', server: 'catalyst'},\\n\\t\\t'Microdyne Technologies': {stockSymbol: 'MDYN', server: 'microdyne'},\\n\\t\\t'Titan Laboratories': {stockSymbol: 'TITN', server: 'titan-labs'},\\n\\t\\t'CyberSec': {server: 'CSEC', faction: 'CyberSec', factionWorkTypes: ['Hacking']},\\n\\t\\t'The Runners': {server: 'run4theh111z', faction: 'BitRunners', factionWorkTypes: ['Hacking']},\\n\\t\\t'Bachman & Associates': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tserver: 'b-and-a',\\n\\t\\t\\tfaction: 'Bachman & Associates',\\n\\t\\t\\tcompany: 'Bachman & Associates',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Fulcrum Secret Technologies': {\\n\\t\\t\\tserver: 'fulcrumassets',\\n\\t\\t\\tfaction: 'Fulcrum Secret Technologies',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Security']\\n\\t\\t},\\n\\t\\t'NiteSec': {server: 'avmnite-02h', faction: 'NiteSec', factionWorkTypes: ['Hacking'], gang: true},\\n\\t\\t'I.I.I.I': {server: 'I.I.I.I', faction: 'The Black Hand', factionWorkTypes: ['Hacking', 'Field'], gang: true},\\n\\t\\t'Slum Snakes': {faction: 'Slum Snakes', factionWorkTypes: ['Field', 'Security'], gang: true},\\n\\t\\t'Tetrads': {faction: 'Tetrads', factionWorkTypes: ['Field', 'Security'], gang: true},\\n\\t\\t'Speakers for the Dead': {\\n\\t\\t\\tfaction: 'Speakers for the Dead',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tgang: true\\n\\t\\t},\\n\\t\\t'.': {server: '.', faction: 'The Dark Army', factionWorkTypes: ['Hacking', 'Field'], gang: true},\\n\\t\\t'The Syndicate': {faction: 'The Syndicate', factionWorkTypes: ['Hacking', 'Field', 'Security'], gang: true},\\n\\t\\t'Rothman University': {location: 'Sector-12', server: 'rothman-uni', university: 'Rothman University'},\\n\\t\\t'ZB Institute of Technology': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tserver: 'zb-institute',\\n\\t\\t\\tuniversity: 'ZB Institute of Technology'\\n\\t\\t},\\n\\t\\t'Summit University': {location: 'Aevum', server: 'summit-university', university: 'Summit University'},\\n\\t\\t'Crush Fitness': {location: 'Aevum', server: 'crush-fitness', gym: 'Crush Fitness Gym'},\\n\\t\\t'Millenium Fitness Network': {location: 'Volhaven', server: 'millenium-fitness', gym: 'Millenium Fitness Gym'},\\n\\t\\t'Iron Gym Network': {location: 'Sector-12', server: 'iron-gym', gym: 'Iron Gym'},\\n\\t\\t'Powerhouse Fitness': {location: 'Sector-12', server: 'powerhouse-fitness', gym: 'Powerhouse Gym'},\\n\\t\\t'Snap Fitness': {location: 'Aevum', server: 'snap-fitness', gym: 'Snap Fitness Gym'},\\n\\t\\t'Silhouette': {faction: 'Silhouette', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Tian Di Hui': {faction: 'Tian Di Hui', factionWorkTypes: ['Hacking', 'Security']},\\n\\t\\t'Netburners': {faction: 'Netburners', factionWorkTypes: ['Hacking']},\\n\\t\\t'Aevum': {\\n\\t\\t\\tlocation: 'Aevum',\\n\\t\\t\\tfaction: 'Aevum',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Sector-12': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tfaction: 'Sector-12',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Chongqing': {\\n\\t\\t\\tlocation: 'Chongqing',\\n\\t\\t\\tfaction: 'Chongqing',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'New Tokyo': {\\n\\t\\t\\tlocation: 'New Tokyo',\\n\\t\\t\\tfaction: 'New Tokyo',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Ishima': {\\n\\t\\t\\tlocation: 'Ishima',\\n\\t\\t\\tfaction: 'Ishima',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'Volhaven': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tfaction: 'Volhaven',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcity: true\\n\\t\\t},\\n\\t\\t'NWO': {\\n\\t\\t\\tlocation: 'Volhaven',\\n\\t\\t\\tserver: 'nwo',\\n\\t\\t\\tfaction: 'NWO',\\n\\t\\t\\tcompany: 'NWO',\\n\\t\\t\\tfactionWorkTypes: ['Hacking', 'Field', 'Security'],\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Delta One': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tserver: 'deltaone',\\n\\t\\t\\tcompany: 'Delta One',\\n\\t\\t\\tcompanyPositions: ['IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Central Intelligence Agency': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'Central Intelligence Agency',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'National Security Agency': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'National Security Agency',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software']\\n\\t\\t},\\n\\t\\t'Aevum Police Headquarters': {\\n\\t\\t\\tlocation: 'Aevum', server: 'aevum-police',\\n\\t\\t\\tcompany: 'Aevum Police Headquarters',\\n\\t\\t\\tcompanyPositions: ['Security', 'Software']\\n\\t\\t},\\n\\t\\t'Carmichael Security': {\\n\\t\\t\\tlocation: 'Sector-12',\\n\\t\\t\\tcompany: 'Carmichael Security',\\n\\t\\t\\tcompanyPositions: ['Agent', 'IT', 'Security', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Galactic Cybersystems': {\\n\\t\\t\\tlocation: 'Aevum', server: 'galactic-cyber',\\n\\t\\t\\tcompany: 'Galactic Cybersystems',\\n\\t\\t\\tcompanyPositions: ['Business', 'IT', 'Software Consultant', 'Software']\\n\\t\\t},\\n\\t\\t'Noodle Bar': {\\n\\t\\t\\tlocation: 'New Tokyo', server: 'n00dles',\\n\\t\\t\\tcompany: 'Noodle Bar',\\n\\t\\t\\tcompanyPositions: ['Waiter', 'part-time Waiter']\\n\\t\\t},\\n\\t\\t'InfoComm': {server: 'infocomm'},\\n\\t\\t'Taiyang Digital': {server: 'taiyang-digital'},\\n\\t\\t'ZB Defense Industries': {server: 'zb-def'},\\n\\t\\t'Applied Energetics': {server: 'applied-energetics'},\\n\\t\\t'Zeus Medical': {server: 'zeus-med'},\\n\\t\\t'UnitaLife Group': {server: 'unitalife'},\\n\\t\\t'The Hub': {server: 'the-hub'},\\n\\t\\t'Johnson Orthopedics': {server: 'johnson-ortho'},\\n\\t\\t'ZER0 Nightclub': {server: 'zero'},\\n\\t\\t'Nectar Nightclub Network': {server: 'nectar-net'},\\n\\t\\t'Neo Nightclub Network': {server: 'neo-net'},\\n\\t\\t'Silver Helix': {server: 'silver-helix'},\\n\\t\\t'HongFang Teahouse': {server: 'hong-fang-tea'},\\n\\t\\t'HaraKiri Sushi Bar Network': {server: 'harakiri-sushi'},\\n\\t\\t'Phantasy Club': {server: 'phantasy'},\\n\\t\\t'Max Hardware Store': {server: 'max-hardware'},\\n\\t\\t'Helios': {server: 'The-Cave'},\\n\\t\\t'w0r1d_d43m0n': {server: 'w0r1d_d43m0n'},\\n\\t\\t'The Covenant': {faction: 'The Covenant', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Daedalus': {faction: 'Daedalus', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Illuminati': {faction: 'Illuminati', factionWorkTypes: ['Hacking', 'Field']},\\n\\t\\t'Iker Molina Casino': {location: 'Aevum'},\\n\\t\\t'Sector-12 City Hall': {location: 'Sector-12'},\\n\\t\\t'Arcade': {location: 'New Tokyo'},\\n\\t\\t'0x6C1': {location: 'Ishima'},\\n\\t\\t'Hospital': {general: true},\\n\\t\\t'The Slums': {general: true},\\n\\t\\t'Travel Agency': {general: true},\\n\\t\\t'World Stock Exchange': {general: true},\\n\\t\\t'Bladeburners': {location: 'Sector-12', faction: 'Bladeburners'},\\n\\t\\t'Church of the Machine God': {location: 'Chongqing', faction: 'Church of the Machine God'},\\n\\t\\t'Shadows of Anarchy': {faction: 'Shadows of Anarchy'}\\n\\t};\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getFactions() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.faction).map(v => v.faction);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getCompanies() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.company).map(v => v.company);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getGangs() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.gang).map(v => v.faction);\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getCities() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.city).map(v => v.location);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getGyms() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.gym).map(v => v.gym);\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getUniversities() {\\n\\treturn Object.values(getOrganisations()).filter(v => v.university).map(v => v.university);\\n}\\n\\n/**\\n *\\n * @param {string} faction\\n * @returns {string[]}\\n */\\nexport function getFactionWorktypes(faction) {\\n\\treturn Object.values(getOrganisations()).find(v => v.faction === faction).factionWorkTypes;\\n}\\n\\n/**\\n *\\n * @param {string} faction\\n * @returns {string[]}\\n */\\nexport function getCompanyPositions(company) {\\n\\treturn Object.values(getOrganisations()).find(v => v.company === company).companyPositions;\\n}\\n\\n/**\\n *\\n * @param {string} symbol\\n * @returns {string}\\n */\\nexport function symbolToServer(symbol) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.stockSymbol === symbol) return v.server;\\n}\\n\\n/**\\n *\\n * @param {string} gym\\n * @return {string}\\n */\\nexport function getGymLocation(gym) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.gym === gym) return v.location;\\n}\\n\\n/**\\n *\\n * @param {string} university\\n * @return {string}\\n */\\nexport function getUniversityLocation(university) {\\n\\tfor (const v of Object.values(getOrganisations())) if (v.university === university) return v.location;\\n}\\n\\n/**\\n *\\n * @return {string[]}\\n */\\nexport function getCrimes() {\\n\\treturn ['shoplift', 'rob', 'mug', 'larceny', 'drugs', 'bond', 'traffic', 'homicide', 'grand', 'kidnap',\\n\\t\\t'assassinate', 'heist'];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} minimumRam\\n */\\nexport function deployBatchers(ns, minimumRam = 2 ** 14) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\t// filter and sort servers according to RAM\\n\\tconst hosts = servers.filter(server => ns.getServerMaxRam(server) >= minimumRam).sort((a, b) => ns.getServerMaxRam(b) - ns.getServerMaxRam(a));\\n\\t// Deploy batchers\\n\\tfor (let i = 0; i < Math.min(hosts.length, hackables.length); i++) {\\n\\t\\tif (!ns.isRunning(scripts.batcher, hosts[i], hackables[i])) {\\n\\t\\t\\tns.scriptKill(scripts.batcher, hosts[i]);\\n\\t\\t\\tns.exec(scripts.batcher, hosts[i], 1, hackables[i]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function manageAndHack(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackables = getOptimalHackable(ns, servers);\\n\\tconst [freeRams, filteredHackables] = getFreeRams(ns, servers, hackables);\\n\\tconst hackstates = getHackStates(ns, servers, filteredHackables);\\n\\tfor (const target of filteredHackables) {\\n\\t\\tconst money = ns.getServerMoneyAvailable(target);\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\t\\tconst sec = ns.getServerSecurityLevel(target);\\n\\t\\tconst secDiff = sec - minSec;\\n\\t\\tif (secDiff > 0) {\\n\\t\\t\\tconst threads = Math.ceil(secDiff * 20) - hackstates.get(target).weaken;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.weaken, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tlet moneyPercent = money / maxMoney;\\n\\t\\tif (moneyPercent === 0) moneyPercent = 0.1;\\n\\t\\tif (moneyPercent < 0.9) {\\n\\t\\t\\tconst threads = Math.ceil(ns.growthAnalyze(target, 1 / moneyPercent)) - hackstates.get(target).grow;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.grow, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t\\tif (moneyPercent > 0.75 && secDiff < 50) {\\n\\t\\t\\tlet threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney))) - hackstates.get(target).hack;\\n\\t\\t\\tif (threads > 0 && !findPlaceToRun(ns, scripts.hack, threads, freeRams, target)) return;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @returns {Object<number, number, number>}\\n */\\nfunction getHackStates(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst hackstates = new Map();\\n\\tfor (let server of servers.values()) {\\n\\t\\tfor (let hackable of hackables.values()) {\\n\\t\\t\\tlet weakenScript = ns.getRunningScript(scripts.weaken, server, hackable);\\n\\t\\t\\tlet growScript = ns.getRunningScript(scripts.grow, server, hackable);\\n\\t\\t\\tlet hackScript = ns.getRunningScript(scripts.hack, server, hackable);\\n\\t\\t\\tif (hackstates.has(hackable)) {\\n\\t\\t\\t\\thackstates.get(hackable).weaken += !weakenScript ? 0 : weakenScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).grow += !growScript ? 0 : growScript.threads;\\n\\t\\t\\t\\thackstates.get(hackable).hack += !hackScript ? 0 : hackScript.threads;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thackstates.set(hackable, {\\n\\t\\t\\t\\t\\tweaken: !weakenScript ? 0 : weakenScript.threads,\\n\\t\\t\\t\\t\\tgrow: !growScript ? 0 : growScript.threads,\\n\\t\\t\\t\\t\\thack: !hackScript ? 0 : hackScript.threads\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn hackstates;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function updateOverview(ns) {\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\ttry {\\n\\t\\tconst headers = [];\\n\\t\\tconst values = [];\\n\\t\\theaders.push(`Income\\\\u00A0`);\\n\\t\\tvalues.push(`${formatMoney(ns, ns.getTotalScriptIncome()[0])}`);\\n\\t\\theaders.push(`Karma`);\\n\\t\\tvalues.push(`${formatNumber(ns, ns.heart.break())}`);\\n\\t\\thook0.innerText = headers.join('\\\\n');\\n\\t\\thook1.innerText = values.join('\\\\n');\\n\\t} catch (err) {\\n\\t\\tns.print(`ERROR: Update Skipped: ${String(err)}`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {null|string[]}\\n */\\nexport function routeFinder(ns, server) {\\n\\tconst route = [];\\n\\tconst found = recursiveRouteFinder(ns, '', ns.getHostname(), server, route);\\n\\tif (found) return route;\\n\\telse return null;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} parent\\n * @param {string} host\\n * @param {string} server\\n * @param {string[]} route\\n * @returns {boolean}\\n */\\nexport function recursiveRouteFinder(ns, parent, host, server, route) {\\n\\tconst children = ns.scan(host);\\n\\tfor (let child of children) {\\n\\t\\tif (parent === child) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (child === server) {\\n\\t\\t\\troute.unshift(child);\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (recursiveRouteFinder(ns, host, child, server, route)) {\\n\\t\\t\\troute.unshift(host);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getServers(ns) {\\n\\tconst serverList = ['home'];\\n\\tfor (let s of serverList) ns.scan(s).filter(n => !serverList.includes(n)).forEach(n => serverList.push(n));\\n\\treturn serverList;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function hackServer(ns, server) {\\n\\tif (ns.getServerRequiredHackingLevel(server) > ns.getHackingLevel()) return false;\\n\\tif (ns.hasRootAccess(server)) return true;\\n\\tlet portOpened = 0;\\n\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\n\\t\\tns.brutessh(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\n\\t\\tns.ftpcrack(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\n\\t\\tns.httpworm(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\n\\t\\tns.relaysmtp(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\n\\t\\tns.sqlinject(server);\\n\\t\\tportOpened++;\\n\\t}\\n\\tif (ns.getServerNumPortsRequired(server) <= portOpened) {\\n\\t\\tns.nuke(server);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nexport function getAccessibleServers(ns) {\\n\\treturn getServers(ns).filter(server => hackServer(ns, server) && !server.startsWith('hacknet-node-'));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {number} threads\\n * @param {Object<string, number>[]} freeRams\\n * @param {*[]} scriptArgs\\n * @returns {boolean}\\n */\\nexport function findPlaceToRun(ns, script, threads, freeRams, ...scriptArgs) {\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\tlet remainingThreads = threads;\\n\\twhile (freeRams.length > 0) {\\n\\t\\tconst host = freeRams[0].host;\\n\\t\\tconst ram = freeRams[0].freeRam;\\n\\t\\tif (ram < scriptRam) freeRams.shift();\\n\\t\\telse if (ram < scriptRam * remainingThreads) { // Put as many threads as we can\\n\\t\\t\\tconst threadsForThisHost = Math.floor(ram / scriptRam);\\n\\t\\t\\tns.exec(script, host, threadsForThisHost, ...scriptArgs);\\n\\t\\t\\tremainingThreads -= threadsForThisHost;\\n\\t\\t\\tfreeRams.shift();\\n\\t\\t} else { // All remaining threads were placed\\n\\t\\t\\tns.exec(script, host, remainingThreads, ...scriptArgs);\\n\\t\\t\\tfreeRams[0].freeRam -= scriptRam * remainingThreads;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {string[]} hackables\\n * @returns {Object<string, number>[] | [Object<string, number>[], string[]]}\\n */\\nexport function getFreeRams(ns, servers, hackables) {\\n\\tconst scripts = getScripts();\\n\\tconst freeRams = [];\\n\\tconst unhackables = [];\\n\\tfor (const server of servers) {\\n\\t\\tif (hackables && ns.scriptRunning(scripts.batcher, server)) { // Check if we have a batcher running on this server\\n\\t\\t\\tconst process = ns.ps(server).find(s => s.filename === scripts.batcher); // Find the process of the batcher\\n\\t\\t\\tunhackables.push(process.args[0]); // Don't hack the target of the batcher\\n\\t\\t\\tcontinue; // Don't run scripts on the host\\n\\t\\t}\\n\\t\\tconst freeRam = getFreeRam(ns, server);\\n\\t\\tif (freeRam > 0) freeRams.push({host: server, freeRam: freeRam});\\n\\t}\\n\\tconst sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n\\tif (hackables) {\\n\\t\\tconst filteredHackables = hackables.filter(hackable => !unhackables.includes(hackable));\\n\\t\\treturn [sortedFreeRams, filteredHackables];\\n\\t}\\n\\treturn sortedFreeRams;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @return {number}\\n */\\nexport function getFreeRam(ns, server, ignoreNonManagerScripts = false) {\\n\\tconst data = readFromFile(ns, getPortNumbers().reservedRam);\\n\\tconst reservedRam = (data[server] ?? [{'ram': 0}]).reduce((a, b) => a + b.ram, 0);\\n\\tlet freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server) - reservedRam;\\n\\tif (ignoreNonManagerScripts) {\\n\\t\\tconst managerScripts = getManagerScripts();\\n\\t\\tns.ps(server).forEach(p => {\\n\\t\\t\\tconst script = p.filename;\\n\\t\\t\\tif (!managerScripts.includes(script)) freeRam += ns.getScriptRam(script, server) * p.threads;\\n\\t\\t});\\n\\t}\\n\\treturn freeRam;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} servers\\n * @param {number} cores\\n * @returns {string[]}\\n */\\nexport function getOptimalHackable(ns, servers, cores = 1) {\\n\\treturn servers.filter(server => ns.getServerMaxMoney(server) > 0).sort((a, b) => targetCost(ns, b, cores)[0] - targetCost(ns, a, cores)[0]);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} target\\n * @param {number} cores\\n * @param {number} hackPercent\\n * @param {number} freeRam\\n * @returns {[number, number, number]}\\n */\\nexport function targetCost(ns, target, cores = 1, hackPercent = 0.5, freeRam = 2 ** 15) {\\n\\tconst form = ns.formulas.hacking;\\n\\tconst player = ns.getPlayer(); // Get player info\\n\\tconst server = ns.getServer(target); // Get server info\\n\\tserver.hackDifficulty = server.minDifficulty; // Assume server is at min sec\\n\\t// Security\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1); // Sec increase for 1 hack thread\\n\\tconst growSec = ns.growthAnalyzeSecurity(1); // Sec increase for 1 grow thread\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores); // Sec decrease for 1 weaken thread\\n\\t// Script Rams\\n\\tconst scripts = getScripts();\\n\\tconst hackRam = ns.getScriptRam(scripts.hack);\\n\\tconst growRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenRam = ns.getScriptRam(scripts.weaken);\\n\\n\\t// RAM calculations\\n\\n\\t// Hack threads per hack percent\\n\\tconst hackThreads = hackPercent / form.hackPercent(server, player);\\n\\t// Weaken threads needed per hack thread\\n\\tconst weakenThreadsPerHackThread = hackSec / weakenSec;\\n\\t// Weaken threads per hack thread\\n\\tconst weakenThreadsAfterHack = weakenThreadsPerHackThread * hackThreads;\\n\\t// Percent to grow by 1 thread at min sec\\n\\tconst growPercent = form.growPercent(server, 1, player, cores);\\n\\t// Grow threads needed\\n\\tconst growThreads = Math.log(1 / (1 - hackPercent)) / Math.log(growPercent);\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsPerGrowThread = growSec / weakenSec;\\n\\t// Weaken threads needed per grow thread\\n\\tconst weakenThreadsAfterGrow = weakenThreadsPerGrowThread * growThreads;\\n\\t// Cycle RAM\\n\\tconst cycleRam = hackThreads * hackRam + growThreads * growRam + (weakenThreadsAfterHack + weakenThreadsAfterGrow) * weakenRam;\\n\\t// Number of cycles in one cycle group\\n\\tconst cycleCount = Math.floor(freeRam / cycleRam);\\n\\t// Group RAM\\n\\tconst groupRam = cycleRam * cycleCount;\\n\\n\\t// Stolen money calculations\\n\\n\\t// Chance to hack at min sec\\n\\tconst chance = form.hackChance(server, player);\\n\\t// Average money stolen per cycle\\n\\tconst averageMoneyPerCycle = server.moneyMax * hackPercent * chance;\\n\\t// Average money stolen per group\\n\\tconst averageMoneyPerGroup = averageMoneyPerCycle * cycleCount;\\n\\n\\t// Time taken calculations\\n\\n\\t// Time taken for weaken\\n\\tconst weakenTime = form.weakenTime(server, player);\\n\\t// Time taken from one cycle to the next\\n\\tconst cycleDelay = weakenTime / cycleCount;\\n\\t// Time taken from one group to the next\\n\\tconst groupDelay = cycleDelay * cycleCount; // equivalent to weaken time\\n\\n\\t// Cost function calculations\\n\\n\\t// Average Money per unit Ram per unit time\\n\\tconst averageMoneyPerRamPerTime = averageMoneyPerGroup / (2 * groupDelay * groupRam);\\n\\t// Average money stolen per unit Ram\\n\\tconst averageMoneyPerRam = averageMoneyPerRamPerTime * (2 * groupDelay);\\n\\t// Average money stolen per unit time\\n\\tconst averageMoneyPerTime = averageMoneyPerGroup * groupRam;\\n\\n\\t// Cost\\n\\treturn [averageMoneyPerRamPerTime, averageMoneyPerRam, averageMoneyPerTime];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {number}\\n */\\nexport function altTargetCost(ns, server) { // Doesn't use Formulas\\n\\tconst hack = ns.hackAnalyzeChance(server) * ns.hackAnalyze(server) * ns.getServerMaxMoney(server) ** 4 / ns.getHackTime(server);\\n\\tconst grow = ns.getGrowTime(server) * ns.growthAnalyze(server, 2) ** 2;\\n\\tconst weaken = ns.getWeakenTime(server) * ns.getServerMinSecurityLevel(server) ** 2;\\n\\treturn hack / (grow * weaken);\\n}\\n\\n/**\\n *\\n * @returns {Object<string, number>[]}\\n */\\nexport function getCracks() {\\n\\treturn [\\n\\t\\t{name: 'BruteSSH.exe', level: 50},\\n\\t\\t{name: 'FTPCrack.exe', level: 100},\\n\\t\\t{name: 'relaySMTP.exe', level: 300},\\n\\t\\t{name: 'HTTPWorm.exe', level: 400},\\n\\t\\t{name: 'SQLInject.exe', level: 800}\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nexport function getUsefulPrograms() {\\n\\treturn ['ServerProfiler.exe', 'AutoLink.exe', 'DeepscanV1.exe', 'DeepscanV2.exe'];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function promptScriptRunning(ns, server) {\\n\\tfor (const script of getPromptScripts()) if (ns.scriptRunning(script, server)) return true;\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @returns {string[]}\\n */\\nfunction getPromptScripts() {\\n\\tconst scripts = getScripts();\\n\\treturn [\\n\\t\\tscripts.joinFactions,\\n\\t\\tscripts.upgradeHomeRam,\\n\\t\\tscripts.upgradeHomeCores,\\n\\t\\t'/augmentations/install.js',\\n\\t\\t'/augmentations/purchase.js',\\n\\t\\t'/build/script-remover.js'\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} script\\n * @param {string} server\\n * @returns {boolean}\\n */\\nexport function enoughRam(ns, script, server = ns.getHostname(), threads = 1) {\\n\\treturn ns.getScriptRam(script, server) * threads <= getFreeRam(ns, server);\\n}\\n\\n/**\\n *\\n * @returns {Object<number>}\\n */\\nexport function getPortNumbers() {\\n\\treturn {\\n\\t\\tgeneral: 0,\\n\\t\\treservedRam: 1,\\n\\t\\tgang: 2,\\n\\t\\tcorp: 3,\\n\\t\\taugmentations: 4,\\n\\t\\thack: 5,\\n\\t\\tbladeburner: 7,\\n\\t\\tstock: 8,\\n\\t\\thacknet: 9,\\n\\t\\tsleeve: 10,\\n\\t\\tstanek: 13\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {Object<*>}\\n */\\nexport function defaultPortData(portNumber) {\\n\\tswitch (portNumber) {\\n\\t\\tcase 0:\\n\\t\\t\\treturn {bitnodeN: 1, contractor: true};\\n\\t\\tcase 1:\\n\\t\\t\\treturn {'home': [{'ram': 64, 'server': 'DEF', 'pid': 'DEF'}]};\\n\\t\\tcase 2:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 3:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 4:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 5:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 6:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 7:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 8:\\n\\t\\t\\treturn {long: [], short: []};\\n\\t\\tcase 9:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 10:\\n\\t\\t\\treturn Object.fromEntries(Array.from({length: 8}, (_, i) =>\\n\\t\\t\\t\\t[i, {\\n\\t\\t\\t\\t\\tautopilot: true,\\n\\t\\t\\t\\t\\tusefulCombat: false,\\n\\t\\t\\t\\t\\tusefulHacking: false,\\n\\t\\t\\t\\t\\tusefulFaction: false,\\n\\t\\t\\t\\t\\tusefulCompany: false\\n\\t\\t\\t\\t}]));\\n\\t\\tcase 11:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 12:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 13:\\n\\t\\t\\treturn {pattern: 'starter', maxCharges: 50};\\n\\t\\tcase 14:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 15:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 16:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 17:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 18:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 19:\\n\\t\\t\\treturn undefined;\\n\\t\\tcase 20:\\n\\t\\t\\treturn undefined;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Trying to use an invalid port: ${portNumber}. Only ports 1-20 are valid.`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function initData(ns) {\\n\\tconst bitnodeData = readFromFile(ns, 0);\\n\\tfor (let i = 1; i <= 20; i++)\\n\\t\\tif (ns.getPlayer().bitNodeN !== bitnodeData.bitNodeN || !ns.fileExists(`/data/${i}.txt`))\\n\\t\\t\\tawait writeToFile(ns, i, defaultPortData(i));\\n\\tawait writeToFile(ns, 0, {bitnodeN: ns.getPlayer().bitNodeN});\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @return {Promise<void>}\\n */\\nexport async function resetData(ns, portNumber) {\\n\\tawait writeToFile(ns, portNumber, defaultPortData(portNumber));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} write\\n * @param {boolean} clear\\n * @returns {Object<*>}\\n */\\nexport function getDataFromPort(ns, portNumber, write = true, clear = true) {\\n\\tconst port = ns.getPortHandle(portNumber);\\n\\tconst data = port.empty() ? defaultPortData(portNumber) : port.read();\\n\\tif (clear) port.clear();\\n\\tif (write) port.write(data);\\n\\treturn data;\\n}\\n\\n/**\\n *\\n * @param {number} portNumber\\n * @returns {string}\\n */\\nexport function getFileHandle(portNumber) {\\n\\treturn `/data/${portNumber}.txt`;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} handle\\n * @param {*} data\\n * @param {string} mode\\n */\\nexport async function writeToFile(ns, portNumber, data, mode = 'w') {\\n\\tif (typeof data !== 'string') data = JSON.stringify(data);\\n\\tawait ns.write(getFileHandle(portNumber), data, mode);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {boolean} saveToFile\\n * @param {string} mode\\n * @returns {Object<*>}\\n */\\nexport function readFromFile(ns, portNumber) {\\n\\tconst data = ns.read(getFileHandle(portNumber));\\n\\treturn data ? JSON.parse(data) : defaultPortData(portNumber);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} portNumber\\n * @param {Object<*>} data\\n * @param {string} mode\\n * @returns {Promise<void>}\\n */\\nexport async function modifyFile(ns, portNumber, dataToModify, mode = 'w') {\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = recursiveModify(data, dataToModify);\\n\\tawait writeToFile(ns, portNumber, updatedData, mode);\\n}\\n\\n/**\\n *\\n * @param {Object<*>} data\\n * @param {Object<*>} dataToModify\\n * @returns {Object<*>}\\n */\\nfunction recursiveModify(data, dataToModify) {\\n\\tfor (const [key, val] of Object.entries(dataToModify)) {\\n\\t\\tif (typeof val === 'object' && !Array.isArray(val) && data[key]) {\\n\\t\\t\\tconst _data = data[key];\\n\\t\\t\\trecursiveModify(_data, val);\\n\\t\\t\\tdata[key] = _data;\\n\\t\\t} else data[key] = val;\\n\\t}\\n\\treturn data;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @param {ram} number\\n * @returns {Promise<void>}\\n */\\nexport async function reserveRam(ns, server, ram) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = data[server] ?? [];\\n\\tupdatedData.push({'ram': ram, 'server': ns.getRunningScript().server, 'pid': ns.getRunningScript().pid});\\n\\tconst dataToModify = {[server]: updatedData};\\n\\tawait modifyFile(ns, portNumber, dataToModify);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} server\\n * @returns {Promise<void>}\\n */\\nexport async function unreserveRam(ns, server) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst scriptHost = ns.getRunningScript().server;\\n\\tconst pid = ns.getRunningScript().pid;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = data[server].filter(e => e.server !== scriptHost || e.pid !== pid);\\n\\tconst dataToModify = {[server]: updatedData};\\n\\tawait modifyFile(ns, portNumber, dataToModify);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function updateReservedRam(ns) {\\n\\tconst portNumber = getPortNumbers().reservedRam;\\n\\tconst data = readFromFile(ns, portNumber);\\n\\tconst updatedData = {};\\n\\tObject.entries(data).forEach(([k, v]) => updatedData[k] = v.filter(e => e.pid === 'DEF' || ns.ps(e.server).some(s => s.pid === e.pid)));\\n\\tawait writeToFile(ns, portNumber, updatedData);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} n\\n * @return {string}\\n */\\nexport function formatNumber(ns, n) {\\n\\treturn isNaN(n) ? 'NaN' : ns.nFormat(n, '0.000a');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} n\\n * @return {string}\\n */\\nexport function formatMoney(ns, n) {\\n\\treturn isNaN(n) ? 'NaN' : ns.nFormat(n, '$0.000a');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} b\\n * @return {string}\\n */\\nexport function formatRam(ns, b) {\\n\\treturn isNaN(b) ? 'NaN' : ns.nFormat(b * 1e9, '0.00b');\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @param {number} round\\n * @return {string}\\n */\\nexport function formatPercentage(n, round = 2) {\\n\\treturn isNaN(n) ? 'NaN%' : `${(n * 100).toFixed(round)}%`;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} t\\n * @param {boolean} milliPrecision\\n * @return {string}\\n */\\nexport function formatTime(ns, t, milliPrecision = false) {\\n\\treturn isNaN(t) ? 'NaN' : ns.tFormat(t, milliPrecision);\\n}\\n\",\"filename\":\"utils.js\",\"server\":\"home\"}}],[\"augmentations/install.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tif (await ns.prompt('Install augmentations?')) ns.singularity.installAugmentations(getScripts().cortex);\\n}\",\"filename\":\"augmentations/install.js\",\"server\":\"home\"}}],[\"augmentations/lister.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatNumber, getFactions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst file = '/texts/augmentations-list.txt';\\n\\tconst factions = getFactions();\\n\\tawait ns.write(file, '', 'w');\\n\\tfor (const faction of factions) {\\n\\t\\tawait ns.write(file, `\\\\n\\\\n----- ${faction} -----\\\\n`, 'a');\\n\\t\\tconst augmentations = ns.singularity.getAugmentationsFromFaction(faction);\\n\\t\\tfor (const augmentation of augmentations) {\\n\\t\\t\\tif (augmentation !== 'NeuroFlux Governor') {\\n\\t\\t\\t\\tawait ns.write(file, `\\\\n--- ${augmentation} ---\\\\n`, 'a');\\n\\t\\t\\t\\tconst stats = Object.entries(ns.singularity.getAugmentationStats(augmentation));\\n\\t\\t\\t\\tif (stats.length > 0) for (const [stat, multiplier] of stats) await ns.write(file, `${stat}: ${multiplier}\\\\n`, 'a');\\n\\t\\t\\t\\telse await ns.write(file, `Special\\\\n`, 'a');\\n\\t\\t\\t\\tconst price = ns.singularity.getAugmentationPrice(augmentation);\\n\\t\\t\\t\\tconst repReq = ns.singularity.getAugmentationRepReq(augmentation);\\n\\t\\t\\t\\tconst prereqs = ns.singularity.getAugmentationPrereq(augmentation);\\n\\t\\t\\t\\tawait ns.write(file, `Price: ${formatMoney(ns, price)}\\\\n`, 'a');\\n\\t\\t\\t\\tawait ns.write(file, `Rep: ${formatNumber(ns, repReq)}\\\\n`, 'a');\\n\\t\\t\\t\\tif (prereqs.length > 0) for (const prereq of prereqs) await ns.write(file, `Prereq: ${prereq}\\\\n`, 'a');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"augmentations/lister.js\",\"server\":\"home\"}}],[\"augmentations/purchase.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {\\n\\tisUseful,\\n\\tisUsefulBladeburner,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulFocus,\\n\\tisUsefulHacking,\\n\\tisUsefulHackingSkill,\\n\\tisUsefulHacknet,\\n\\tisUsefulInfiltration,\\n\\tisUsefulPrograms,\\n\\tisZeroCost\\n} from '/augmentations/utils.js';\\nimport {formatMoney, getFactions, getScripts} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['hacking', false],\\n\\t['combat', false],\\n\\t['crime', false],\\n\\t['company', false],\\n\\t['hacknet', false],\\n\\t['programs', false],\\n\\t['faction', false],\\n\\t['bladeburner', false],\\n\\t['focus', false],\\n\\t['hacking-skill', false],\\n\\t['infiltration', false],\\n\\t['all', false],\\n\\t['install', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst scripts = getScripts();\\n\\t// Check criteria for determining what augmentations are useful\\n\\tconst criteria = [];\\n\\tif (options.hacking || options.all) criteria.push(isUsefulHacking);\\n\\tif (options.combat || options.all) criteria.push(isUsefulCombat);\\n\\tif (options.crime || options.all) criteria.push(isUsefulCrime);\\n\\tif (options.company || options.all) criteria.push(isUsefulCompany);\\n\\tif (options.hacknet || options.all) criteria.push(isUsefulHacknet);\\n\\tif (options.programs || options.all) criteria.push(isUsefulPrograms);\\n\\tif (options.faction || options.all) criteria.push(isUsefulFaction);\\n\\tif (options.bladeburner || options.all) criteria.push(isUsefulBladeburner);\\n\\tif (options.focus || options.all) criteria.push(isUsefulFocus);\\n\\tif (options.infiltration || options.all) criteria.push(isUsefulInfiltration);\\n\\tif (options['hacking-skill'] || options.all) criteria.push(isUsefulHackingSkill);\\n\\t// Sell stocks before buying augmentations\\n\\tif (ns.stock.hasTIXAPIAccess()) { // Check if player has TIX API\\n\\t\\t// Check if player has any stocks\\n\\t\\tlet stocks = false;\\n\\t\\tfor (let sym of ns.stock.getSymbols()) {\\n\\t\\t\\tlet pos = ns.stock.getPosition(sym);\\n\\t\\t\\tif (pos[0] > 0 || pos[2] > 0) {\\n\\t\\t\\t\\tstocks = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Ask if player wants to sell stocks\\n\\t\\tif (stocks && await ns.prompt(`Do you want to sell all shares?`)) ns.exec(scripts.stock, 'home', 1, '--liquidate');\\n\\t}\\n\\t// Sell hashes before buying augmentations\\n\\tif (ns.getPlayer().bitNodeN === 9 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 9)) { // Check if player has hacknet servers\\n\\t\\t// Check if player has any hashes\\n\\t\\tif (ns.hacknet.numHashes() > 0 && await ns.prompt(`Do you want to sell all hashes?`)) {\\n\\t\\t\\t// Kill hacknet manager\\n\\t\\t\\tns.scriptKill(scripts.hacknet, 'home');\\n\\t\\t\\twhile (ns.hacknet.numHashes() > 4) {\\n\\t\\t\\t\\t// Sell all hashes\\n\\t\\t\\t\\tns.hacknet.spendHashes('Sell for Money');\\n\\t\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Purchase augmentations\\n\\tconst purchased = await purchaseAugmentations(ns, criteria);\\n\\tif (!purchased) return;\\n\\t// Prompt user for purchasing NeuroFlux Governor\\n\\tif (await ns.prompt(`Purchase NeuroFlux Governor levels?`)) {\\n\\t\\tlet highestRepFaction;\\n\\t\\tlet highestRep = 0;\\n\\t\\tfor (let faction of getFactions()) {\\n\\t\\t\\t// Cannot buy NFG from gangs\\n\\t\\t\\tif (ns.gang.inGang() && ns.gang.getGangInformation().faction === faction) continue;\\n\\t\\t\\t// Cannot buy NFG from Bladeburners\\n\\t\\t\\tif (faction === 'Bladeburners') continue;\\n\\t\\t\\t// Cannot buy NFG from Church of the Machine God\\n\\t\\t\\tif (faction === 'Church of the Machine God') continue;\\n\\t\\t\\t// Take highest reputation faction\\n\\t\\t\\tif (ns.singularity.getFactionRep(faction) > highestRep) {\\n\\t\\t\\t\\thighestRep = ns.singularity.getFactionRep(faction);\\n\\t\\t\\t\\thighestRepFaction = faction;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet counter = 0;\\n\\t\\twhile (ns.singularity.purchaseAugmentation(highestRepFaction, 'NeuroFlux Governor')) counter++;\\n\\t\\tns.tprint(`Purchased ${counter} levels of NeuroFlux Governor`);\\n\\t}\\n\\t// Purchase zero-cost augmentations\\n\\tawait purchaseAugmentations(ns, [isZeroCost]);\\n\\t// Ask to install augmentations\\n\\tif (options.install && await ns.prompt('Install augmentations?')) ns.singularity.installAugmentations('cortex.js');\\n}\\n\\nasync function purchaseAugmentations(ns, criteria) {\\n\\t// Augmentation price increase\\n\\tconst sf11Level = ns.singularity.getOwnedSourceFiles().find(s => s.n === 11)?.lvl;\\n\\tlet mult = 0;\\n\\tif (sf11Level) for (let i = 0; i < sf11Level; i++) mult += 4 / Math.pow(2, i);\\n\\tconst inc = 1.9 * (1 - mult / 100);\\n\\t// Get all useful and purchasable augmentations\\n\\tlet augmentations = [];\\n\\tfor (const faction of getFactions()) {\\n\\t\\tfor (const aug of ns.singularity.getAugmentationsFromFaction(faction)) {\\n\\t\\t\\tif (isUseful(ns, criteria, aug) && isPurchasable(ns, faction, aug, augmentations)) {\\n\\t\\t\\t\\taugmentations.push(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tfaction: faction,\\n\\t\\t\\t\\t\\t\\tname: aug,\\n\\t\\t\\t\\t\\t\\tprice: ns.singularity.getAugmentationPrice(aug)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Check if there are any purchasable augmentations\\n\\tif (augmentations.length > 0) {\\n\\t\\t// Sort augmentations according to their price\\n\\t\\taugmentations.sort((a, b) => {\\n\\t\\t\\tif (b.price > a.price) return 1;\\n\\t\\t\\telse if (a.price > b.price) return -1;\\n\\t\\t\\telse return ns.singularity.getAugmentationPrereq(b.name).length - ns.singularity.getAugmentationPrereq(a.name).length;\\n\\t\\t});\\n\\t\\t// Fit in augs before their prereqs\\n\\t\\tconst tempAugs = [];\\n\\t\\tconst coveredIndices = [];\\n\\t\\tfor (const [i, aug] of augmentations.entries()) { // TODO: fix multiple prereqs getting slotted\\n\\t\\t\\tif (coveredIndices.includes(i)) continue;\\n\\t\\t\\tconst prereqs = ns.singularity.getAugmentationPrereq(aug.name);\\n\\t\\t\\tif (prereqs.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereqs);\\n\\t\\t\\ttempAugs.push(aug);\\n\\t\\t}\\n\\t\\t// Deep copy augmentations\\n\\t\\taugmentations = JSON.parse(JSON.stringify(tempAugs));\\n\\t\\t// Calculate price of augs\\n\\t\\tlet stringAugs = '';\\n\\t\\tlet totalPrice = 0;\\n\\t\\tfor (const [i, aug] of augmentations.entries()) { // TODO: fix bug with prompt text not showing\\n\\t\\t\\tconst updatedAugPrice = aug.price * inc ** i;\\n\\t\\t\\tstringAugs += `${aug.name}: ${formatMoney(ns, aug.price)} (${formatMoney(ns, updatedAugPrice)}). `;\\n\\t\\t\\ttotalPrice += updatedAugPrice;\\n\\t\\t}\\n\\t\\t// Prompt user for buying augmentations\\n\\t\\tif (await ns.prompt(`${stringAugs}Buy augmentations for ${formatMoney(ns, totalPrice)}?`)) {\\n\\t\\t\\tfor (const aug of augmentations) {\\n\\t\\t\\t\\tif (ns.singularity.purchaseAugmentation(aug.faction, aug.name)) {\\n\\t\\t\\t\\t\\tns.tprint(`Purchased ${aug.name} from ${aug.faction} for ${formatMoney(ns, aug.price)}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.tprint(`Could not purchase ${aug.name} from ${aug.faction}`);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} augmentations\\n * @param {string[]} tempAugs\\n * @param {number[]} coveredIndices\\n * @param {string[]} prereq\\n */\\nfunction recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereqs) {\\n\\twhile (prereqs.length > 0) {\\n\\t\\tconst prereq = prereqs.shift();\\n\\t\\tconst index = augmentations.findIndex(aug => aug.name === prereq);\\n\\t\\tif (index >= 0) { // Fit in aug before their prereq\\n\\t\\t\\tcoveredIndices.push(index);\\n\\t\\t\\tconst prereqsOfPrereq = ns.singularity.getAugmentationPrereq(augmentations[index].name);\\n\\t\\t\\tif (prereqsOfPrereq.length > 0) recursiveFit(ns, augmentations, tempAugs, coveredIndices, prereqsOfPrereq);\\n\\t\\t\\ttempAugs.push(augmentations[index]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} faction\\n * @param {string} name\\n * @param {string[]} augmentations\\n * @returns {boolean}\\n */\\nfunction isPurchasable(ns, faction, name, augmentations) {\\n\\tlet facRep = ns.singularity.getFactionRep(faction);\\n\\tlet price = ns.singularity.getAugmentationPrice(name);\\n\\tlet repReq = ns.singularity.getAugmentationRepReq(name);\\n\\treturn !(facRep < repReq || // Faction reputation prerequisite\\n\\t\\tns.getServerMoneyAvailable('home') < price || // Check if it is able to be bought\\n\\t\\taugmentations.some(aug => aug.name === name) || // Check to see if it can be bought from another faction\\n\\t\\tns.singularity.getOwnedAugmentations(true).includes(name) // Check if already bought\\n\\t);\\n}\",\"filename\":\"augmentations/purchase.js\",\"server\":\"home\"}}],[\"augmentations/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulPrograms(ns, name) {\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful programs augmentations\\n\\t\\t\\tname === 'CashRoot Starter Kit' || // Starting money and programs\\n\\t\\t\\tname === 'BitRunners Neurolink' || // Programs\\n\\t\\t\\tname === 'PCMatrix' // Programs\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFaction(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) && stats.faction_rep; // Useful faction augmentations\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulFocus(ns, name) {\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful focus augmentations\\n\\t\\t\\tname === 'Neuroreceptor Management Implant' || // No simultaneous penalty\\n\\t\\t\\tname === 'The Blade\\\\'s Simulacrum' // Bladeburner and working\\n\\t\\t);\\n\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacking(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacking augmentations\\n\\t\\t\\tstats.hacking ||\\n\\t\\t\\tstats.hacking_exp ||\\n\\t\\t\\tstats.hacking_chance ||\\n\\t\\t\\tstats.hacking_speed ||\\n\\t\\t\\tstats.hacking_money ||\\n\\t\\t\\tstats.hacking_grow\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHackingSkill(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacking skill augmentations\\n\\t\\t\\tstats.hacking ||\\n\\t\\t\\tstats.hacking_exp\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCombat(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful combat augmentations\\n\\t\\t\\tstats.agility_exp ||\\n\\t\\t\\tstats.agility ||\\n\\t\\t\\tstats.defense_exp ||\\n\\t\\t\\tstats.defense ||\\n\\t\\t\\tstats.dexterity_exp ||\\n\\t\\t\\tstats.dexterity ||\\n\\t\\t\\tstats.strength_exp ||\\n\\t\\t\\tstats.strength\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCrime(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful crime augmentations\\n\\t\\t\\tstats.crime_money ||\\n\\t\\t\\tstats.crime_success\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulCompany(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful company augmentations\\n\\t\\t\\tstats.charisma_exp ||\\n\\t\\t\\tstats.charisma ||\\n\\t\\t\\tstats.company_rep ||\\n\\t\\t\\tstats.work_money\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulHacknet(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful hacknet augmentations\\n\\t\\t\\tstats.hacknet_node_core_cost ||\\n\\t\\t\\tstats.hacknet_node_level_cost ||\\n\\t\\t\\tstats.hacknet_node_money ||\\n\\t\\t\\tstats.hacknet_node_purchase_cost ||\\n\\t\\t\\tstats.hacknet_node_ram_cost\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulBladeburner(ns, name) {\\n\\tconst stats = ns.singularity.getAugmentationStats(name);\\n\\treturn ignore(name) &&\\n\\t\\t( \\t// Useful bladeburner augmentations\\n\\t\\t\\tstats.bladeburner_analysis ||\\n\\t\\t\\tstats.bladeburner_max_stamina ||\\n\\t\\t\\tstats.bladeburner_stamina_gain ||\\n\\t\\t\\tstats.bladeburner_success_chance\\n\\t\\t);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUsefulInfiltration(ns, name) {\\n\\treturn ignore(name) && name.includes('SoA');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isZeroCost(ns, name) {\\n\\tif (ns.singularity.getAugmentationPrice(name) === 0) return true;\\n}\\n\\n/**\\n *\\n * @param {string} name\\n * @return {boolean}\\n */\\nfunction ignore(name) {\\n\\treturn name !== 'NeuroFlux Governor' && !name.includes('Stanek\\\\'s Gift');\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {function} criteria\\n * @param {string} name\\n * @returns {boolean}\\n */\\nexport function isUseful(ns, criteria, name) {\\n\\tfor (const criterion of criteria) if (criterion(ns, name)) return true;\\n\\treturn false;\\n}\\n\\n\",\"filename\":\"augmentations/utils.js\",\"server\":\"home\"}}],[\"bladeburner/autopilot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCities, promptScriptRunning} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst bb = ns.bladeburner;\\n\\tif (ns.getPlayer().bitNodeN !== 7 && !ns.singularity.getOwnedSourceFiles().some(s => s.n === 7 && s.lvl >= 1)) throw new Error(`This script requires the Bladeburner API`);\\n\\tif (!bb.joinBladeburnerDivision()) throw new Error(`Must be able to join Bladeburner division`);\\n\\t// Minimum chance for switching actions\\n\\tconst minChance = 1 / 3;\\n\\t// Sort black ops in ascending rank\\n\\tlet maxRequiredRank = 0;\\n\\tconst blackOps = bb.getBlackOpNames().map(blackOp => {\\n\\t\\tconst requiredRank = bb.getBlackOpRank(blackOp);\\n\\t\\tif (maxRequiredRank < requiredRank) maxRequiredRank = requiredRank;\\n\\t\\treturn {name: blackOp, requiredRank};\\n\\t}).sort((a, b) => a.requiredRank - b.requiredRank);\\n\\tns.print(`Max rank required: ${maxRequiredRank}`);\\n\\tlet lastLookAround = 0;\\n\\t// Autopilot\\n\\twhile (true) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tconst rank = bb.getRank();\\n\\t\\t// Join Faction if we can\\n\\t\\tif (rank > 25) bb.joinBladeburnerFaction();\\n\\t\\t// Check if we can get skills\\n\\t\\tlet points = bb.getSkillPoints();\\n\\t\\twhile (points > 0) {\\n\\t\\t\\tconst skills = getSkillsData().filter(s => bb.getSkillLevel(s.name) < s.max || s.max === -1).map(\\n\\t\\t\\t\\ts => {\\n\\t\\t\\t\\t\\tconst cost = bb.getSkillUpgradeCost(s.name);\\n\\t\\t\\t\\t\\tlet value = s.bonus / cost;\\n\\t\\t\\t\\t\\tif (s.name === 'Overclock' &&\\n\\t\\t\\t\\t\\t\\tbb.getActionEstimatedSuccessChance('Operation', 'Assassination')[0] === 1) value = 1000;\\n\\t\\t\\t\\t\\telse if (s.late &&\\n\\t\\t\\t\\t\\t\\tbb.getSkillLevel('Overclock') < getSkillsData().find(s => s.name === 'Overclock').max) value = 0;\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t...s,\\n\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\tcost\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}).sort((a, b) => b.value - a.value);\\n\\t\\t\\t// Get current best skill\\n\\t\\t\\tconst skill = skills[0];\\n\\t\\t\\tif (skill.cost > points) break;\\n\\t\\t\\t// Purchase current best skill\\n\\t\\t\\tbb.upgradeSkill(skill.name);\\n\\t\\t\\tns.print(`Purchasing ${skill.name} for ${skill.cost} skill points`);\\n\\t\\t\\t// Update skill points\\n\\t\\t\\tpoints = bb.getSkillPoints();\\n\\t\\t}\\n\\t\\t// Train combat to get 100 in all combat stats\\n\\t\\tif (player.skills.strength < 100 || player.skills.defense < 100 ||\\n\\t\\t\\tplayer.skills.dexterity < 100 || player.skills.agility < 100) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Training');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check if we can do black ops\\n\\t\\tfor (const blackOp of blackOps) {\\n\\t\\t\\tif (rank < blackOp.requiredRank) break; // Can't do this Black Op yet\\n\\t\\t\\tif (bb.getActionCountRemaining('BlackOps', blackOp.name) === 0) continue; // Already did the Black Op\\n\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\tif (amax < 1) break; // Not yet at 100%\\n\\t\\t\\twhile (amin !== amax) { // Needs field analysis\\n\\t\\t\\t\\tawait doAction(ns, 'General', 'Field Analysis');\\n\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('BlackOps', blackOp.name);\\n\\t\\t\\t}\\n\\t\\t\\tif (amax < 1) break; // Attempt only at 100%\\n\\t\\t\\t// Ask player to complete the Bitnode\\n\\t\\t\\tif (blackOp.name === 'Operation Daedalus') {\\n\\t\\t\\t\\twhile (promptScriptRunning(ns, 'home')) {\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!await ns.prompt(`Complete Operation Daedalus and finish Bitnode?`)) {\\n\\t\\t\\t\\t\\tns.tprint(`Stopping Bladeburner manager`);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tawait doAction(ns, 'BlackOps', blackOp.name);\\n\\t\\t}\\n\\t\\t// Get current city\\n\\t\\tlet city = bb.getCity();\\n\\t\\tif (lastLookAround < Date.now() - 60 * 60 * 1000) {\\n\\t\\t\\tlastLookAround = Date.now();\\n\\t\\t\\t// Update best city\\n\\t\\t\\tns.print(`Finding best city`);\\n\\t\\t\\tconst raid = bb.getActionCountRemaining('Operation', 'Assassination') === 0;\\n\\t\\t\\tlet bestPop = 0;\\n\\t\\t\\tlet bestCity = '';\\n\\t\\t\\tfor (const city of getCities()) {\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t\\tlet [amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\twhile (amin !== amax) {\\n\\t\\t\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\t\\t\\t[amin, amax] = bb.getActionEstimatedSuccessChance('Operation', 'Assassination');\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconst pop = bb.getCityEstimatedPopulation(city);\\n\\t\\t\\t\\tif (pop > bestPop && !(raid && bb.getCityCommunities(city) === 0)) {\\n\\t\\t\\t\\t\\tbestPop = pop;\\n\\t\\t\\t\\t\\tbestCity = city;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Switch to best city\\n\\t\\t\\tif (bestCity && city !== bestCity) {\\n\\t\\t\\t\\tcity = bestCity;\\n\\t\\t\\t\\tns.print(`Switched to ${city}`);\\n\\t\\t\\t\\tbb.switchCity(city);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check if chaos is over 50\\n\\t\\tconst chaos = bb.getCityChaos(city);\\n\\t\\tif (chaos >= 50) {\\n\\t\\t\\tns.print(`Chaos is high in ${city}`);\\n\\t\\t\\tif (bb.getActionEstimatedSuccessChance('Operation', 'Stealth Retirement Operation')[0] === 1 &&\\n\\t\\t\\t\\tbb.getActionCountRemaining('Operation', 'Stealth Retirement Operation') > 0) {\\n\\t\\t\\t\\tawait doAction(ns, 'Operation', 'Stealth Retirement Operation');\\n\\t\\t\\t} else await doAction(ns, 'General', 'Diplomacy');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Get best action\\n\\t\\tlet needsImprovedAccuracy = false;\\n\\t\\tconst actions = getActionData().filter(a => {\\n\\t\\t\\tconst [amin, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\tconst minMax = amin === amax;\\n\\t\\t\\tconst include = a.late ? bb.getActionCountRemaining('Operation', 'Assassination') === 0 : true;\\n\\t\\t\\tif (!minMax) needsImprovedAccuracy = true;\\n\\t\\t\\treturn bb.getActionCountRemaining(a.type, a.name) > 0 && minMax && amin >= minChance && include;\\n\\t\\t}).map(a => {\\n\\t\\t\\tconst level = bb.getActionCurrentLevel(a.type, a.name);\\n\\t\\t\\tconst rewardMultiplier = Math.pow(a.rewardFac, level - 1);\\n\\t\\t\\tconst gain = a.rankGain * rewardMultiplier * ns.getBitNodeMultipliers().BladeburnerRank;\\n\\t\\t\\tconst time = bb.getActionTime(a.type, a.name);\\n\\t\\t\\tconst [, amax] = bb.getActionEstimatedSuccessChance(a.type, a.name);\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...a,\\n\\t\\t\\t\\tgain,\\n\\t\\t\\t\\tlevel,\\n\\t\\t\\t\\trewardMultiplier,\\n\\t\\t\\t\\ttime,\\n\\t\\t\\t\\tchance: amax\\n\\t\\t\\t};\\n\\t\\t}).sort((a, b) => b.gain * b.chance / b.time - a.gain * a.chance / a.time);\\n\\t\\t// Do field analysis if needed\\n\\t\\tif (needsImprovedAccuracy) {\\n\\t\\t\\tawait improveAccuracy(ns);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Check stamina\\n\\t\\tconst [stamina, maxStamina] = bb.getStamina();\\n\\t\\tif (stamina < maxStamina / 2) {\\n\\t\\t\\tawait doAction(ns, 'General', 'Hyperbolic Regeneration Chamber');\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Do best action\\n\\t\\tconst action = actions[0];\\n\\t\\tawait doAction(ns, action.type, action.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function improveAccuracy(ns) {\\n\\tconst [type, name] = bestOpForImprovingAccuracy(ns);\\n\\tawait doAction(ns, type, name);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {string} name\\n * @returns {Promise<void>}\\n */\\nasync function doAction(ns, type, name) {\\n\\tconst bb = ns.bladeburner;\\n\\t// If already doing the action go back\\n\\tif (bb.getCurrentAction().name === name) {\\n\\t\\tawait ns.sleep(100);\\n\\t\\treturn;\\n\\t}\\n\\t// Take into account bonus time\\n\\tconst actionTime = bb.getActionTime(type, name);\\n\\tconst bonusTime = bb.getBonusTime();\\n\\tconst time = bonusTime === 0\\n\\t\\t? actionTime                            // If we don't have bonus time\\n\\t\\t: bonusTime > actionTime\\n\\t\\t\\t? actionTime / 4                    // If we have more bonus time than action time\\n\\t\\t\\t: actionTime - 0.75 * bonusTime;    // If we have less bonus time than action time\\n\\t// Wait until the action finishes\\n\\tconst started = bb.startAction(type, name);\\n\\tif (started) {\\n\\t\\tns.print(`Carrying out ${name}`);\\n\\t\\tawait ns.sleep(Math.ceil(time / 1e3) * 1e3 + 100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getSkillsData() {\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'Blade\\\\'s Intuition',\\n\\t\\t\\tbonus: 3,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cloak',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Short-Circuit',\\n\\t\\t\\tbonus: 5.5,\\n\\t\\t\\tmax: 25\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Digital Observer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Tracer',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 5\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Overclock',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: 90\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Reaper',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Evasive System',\\n\\t\\t\\tbonus: 4,\\n\\t\\t\\tmax: 150\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 1,\\n\\t\\t\\tmax: -1,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Datamancer',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Cyber\\\\'s Edge',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hands of Midas',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperdrive',\\n\\t\\t\\tbonus: 0,\\n\\t\\t\\tmax: -1\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @returns {Object[]}\\n */\\nexport function getActionData() {\\n\\treturn [\\n\\t\\t// General\\n\\t\\t{\\n\\t\\t\\tname: 'Training',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Field Analysis',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 1,\\n\\t\\t\\trankGain: 0.1,\\n\\t\\t\\taccuracy: 'eff'\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Recruitment',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Diplomacy',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Hyperbolic Regeneration Chamber',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Incite Violence',\\n\\t\\t\\ttype: 'General',\\n\\t\\t\\trewardFac: 0,\\n\\t\\t\\trankGain: 0\\n\\t\\t},\\n\\t\\t// Contracts\\n\\t\\t{\\n\\t\\t\\tname: 'Tracking',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.041,\\n\\t\\t\\trankGain: 0.3\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Bounty Hunter',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.085,\\n\\t\\t\\trankGain: 0.9\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Retirement',\\n\\t\\t\\ttype: 'Contract',\\n\\t\\t\\trewardFac: 1.065,\\n\\t\\t\\trankGain: 0.6\\n\\t\\t},\\n\\t\\t// Operations\\n\\t\\t{\\n\\t\\t\\tname: 'Investigation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.07,\\n\\t\\t\\trankGain: 2.2,\\n\\t\\t\\taccuracy: 0.4\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Undercover Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.09,\\n\\t\\t\\trankGain: 4.4,\\n\\t\\t\\taccuracy: 0.8\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Sting Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.095,\\n\\t\\t\\trankGain: 5.5,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Raid',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.1,\\n\\t\\t\\trankGain: 55,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Stealth Retirement Operation',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.11,\\n\\t\\t\\trankGain: 22,\\n\\t\\t\\tlate: true\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'Assassination',\\n\\t\\t\\ttype: 'Operation',\\n\\t\\t\\trewardFac: 1.14,\\n\\t\\t\\trankGain: 44\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {[string, string]}\\n */\\nexport function bestOpForImprovingAccuracy(ns) {\\n\\tconst bb = ns.bladeburner;\\n\\tconst improvingAccuracyActions = getActionData().filter(a => a.accuracy);\\n\\tlet bestCost = 0;\\n\\tlet type;\\n\\tlet op;\\n\\tfor (let action of improvingAccuracyActions) {\\n\\t\\tif (bb.getActionCountRemaining(action.type, action.name) === 0) continue;\\n\\t\\tlet cost = action.accuracy;\\n\\t\\tif (cost === 'eff') cost = calculateEff(ns); // Used for general field analysis\\n\\t\\tcost *= bb.getActionEstimatedSuccessChance(action.type, action.name)[1]; // Multiply by current supposed best chance\\n\\t\\tcost /= bb.getActionTime(action.type, action.name); // Divide by time taken for the action to complete\\n\\t\\tif (cost > bestCost) {\\n\\t\\t\\tbestCost = cost;\\n\\t\\t\\ttype = action.type;\\n\\t\\t\\top = action.name;\\n\\t\\t}\\n\\t}\\n\\treturn [type, op];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number}\\n */\\nfunction calculateEff(ns) {\\n\\tconst player = ns.getPlayer();\\n\\treturn (0.04 * Math.pow(player.skills.hacking, 0.3) +\\n\\t\\t\\t0.04 * Math.pow(player.skills.intelligence, 0.9) +\\n\\t\\t\\t0.02 * Math.pow(player.skills.charisma, 0.3)) *\\n\\t\\tplayer.mults.bladeburner_analysis;\\n}\",\"filename\":\"bladeburner/autopilot.js\",\"server\":\"home\"}}],[\"build/script-remover.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFileHandle} from 'utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst scriptsToKeep = ['/build/scripts.txt', '/build/download-bitburner-scripts.js'];\\n\\tns.read('/build/scripts.txt').split('\\\\n').forEach(script =>\\n\\t\\tscript.includes('/') ? scriptsToKeep.push('/' + script) : scriptsToKeep.push(script));\\n\\tfor (let i = 1; i <= 20; i++) scriptsToKeep.push(getFileHandle(i));\\n\\tlet files = ns.ls('home').filter(file => file.endsWith('.js') || file.endsWith('.txt'));\\n\\tif (files.length === 0) {\\n\\t\\tns.tprint(`There are no files to delete`);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let file of files) {\\n\\t\\tif (!scriptsToKeep.includes(file)) {\\n\\t\\t\\tif (await ns.prompt(`Delete ${file}?`)) {\\n\\t\\t\\t\\tns.rm(file, 'home');\\n\\t\\t\\t\\tns.tprint(`Deleted ${file}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"build/script-remover.js\",\"server\":\"home\"}}],[\"build/update.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const fs = require('fs');\\nconst path = require('path');\\nconst http = require('https');\\n\\n/**\\n *\\n * @param {string} dir\\n * @param {string[]} arrayOfFiles\\n * @returns {string[]}\\n */\\nfunction getFilesRecursive(dir, arrayOfFiles) {\\n\\ttry {\\n\\t\\tconst files = fs.readdirSync(dir);\\n\\t\\tarrayOfFiles = arrayOfFiles || [];\\n\\t\\tfiles.forEach(file => {\\n\\t\\t\\tconst subfile = path.join(dir, file);\\n\\t\\t\\tif (file !== 'test') {\\n\\t\\t\\t\\tif (fs.statSync(subfile).isDirectory()) arrayOfFiles = getFilesRecursive(subfile, arrayOfFiles);\\n\\t\\t\\t\\telse arrayOfFiles.push(subfile);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\treturn arrayOfFiles.filter(file => (path.extname(file) === '.txt' || path.extname(file) === '.js'));\\n\\t} catch (err) {\\n\\t\\tconsole.log(err);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} dir\\n * @returns {string[]}\\n */\\nfunction getFiles(dir = __dirname) {\\n\\tconst files = getFilesRecursive(`${dir}`);\\n\\tconst relativeFiles = [];\\n\\tfiles.forEach(file => relativeFiles.push(path.relative(dir, file).replace(/\\\\\\\\/g, '/')));\\n\\treturn relativeFiles;\\n}\\n\\n/**\\n *\\n * @param {string} filename\\n * @param {string} str\\n */\\nfunction writeToFile(filename, str) {\\n\\tfs.writeFile(filename, str, (err) => {\\n\\t\\tif (err) console.log(err);\\n\\t\\telse console.log('File written successfully');\\n\\t});\\n}\\n\\nconst dir = path.join(__dirname, '../');\\nconst files = getFiles(`${dir}`);\\nconst str = files.join('\\\\n');\\nwriteToFile('scripts.txt', str);\\n\\nconst index = fs.createWriteStream('../types/index.d.ts');\\nconst url = 'https://raw.githubusercontent.com/danielyxie/bitburner/dev/src/ScriptEditor/NetscriptDefinitions.d.ts';\\nhttp.get(url, response => response.pipe(index));\",\"filename\":\"build/update.js\",\"server\":\"home\"}}],[\"company/work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getCompanies, getCompanyPositions} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tconst companies = getCompanies();\\n\\t\\tconst company = await ns.prompt(`Work for company?`, {type: 'select', choices: ['None', ...companies]});\\n\\t\\tif (company === 'None') break;\\n\\t\\tconst position = await ns.prompt(`Company position?`, {type: 'select', choices: getCompanyPositions(company)});\\n\\t\\tconst rep = Number(await ns.prompt(`Work until how much reputation? (Leave empty to work indefinitely)`, {type: 'text'}));\\n\\t\\tif (!rep) {\\n\\t\\t\\tns.singularity.applyToCompany(company, position);\\n\\t\\t\\tif (!ns.singularity.workForCompany(company, ns.singularity.isFocused())) throw new Error(`Could not work for company (Not enough qualifications?)`);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\twhile (ns.singularity.getCompanyRep(company) < rep) {\\n\\t\\t\\tns.singularity.applyToCompany(company, position);\\n\\t\\t\\tif (!ns.singularity.workForCompany(company, ns.singularity.isFocused())) throw new Error(`Could not work for company (Not enough qualifications?)`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"company/work.js\",\"server\":\"home\"}}],[\"contracts/contractor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers, printBoth} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tcontractor(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function contractor(ns) {\\n\\tfor (let server of getServers(ns)) {\\n\\t\\tconst files = ns.ls(server, '.cct');\\n\\t\\tfor (let file of files) {\\n\\t\\t\\tconst contract = ns.codingcontract.getContractType(file, server);\\n\\t\\t\\tconst data = ns.codingcontract.getData(file, server);\\n\\t\\t\\tlet solution;\\n\\t\\t\\tswitch (contract) {\\n\\t\\t\\t\\tcase 'Find Largest Prime Factor':\\n\\t\\t\\t\\t\\tsolution = largestPrimeFactor(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Subarray with Maximum Sum':\\n\\t\\t\\t\\t\\tsolution = subarrayMaxSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Spiralize Matrix':\\n\\t\\t\\t\\t\\tsolution = spiralizeMatrix(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Minimum Path Sum in a Triangle':\\n\\t\\t\\t\\t\\tsolution = minPathSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid I':\\n\\t\\t\\t\\t\\tsolution = uniquePathsI(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Unique Paths in a Grid II':\\n\\t\\t\\t\\t\\tsolution = uniquePathsII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Shortest Path in a Grid':\\n\\t\\t\\t\\t\\tsolution = shortestPath(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader I':\\n\\t\\t\\t\\t\\tsolution = stockTrader(1, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader II':\\n\\t\\t\\t\\t\\tsolution = stockTrader(Math.floor(data.length / 2), data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader III':\\n\\t\\t\\t\\t\\tsolution = stockTrader(2, data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Algorithmic Stock Trader IV':\\n\\t\\t\\t\\t\\tsolution = stockTrader(...data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Generate IP Addresses':\\n\\t\\t\\t\\t\\tsolution = genIPAddresses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Merge Overlapping Intervals':\\n\\t\\t\\t\\t\\tsolution = mergeOverlappingIntervals(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGame(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Array Jumping Game II':\\n\\t\\t\\t\\t\\tsolution = arrayJumpingGameII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSum(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Total Ways to Sum II':\\n\\t\\t\\t\\t\\tsolution = totalWaysToSumII(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Find All Valid Math Expressions':\\n\\t\\t\\t\\t\\tsolution = validMathExpressions(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Sanitize Parentheses in Expression':\\n\\t\\t\\t\\t\\tsolution = sanitizeParentheses(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'HammingCodes: Integer to Encoded Binary':\\n\\t\\t\\t\\t\\tsolution = hammingEncode(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'HammingCodes: Encoded Binary to Integer':\\n\\t\\t\\t\\t\\tsolution = hammingDecode(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Proper 2-Coloring of a Graph':\\n\\t\\t\\t\\t\\tsolution = twoColoring(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression I: RLE Compression':\\n\\t\\t\\t\\t\\tsolution = runLengthEncoding(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression II: LZ Decompression':\\n\\t\\t\\t\\t\\tsolution = decompressLZ(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Compression III: LZ Compression':\\n\\t\\t\\t\\t\\tsolution = compressLZ(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Encryption I: Caesar Cipher':\\n\\t\\t\\t\\t\\tsolution = caesar(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase 'Encryption II: Vigenère Cipher':\\n\\t\\t\\t\\t\\tsolution = vigenere(data);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`Found ${file} on ${server} of type: ${contract}. This does not have a solver yet.`);\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tconst result = ns.codingcontract.attempt(solution, file, server, {returnReward: true});\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tprintBoth(ns, `Solved ${file} on ${server} of type: ${contract}. ${result}.`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprintBoth(ns, `Could not solve ${file} on ${server} of type: ${contract}...`);\\n\\t\\t\\t\\tprintBoth(ns, `Disabling contractor...`);\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction largestPrimeFactor(n) {\\n\\tlet maxPrime = 0;\\n\\twhile (n % 2 === 0) {\\n\\t\\tn = Math.floor(n / 2);\\n\\t\\tmaxPrime = 2;\\n\\t}\\n\\tfor (let i = 3; i <= Math.floor(Math.sqrt(n)) + 1; i = i + 2) {\\n\\t\\twhile (n % i === 0) {\\n\\t\\t\\tn = Math.floor(n / i);\\n\\t\\t\\tmaxPrime = i;\\n\\t\\t}\\n\\t}\\n\\tif (n > 2) maxPrime = n;\\n\\n\\treturn maxPrime;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction subarrayMaxSum(array) {\\n\\tconst sumReduce = (a, b) => a + b;\\n\\tlet maxSum = -Infinity;\\n\\tlet sum;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tfor (let j = i; j < array.length; j++) {\\n\\t\\t\\tsum = array.slice(i, j + 1).reduce(sumReduce);\\n\\t\\t\\tif (sum > maxSum) maxSum = sum;\\n\\t\\t}\\n\\t}\\n\\treturn maxSum;\\n}\\n\\n/**\\n *\\n * @param {number[][]} matrix\\n * @returns {number[][]}\\n */\\nfunction spiralizeMatrix(matrix) {\\n\\tconst rows = matrix.length;\\n\\tconst cols = matrix[0].length;\\n\\n\\tlet maxrow = rows - 1;\\n\\tlet maxcol = cols - 1;\\n\\tlet minrow = 0;\\n\\tlet mincol = 0;\\n\\n\\tlet row = 0;\\n\\tlet col = 0;\\n\\n\\tlet list = [];\\n\\twhile (list.length < rows * cols) {\\n\\t\\tif (maxrow >= minrow) {\\n\\t\\t\\tfor (col; col <= maxcol; col++) list.push(matrix[row][col]);\\n\\t\\t\\tminrow++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol--;\\n\\t\\t}\\n\\t\\tif (maxcol >= mincol) {\\n\\t\\t\\tfor (row; row <= maxrow; row++) list.push(matrix[row][col]);\\n\\t\\t\\tmaxcol--;\\n\\t\\t\\tcol--;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (minrow <= maxrow) {\\n\\t\\t\\tfor (col; col >= mincol; col--) list.push(matrix[row][col]);\\n\\t\\t\\tmaxrow--;\\n\\t\\t\\tcol++;\\n\\t\\t\\trow--;\\n\\t\\t}\\n\\t\\tif (mincol <= maxcol) {\\n\\t\\t\\tfor (row; row >= minrow; row--) list.push(matrix[row][col]);\\n\\t\\t\\tmincol++;\\n\\t\\t\\trow++;\\n\\t\\t\\tcol++;\\n\\t\\t}\\n\\t}\\n\\treturn list;\\n}\\n\\n/**\\n *\\n * @param {number[][]} data\\n * @returns {number}\\n */\\nfunction minPathSum(data) {\\n\\tconst totalPaths = Math.pow(2, data.length - 1);\\n\\tlet minSum = Infinity;\\n\\tfor (let i = 0; i < totalPaths; i++) {\\n\\t\\tlet bin = i.toString(2);\\n\\t\\twhile (bin.length < data.length - 1) {\\n\\t\\t\\tbin = '0' + bin;\\n\\t\\t}\\n\\n\\t\\tlet sum = data[0][0];\\n\\t\\tlet k = 0;\\n\\t\\tfor (let j = 1; j < data.length; j++) {\\n\\t\\t\\tlet index = parseInt(bin.charAt(j - 1));\\n\\t\\t\\tk += index;\\n\\t\\t\\tsum += data[j][k];\\n\\t\\t}\\n\\n\\t\\tif (sum < minSum) minSum = sum;\\n\\t}\\n\\treturn minSum;\\n}\\n\\n/**\\n *\\n * @param {[number, number]} data\\n * @returns {number}\\n */\\nfunction uniquePathsI(data) {\\n\\tconst [m, n] = data;\\n\\tconst f = [];\\n\\tconst x = factorial(f, m + n - 2);\\n\\tconst y = factorial(f, m - 1);\\n\\tconst z = factorial(f, n - 1);\\n\\treturn x / (y * z);\\n}\\n\\n/**\\n *\\n * @param {number[]} f\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction factorial(f, n) {\\n\\tif (n === 0 || n === 1) return 1;\\n\\tif (f[n] > 0) return f[n];\\n\\treturn f[n] = n * factorial(f, n - 1);\\n}\\n\\n/**\\n *\\n * @param {number[][]} grid\\n * @returns {number}\\n */\\nfunction uniquePathsII(grid) {\\n\\tconst gridSum = [];\\n\\tfor (let i of grid) {\\n\\t\\tgridSum.push(i.slice());\\n\\t}\\n\\tfor (let i = 0; i < gridSum.length; i++) {\\n\\t\\tfor (let j = 0; j < gridSum[0].length; j++) {\\n\\t\\t\\tif (gridSum[i][j] === 1) {\\n\\t\\t\\t\\tgridSum[i][j] = 0;\\n\\t\\t\\t} else if (i === 0 && j === 0) {\\n\\t\\t\\t\\tgridSum[0][0] = 1;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgridSum[i][j] = (i > 0 ? gridSum[i - 1][j] : 0) + (j > 0 ? gridSum[i][j - 1] : 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn gridSum[gridSum.length - 1][gridSum[0].length - 1];\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {string}\\n */\\nfunction shortestPath(array) {\\n\\tconst dist = array.map(arr => new Array(arr.length).fill(Infinity));\\n\\tconst prev = array.map(arr => new Array(arr.length).fill(undefined));\\n\\tconst path = array.map(arr => new Array(arr.length).fill(undefined));\\n\\tconst queue = [];\\n\\tarray.forEach((arr, i) => arr.forEach((a, j) => {\\n\\t\\tif (a === 0) queue.push([i, j]);\\n\\t}));\\n\\n\\tdist[0][0] = 0;\\n\\tconst height = array.length;\\n\\tconst length = array[height - 1].length;\\n\\tconst target = [height - 1, length - 1];\\n\\twhile (queue.length > 0) {\\n\\t\\tlet u;\\n\\t\\tlet d = Infinity;\\n\\t\\tlet idx;\\n\\t\\tqueue.forEach(([i, j], k) => {\\n\\t\\t\\tif (dist[i][j] < d) {\\n\\t\\t\\t\\tu = [i, j];\\n\\t\\t\\t\\td = dist[i][j];\\n\\t\\t\\t\\tidx = k;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tif (JSON.stringify(u) === JSON.stringify(target)) {\\n\\t\\t\\tlet str = '';\\n\\t\\t\\tlet [a, b] = target;\\n\\t\\t\\tif (prev[a][b] || (a === 0 && b === 0)) {\\n\\t\\t\\t\\twhile (prev[a][b]) {\\n\\t\\t\\t\\t\\tstr = path[a][b] + str;\\n\\t\\t\\t\\t\\t[a, b] = prev[a][b];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn str;\\n\\t\\t}\\n\\t\\tqueue.splice(idx, 1);\\n\\t\\tif (u === undefined) continue;\\n\\t\\tconst [a, b] = u;\\n\\t\\tfor (const [s, i, j] of [['D', a + 1, b], ['U', a - 1, b], ['R', a, b + 1], ['L', a, b - 1]]) {\\n\\t\\t\\tif (i < 0 || i >= height || j < 0 || j >= length) continue; // Index over edge\\n\\t\\t\\tif (array[i][j] === 1) continue; // We've hit a wall;\\n\\t\\t\\tif (!queue.some(([k, l]) => k === i && l === j)) continue; // Vertex not in queue\\n\\t\\t\\tconst alt = dist[a][b] + 1;\\n\\t\\t\\tif (alt < dist[i][j]) {\\n\\t\\t\\t\\tdist[i][j] = alt;\\n\\t\\t\\t\\tprev[i][j] = u;\\n\\t\\t\\t\\tpath[i][j] = s;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn '';\\n}\\n\\n/**\\n *\\n * @param {number} maxTrades\\n * @param {number[]} stockPrices\\n * @returns {number}\\n */\\nfunction stockTrader(maxTrades, stockPrices) {\\n\\tlet tempStr = '[0';\\n\\tfor (let i = 0; i < stockPrices.length - 1; i++) {\\n\\t\\ttempStr += ',0';\\n\\t}\\n\\ttempStr += ']';\\n\\tlet tempArr = '[' + tempStr;\\n\\tfor (let i = 0; i < maxTrades - 1; i++) {\\n\\t\\ttempArr += ',' + tempStr;\\n\\t}\\n\\ttempArr += ']';\\n\\n\\tconst highestProfit = JSON.parse(tempArr);\\n\\n\\tfor (let i = 0; i < maxTrades; i++) {\\n\\t\\tfor (let j = 0; j < stockPrices.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < stockPrices.length; k++) {\\n\\t\\t\\t\\tif (i > 0 && j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && j > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (i > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else if (j > 0 && k > 0) {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thighestProfit[i][k] = Math.max(highestProfit[i][k], stockPrices[k] - stockPrices[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn highestProfit[maxTrades - 1][stockPrices.length - 1];\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string[]}\\n */\\nfunction genIPAddresses(str) {\\n\\tconst ips = [];\\n\\tfor (let i = 1; i < str.length - 2; i++) {\\n\\t\\tfor (let j = i + 1; j < str.length - 1; j++) {\\n\\t\\t\\tfor (let k = j + 1; k < str.length; k++) {\\n\\t\\t\\t\\tconst ip = [\\n\\t\\t\\t\\t\\tstr.slice(0, i),\\n\\t\\t\\t\\t\\tstr.slice(i, j),\\n\\t\\t\\t\\t\\tstr.slice(j, k),\\n\\t\\t\\t\\t\\tstr.slice(k)\\n\\t\\t\\t\\t];\\n\\n\\t\\t\\t\\tlet isValid = true;\\n\\t\\t\\t\\tip.forEach(seg => {\\n\\t\\t\\t\\t\\tisValid = isValid && isValidIpSegment(seg);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (isValid) ips.push(ip.join('.'));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn ips;\\n}\\n\\n/**\\n *\\n * @param {string[]} segment\\n * @returns {boolean}\\n */\\nfunction isValidIpSegment(segment) {\\n\\treturn !((segment[0] === '0' && segment !== '0') || segment > 255);\\n}\\n\\n/**\\n *\\n * @param {number[][]} array\\n * @returns {number[][]}\\n */\\nfunction mergeOverlappingIntervals(array) {\\n\\tarray.sort((a, b) => a[0] - b[0]);\\n\\n\\tconst intervals = [array[0].slice()];\\n\\tfor (let interval of array) {\\n\\t\\tlet [x1, y1] = interval;\\n\\t\\tlet [, y2] = intervals[intervals.length - 1];\\n\\n\\t\\tif (y2 >= x1) intervals[intervals.length - 1][1] = Math.max(y1, y2);\\n\\t\\telse intervals.push(interval.slice());\\n\\t}\\n\\treturn intervals;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction arrayJumpingGame(array) {\\n\\tconst reachable = jumps(array);\\n\\treturn reachable.includes(Infinity) ? 0 : 1;\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number}\\n */\\nfunction arrayJumpingGameII(array) {\\n\\tconst reachable = jumps(array);\\n\\treturn reachable[reachable.length - 1] === Infinity ? 0 : reachable[reachable.length - 1];\\n}\\n\\n/**\\n *\\n * @param {number[]} array\\n * @returns {number[]}\\n */\\nfunction jumps(array) {\\n\\tconst reachable = new Array(array.length).fill(Infinity);\\n\\treachable[0] = 0;\\n\\tfor (let i = 0; i < array.length; i++) {\\n\\t\\tlet num = array[i];\\n\\t\\tfor (let j = 1; j <= num; j++) {\\n\\t\\t\\tif (i + j === array.length) break;\\n\\t\\t\\treachable[i + j] = Math.min(reachable[i + j], reachable[i] + 1);\\n\\t\\t}\\n\\t}\\n\\treturn reachable;\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {number}\\n */\\nfunction totalWaysToSum(n) {\\n\\tconst table = [1];\\n\\ttable.length = n + 1;\\n\\ttable.fill(0, 1);\\n\\tfor (let i = 1; i < n; i++) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\n/**\\n *\\n * @param {[number, number[]]} data\\n * @returns {number}\\n */\\nfunction totalWaysToSumII(data) {\\n\\tconst [n, digits] = data;\\n\\tconst table = [1];\\n\\ttable.length = n + 1;\\n\\ttable.fill(0, 1);\\n\\tfor (const i of digits) {\\n\\t\\tfor (let j = i; j <= n; j++) {\\n\\t\\t\\ttable[j] += table[j - i];\\n\\t\\t}\\n\\t}\\n\\treturn table[n];\\n}\\n\\n/**\\n *\\n * @param {[string, number]} data\\n * @returns {string[]}\\n */\\nfunction validMathExpressions(data) {\\n\\tconst [digits, target] = data;\\n\\n\\tconst result = [];\\n\\tif (digits == null || digits.length === 0) return result;\\n\\trecursiveExpression(result, '', digits, target, 0, 0, 0);\\n\\n\\treturn result;\\n}\\n\\n/**\\n *\\n * @param {string[]} res\\n * @param {string} path\\n * @param {string} digits\\n * @param {number} target\\n * @param {number} pos\\n * @param {number} evaluated\\n * @param {number} multed\\n */\\nfunction recursiveExpression(res, path, digits, target, pos, evaluated, multed) {\\n\\tif (pos === digits.length) {\\n\\t\\tif (target === evaluated) res.push(path);\\n\\t\\treturn;\\n\\t}\\n\\tfor (let i = pos; i < digits.length; i++) {\\n\\t\\tif (i !== pos && digits[pos] === '0') break;\\n\\t\\tconst cur = parseInt(digits.substring(pos, i + 1));\\n\\t\\tif (pos === 0) recursiveExpression(res, path + cur, digits, target, i + 1, cur, cur);\\n\\t\\telse {\\n\\t\\t\\trecursiveExpression(res, path + '+' + cur, digits, target, i + 1, evaluated + cur, cur);\\n\\t\\t\\trecursiveExpression(res, path + '-' + cur, digits, target, i + 1, evaluated - cur, -cur);\\n\\t\\t\\trecursiveExpression(res, path + '*' + cur, digits, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {string} data\\n * @returns {string[]}\\n */\\nfunction sanitizeParentheses(data) {\\n\\tconst valid = new Set('');\\n\\tlet min = data.length;\\n\\tfor (let i = 0; i < 2 ** data.length; i++) {\\n\\t\\tlet j = i.toString(2);\\n\\t\\twhile (j.length < data.length) {\\n\\t\\t\\tj = '0' + j;\\n\\t\\t}\\n\\n\\t\\tlet str = '';\\n\\t\\tlet deletions = 0;\\n\\t\\tfor (let k = 0; k < j.length; k++) {\\n\\t\\t\\tif (j[k] === '1' || (data[k] !== '(' && data[k] !== ')')) str += data[k];\\n\\t\\t\\telse deletions++;\\n\\t\\t}\\n\\t\\tif (deletions > min) continue;\\n\\n\\t\\tlet count = 0;\\n\\t\\tlet neg = false;\\n\\t\\tfor (let k of str) {\\n\\t\\t\\tif (k === '(') count++;\\n\\t\\t\\telse if (k === ')') count--;\\n\\t\\t\\tif (count < 0) neg = true;\\n\\t\\t}\\n\\t\\tif (count > 0 || neg) continue;\\n\\n\\t\\tif (deletions === min) valid.add(str);\\n\\t\\telse if (deletions < min) {\\n\\t\\t\\tmin = deletions;\\n\\t\\t\\tvalid.clear();\\n\\t\\t\\tvalid.add(str);\\n\\t\\t}\\n\\t}\\n\\treturn [...valid];\\n}\\n\\n/**\\n *\\n * @param {number} n\\n * @returns {string}\\n */\\nfunction hammingEncode(n) {\\n\\tconst array = Array.from(n.toString(2));\\n\\tconst encodedArray = [];\\n\\tlet i = 0;\\n\\twhile (array.length > 0) {\\n\\t\\tif ((i & (i - 1)) !== 0) encodedArray[i] = array.shift();\\n\\t\\ti++;\\n\\t}\\n\\tconst p = Math.ceil(Math.log2(encodedArray.length));\\n\\tfor (i = 0; i < p; i++) encodedArray[2 ** i] = (encodedArray.filter((b, k) => b === '1' &&\\n\\t\\t(k.toString(2).padStart(p, '0'))[p - i - 1] === '1').length % 2).toString();\\n\\tencodedArray[0] = (encodedArray.filter(b => b === '1').length % 2).toString();\\n\\treturn encodedArray.join('');\\n}\\n\\n/**\\n *\\n * @param {string} bitstring\\n * @returns {string}\\n */\\nfunction hammingDecode(bitstring) {\\n\\tconst array = Array.from(bitstring);\\n\\tconst error = array.reduce((a, b, i) => b === '1' ? a ^ i : a, 0);\\n\\tif (error) array[error] = array[error] === '1' ? '0' : '1';\\n\\tconst decodedArray = [];\\n\\tfor (const [i, b] of array.entries()) {\\n\\t\\tif ((i & (i - 1)) === 0) continue;\\n\\t\\tdecodedArray.push(b);\\n\\t}\\n\\treturn parseInt(decodedArray.join(''), 2).toString();\\n}\\n\\n/**\\n *\\n * @param {array} data\\n * @returns {number[]}\\n */\\nfunction twoColoring(data) {\\n\\t// Set up array to hold colors\\n\\tconst coloring = Array(data[0]).fill(undefined);\\n\\t// Keep looping on undefined vertices if graph is disconnected\\n\\twhile (coloring.some(e => e === undefined)) {\\n\\t\\t// Color a vertex in the graph\\n\\t\\tconst initialVertex = coloring.findIndex(e => e === undefined);\\n\\t\\tcoloring[initialVertex] = 0;\\n\\t\\tconst frontier = [initialVertex];\\n\\t\\t// Propagate the coloring throughout the component containing v greedily\\n\\t\\twhile (frontier.length > 0) {\\n\\t\\t\\tconst v = frontier.pop();\\n\\t\\t\\tfor (const u of neighbourhood(data, v)) {\\n\\t\\t\\t\\tif (coloring[u] === undefined) {\\n\\t\\t\\t\\t\\tcoloring[u] = coloring[v] ^ 1; // Set the color of u to the opposite of the color of v\\n\\t\\t\\t\\t\\tfrontier.push(u); // Check u next\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Assert that u and v do not have the same color if they are already colored\\n\\t\\t\\t\\telse if (coloring[u] === coloring[v]) return '[]';\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn coloring;\\n}\\n\\n/**\\n *\\n * @param {array} data\\n * @param {number} vertex\\n * @returns {number[]}\\n */\\nfunction neighbourhood(data, vertex) {\\n\\tconst adjLeft = data[1].filter(([a, _]) => a === vertex).map(([_, b]) => b);\\n\\tconst adjRight = data[1].filter(([_, b]) => b === vertex).map(([a, _]) => a);\\n\\treturn adjLeft.concat(adjRight);\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string}\\n */\\nfunction runLengthEncoding(str) {\\n\\tconst encoding = [];\\n\\tlet count, previous, i;\\n\\tfor (count = 1, previous = str[0], i = 1; i < str.length; i++) {\\n\\t\\tif (str[i] !== previous || count === 9) {\\n\\t\\t\\tencoding.push(count, previous);\\n\\t\\t\\tcount = 1;\\n\\t\\t\\tprevious = str[i];\\n\\t\\t} else count++;\\n\\t}\\n\\tencoding.push(count, previous);\\n\\treturn encoding.join('');\\n}\\n\\n/**\\n *\\n * @param {string} str\\n * @returns {string}\\n */\\nfunction decompressLZ(str) {\\n\\tlet decoded = '', type = 0, len, ref, pos, i = 0, j;\\n\\twhile (i < str.length) {\\n\\t\\tif (i > 0) type ^= 1;\\n\\t\\tlen = parseInt(str[i]);\\n\\t\\tref = parseInt(str[++i]);\\n\\t\\tif (len === 0) continue;\\n\\t\\tif (!isNaN(ref) && type === 1) {\\n\\t\\t\\ti++;\\n\\t\\t\\tfor (j = 0; j < len; j++) decoded += decoded[decoded.length - ref];\\n\\t\\t} else {\\n\\t\\t\\tpos = i;\\n\\t\\t\\tfor (; i < len + pos; i++) decoded += str[i];\\n\\t\\t}\\n\\t}\\n\\treturn decoded;\\n}\\n\\n/**\\n *\\n * @param {str} str\\n * @returns {string}\\n */\\nfunction compressLZ(str) {\\n\\t// state [i][j] contains a backreference of offset i and length j\\n\\tlet cur_state = Array.from(Array(10), _ => Array(10)), new_state, tmp_state, result;\\n\\tcur_state[0][1] = ''; // initial state is a literal of length 1\\n\\tfor (let i = 1; i < str.length; i++) {\\n\\t\\tnew_state = Array.from(Array(10), _ => Array(10));\\n\\t\\tconst c = str[i];\\n\\t\\t// handle literals\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tconst input = cur_state[0][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tif (len < 9) set(new_state, 0, len + 1, input); // extend current literal\\n\\t\\t\\telse set(new_state, 0, 1, input + '9' + str.substring(i - 9, i) + '0'); // start new literal\\n\\t\\t\\tfor (let offset = 1; offset <= Math.min(9, i); offset++) { // start new backreference\\n\\t\\t\\t\\tif (str[i - offset] === c) set(new_state, offset, 1, input + len + str.substring(i - len, i));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// handle backreferences\\n\\t\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\t\\tconst input = cur_state[offset][len];\\n\\t\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\t\\tif (str[i - offset] === c) {\\n\\t\\t\\t\\t\\tif (len < 9) set(new_state, offset, len + 1, input); // extend current backreference\\n\\t\\t\\t\\t\\telse set(new_state, offset, 1, input + '9' + offset + '0'); // start new backreference\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tset(new_state, 0, 1, input + len + offset); // start new literal\\n\\t\\t\\t\\t// end current backreference and start new backreference\\n\\t\\t\\t\\tfor (let new_offset = 1; new_offset <= Math.min(9, i); new_offset++) {\\n\\t\\t\\t\\t\\tif (str[i - new_offset] === c) set(new_state, new_offset, 1, input + len + offset + '0');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp_state = new_state;\\n\\t\\tnew_state = cur_state;\\n\\t\\tcur_state = tmp_state;\\n\\t}\\n\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\tlet input = cur_state[0][len];\\n\\t\\tif (input === undefined) continue;\\n\\t\\tinput += len + str.substring(str.length - len, str.length);\\n\\t\\t// noinspection JSUnusedAssignment\\n\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t}\\n\\tfor (let offset = 1; offset <= 9; offset++) {\\n\\t\\tfor (let len = 1; len <= 9; len++) {\\n\\t\\t\\tlet input = cur_state[offset][len];\\n\\t\\t\\tif (input === undefined) continue;\\n\\t\\t\\tinput += len + '' + offset;\\n\\t\\t\\tif (result === undefined || input.length < result.length) result = input;\\n\\t\\t}\\n\\t}\\n\\treturn result ?? '';\\n}\\n\\n/**\\n *\\n * @param {string[][]} state\\n * @param {number} i\\n * @param {number} j\\n * @param {string} str\\n */\\nfunction set(state, i, j, str) {\\n\\tif (state[i][j] === undefined || str.length < state[i][j].length) state[i][j] = str;\\n}\\n\\n/**\\n *\\n * @param {[string, number]} data\\n * @returns {string}\\n */\\nfunction caesar(data) {\\n\\tconst [str, k] = data;\\n\\tlet result = '';\\n\\tfor (let i = 0; i < str.length; i++) {\\n\\t\\tconst charCode = str.charCodeAt(i);\\n\\t\\tif (charCode === 32) result += ' ';\\n\\t\\telse result += String.fromCharCode((charCode - 65 + (26 - k)) % 26 + 65);\\n\\t}\\n\\treturn result;\\n}\\n\\n/**\\n *\\n * @param {[string, string]} data\\n * @returns {string}\\n */\\nfunction vigenere(data) {\\n\\tconst [str, key] = data;\\n\\tlet result = '';\\n\\tfor (let i = 0; i < str.length; i++) {\\n\\t\\tconst charCode = str.charCodeAt(i) - 65;\\n\\t\\tconst keyCode = key.charCodeAt(i % key.length) - 65;\\n\\t\\tresult += String.fromCharCode((charCode + keyCode) % 26 + 65);\\n\\t}\\n\\treturn result;\\n}\",\"filename\":\"contracts/contractor.js\",\"server\":\"home\"}}],[\"contracts/enable-contractor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait modifyFile(ns, getPortNumbers().general, {contractor: true});\\n}\",\"filename\":\"contracts/enable-contractor.js\",\"server\":\"home\"}}],[\"contracts/disable-contractor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait modifyFile(ns, getPortNumbers().general, {contractor: false});\\n}\",\"filename\":\"contracts/disable-contractor.js\",\"server\":\"home\"}}],[\"corporation/autopilot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires WarehouseAPI and OfficeAPI\\nimport {formatMoney, getCities} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst unlocked = ns.singularity.getOwnedSourceFiles().some(s => s.n === 3 && s.lvl === 3);\\n\\tif (!unlocked && !ns.corporation.hasUnlockUpgrade('Warehouse API')) throw new Error(`This script requires the Warehouse API`);\\n\\tif (!unlocked && !ns.corporation.hasUnlockUpgrade('Office API')) throw new Error(`This script requires the Office API`);\\n\\t// Set up\\n\\tconst cities = getCities();\\n\\tconst jobs = getJobs();\\n\\tconst division1 = 'Agriculture';\\n\\tconst division2 = 'Tobacco';\\n\\t// Part 1\\n\\tawait part1(ns, cities, jobs, division1);\\n\\t// Part 2\\n\\tawait part2(ns, cities, jobs, division1);\\n\\t// Part 3\\n\\tawait part3(ns, cities, jobs, division2);\\n\\t// Autopilot\\n\\tawait autopilot(ns, cities, jobs, division2);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nexport async function part1(ns, cities, jobs, division) {\\n\\tconst corp = ns.corporation;\\n\\t// Expand to Agriculture division\\n\\tawait expandIndustry(ns, 'Agriculture', division);\\n\\t// Unlock Smart Supply\\n\\tawait unlockUpgrade(ns, 'Smart Supply');\\n\\t// Turn on Smart Supply\\n\\tcorp.setSmartSupply(division, 'Sector-12', true);\\n\\t// Expand\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\t// upgrade office to 3 and assign jobs\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 1},\\n\\t\\t\\t{job: jobs.engineer, num: 1},\\n\\t\\t\\t{job: jobs.business, num: 1}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 3, positions);\\n\\t\\t// Start selling material\\n\\t\\tcorp.sellMaterial(division, city, 'Food', 'MAX', 'MP');\\n\\t\\tcorp.sellMaterial(division, city, 'Plants', 'MAX', 'MP');\\n\\t}\\n\\t// Upgrade warehouse upto level 2\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 2);\\n\\t}\\n\\t// Hire advert\\n\\tawait hireAdVertUpto(ns, division, 1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string }division\\n * @returns {Promise<void>}\\n */\\nexport async function part2(ns, cities, jobs, division) {\\n\\t// Get upgrades\\n\\tlet upgrades = [\\n\\t\\t{name: 'FocusWires', level: 2},\\n\\t\\t{name: 'Neural Accelerators', level: 2},\\n\\t\\t{name: 'Speech Processor Implants', level: 2},\\n\\t\\t{name: 'Nuoptimal Nootropic Injector Implants', level: 2},\\n\\t\\t{name: 'Smart Factories', level: 2}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 125},\\n\\t\\t\\t{name: 'AI Cores', qty: 75},\\n\\t\\t\\t{name: 'Real Estate', qty: 27e3}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $210b for the first round\\n\\tawait investmentOffer(ns, 210e9, 1);\\n\\t// Upgrade office size to nine\\n\\tfor (let city of cities) {\\n\\t\\tconst positions = [\\n\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t];\\n\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t}\\n\\t// Upgrade factories and storage\\n\\tupgrades = [\\n\\t\\t{name: 'Smart Factories', level: 10},\\n\\t\\t{name: 'Smart Storage', level: 10}\\n\\t];\\n\\tawait upgradeUpto(ns, upgrades);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 9);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 2800},\\n\\t\\t\\t{name: 'Robots', qty: 96},\\n\\t\\t\\t{name: 'AI Cores', qty: 2520},\\n\\t\\t\\t{name: 'Real Estate', qty: 146400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n\\t// Wait for investment offer of $5t for the second round\\n\\tawait investmentOffer(ns, 5e12, 2);\\n\\t// Upgrade warehouses\\n\\tfor (let city of cities) {\\n\\t\\tawait upgradeWarehouseUpto(ns, division, city, 19);\\n\\t}\\n\\t// Boost production\\n\\tfor (let city of cities) {\\n\\t\\tconst materials = [\\n\\t\\t\\t{name: 'Hardware', qty: 9300},\\n\\t\\t\\t{name: 'Robots', qty: 726},\\n\\t\\t\\t{name: 'AI Cores', qty: 6270},\\n\\t\\t\\t{name: 'Real Estate', qty: 230400}\\n\\t\\t];\\n\\t\\tawait buyMaterialsUpto(ns, division, city, materials);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function part3(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\t// Expand into Tobacco industry\\n\\tawait expandIndustry(ns, 'Tobacco', division);\\n\\tfor (let city of cities) {\\n\\t\\t// Expand to city\\n\\t\\tawait expandCity(ns, division, city);\\n\\t\\t// Purchase warehouse\\n\\t\\tawait purchaseWarehouse(ns, division, city);\\n\\t\\tif (city === mainCity) {\\n\\t\\t\\t// Upgrade Office size to 60\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 6},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 6},\\n\\t\\t\\t\\t{job: jobs.business, num: 6},\\n\\t\\t\\t\\t{job: jobs.management, num: 6},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 6}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 30, positions);\\n\\t\\t} else {\\n\\t\\t\\t// Upgrade Office size to nine\\n\\t\\t\\tconst positions = [\\n\\t\\t\\t\\t{job: jobs.operations, num: 2},\\n\\t\\t\\t\\t{job: jobs.engineer, num: 2},\\n\\t\\t\\t\\t{job: jobs.business, num: 1},\\n\\t\\t\\t\\t{job: jobs.management, num: 2},\\n\\t\\t\\t\\t{job: jobs.RAndD, num: 2}\\n\\t\\t\\t];\\n\\t\\t\\tawait upgradeOffice(ns, division, city, 9, positions);\\n\\t\\t}\\n\\t}\\n\\t// Start making Tobacco v1\\n\\tif (getLatestVersion(ns, division) === 0) await makeProduct(ns, division, mainCity, 'Tobacco v1', 1e9, 1e9);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} cities\\n * @param {Object<string>} jobs\\n * @param {string} division\\n * @param {string} mainCity\\n * @returns {Promise<void>}\\n */\\nexport async function autopilot(ns, cities, jobs, division, mainCity = 'Aevum') {\\n\\tconst corp = ns.corporation;\\n\\tconst upgrades = getResearch();\\n\\tconst minResearch = 50e3;\\n\\tlet maxProducts = 3;\\n\\tif (corp.hasResearched(division, upgrades.capacity1)) maxProducts++;\\n\\tif (corp.hasResearched(division, upgrades.capacity2)) maxProducts++;\\n\\t// Get latest version\\n\\tlet version = getLatestVersion(ns, division);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tif (corp.getProduct(division, 'Tobacco v' + version).developmentProgress >= 100) {\\n\\t\\t\\t// Start selling the developed version\\n\\t\\t\\tcorp.sellProduct(division, mainCity, 'Tobacco v' + version, 'MAX', 'MP*' + (2 ** (version - 1)), true);\\n\\t\\t\\t// Set Market TA II if researched\\n\\t\\t\\tif (corp.hasResearched(division, upgrades.market2)) corp.setProductMarketTA2(division, 'Tobacco v' + version, true);\\n\\t\\t\\t// Discontinue earliest version\\n\\t\\t\\tif (corp.getDivision(division).products.length === maxProducts) corp.discontinueProduct(division, 'Tobacco v' + getEarliestVersion(ns, division));\\n\\t\\t\\t// Start making new version\\n\\t\\t\\tawait makeProduct(ns, division, mainCity, 'Tobacco v' + (version + 1), 1e9 * 2 ** version, 1e9 * 2 ** version);\\n\\t\\t\\t// Update current version\\n\\t\\t\\tversion++;\\n\\t\\t}\\n\\t\\t// Use hashes to boost research\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Exchange for Corporation Research') &&\\n\\t\\t\\tcorp.getDivision(division).research < 3 * minResearch) ns.hacknet.spendHashes('Exchange for Corporation Research');\\n\\t\\t// Check research progress for lab\\n\\t\\tif (!corp.hasResearched(division, upgrades.lab) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.lab) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.lab);\\n\\t\\t}\\n\\t\\t// Check research progress for Market TAs\\n\\t\\tlet researchCost = 0;\\n\\t\\tif (!corp.hasResearched(division, upgrades.market1)) researchCost += corp.getResearchCost(division, upgrades.market1);\\n\\t\\tif (!corp.hasResearched(division, upgrades.market2)) researchCost += corp.getResearchCost(division, upgrades.market2);\\n\\t\\tif (corp.hasResearched(division, upgrades.lab) && researchCost > 0 &&\\n\\t\\t\\tcorp.getDivision(division).research - researchCost >= minResearch) {\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market1)) corp.research(division, upgrades.market1);\\n\\t\\t\\tif (!corp.hasResearched(division, upgrades.market2)) {\\n\\t\\t\\t\\tcorp.research(division, upgrades.market2);\\n\\t\\t\\t\\t// Set Market TA II on for the current selling versions\\n\\t\\t\\t\\tfor (const product of corp.getDivision(division).products) corp.setProductMarketTA2(division, product, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Check research progress for Fulcrum\\n\\t\\tif (corp.hasResearched(division, upgrades.market2) && !corp.hasResearched(division, upgrades.fulcrum) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.fulcrum) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.fulcrum);\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity I\\n\\t\\tif (corp.hasResearched(division, upgrades.fulcrum) && !corp.hasResearched(division, upgrades.capacity1) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity1) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity1);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Check research progress for Capacity II\\n\\t\\tif (corp.hasResearched(division, upgrades.capacity1) && !corp.hasResearched(division, upgrades.capacity2) &&\\n\\t\\t\\tcorp.getDivision(division).research - corp.getResearchCost(division, upgrades.capacity2) >= minResearch) {\\n\\t\\t\\tcorp.research(division, upgrades.capacity2);\\n\\t\\t\\tmaxProducts++;\\n\\t\\t}\\n\\t\\t// Check what is cheaper\\n\\t\\tif (corp.getOfficeSizeUpgradeCost(division, mainCity, 15) < corp.getHireAdVertCost(division)) {\\n\\t\\t\\t// Upgrade office size in Aevum\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getOfficeSizeUpgradeCost(division, mainCity, 15)) {\\n\\t\\t\\t\\tcorp.upgradeOfficeSize(division, mainCity, 15);\\n\\t\\t\\t\\thireMaxEmployees(ns, division, mainCity);\\n\\t\\t\\t\\t// Assign jobs\\n\\t\\t\\t\\tconst dist = Math.floor(corp.getOffice(division, mainCity).size / Object.keys(jobs).length);\\n\\t\\t\\t\\tfor (let job of Object.values(jobs)) {\\n\\t\\t\\t\\t\\tawait corp.setAutoJobAssignment(division, mainCity, job, dist);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Hire advert\\n\\t\\telse if (corp.getCorporation().funds >= corp.getHireAdVertCost(division)) corp.hireAdVert(division);\\n\\t\\t// Level upgrades\\n\\t\\tlevelUpgrades(ns, 0.1);\\n\\t\\t// Go public\\n\\t\\tif (corp.getCorporation().revenue >= 1e18) corp.goPublic(0);\\n\\t\\t// If public\\n\\t\\tif (corp.getCorporation().public) {\\n\\t\\t\\t// Sell a small amount of shares when they amount to more cash than we have on hand\\n\\t\\t\\tif (corp.getCorporation().shareSaleCooldown <= 0 &&\\n\\t\\t\\t\\tcorp.getCorporation().sharePrice * 1e6 > ns.getPlayer().money) corp.sellShares(1e6);\\n\\t\\t\\t// Buyback shares when we can\\n\\t\\t\\telse if (corp.getCorporation().issuedShares > 0 &&\\n\\t\\t\\t\\tns.getPlayer().money > 2 * corp.getCorporation().issuedShares * corp.getCorporation().sharePrice)\\n\\t\\t\\t\\tcorp.buyBackShares(corp.getCorporation().issuedShares);\\n\\t\\t\\t// Check if we can unlock Shady Accounting\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Shady Accounting') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Shady Accounting')) corp.unlockUpgrade('Shady Accounting');\\n\\t\\t\\t// Check if we can unlock Government Partnership\\n\\t\\t\\tif (corp.getCorporation().funds >= corp.getUnlockUpgradeCost('Government Partnership') &&\\n\\t\\t\\t\\t!corp.hasUnlockUpgrade('Government Partnership')) corp.unlockUpgrade('Government Partnership');\\n\\t\\t\\t// Issue dividends\\n\\t\\t\\tcorp.issueDividends(dividendsPercentage(ns));\\n\\t\\t}\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to level the cheapest upgrade if under a certain percentage of the corp funds\\n *\\n * @param {NS} ns\\n * @param {number} percent\\n */\\nfunction levelUpgrades(ns, percent) {\\n\\tconst corp = ns.corporation;\\n\\tlet cheapestCost = Infinity;\\n\\tlet cheapestUpgrade;\\n\\tfor (const upgrade of getUpgrades()) {\\n\\t\\tconst cost = corp.getUpgradeLevelCost(upgrade);\\n\\t\\tif (cost < cheapestCost) {\\n\\t\\t\\tcheapestUpgrade = upgrade;\\n\\t\\t\\tcheapestCost = cost;\\n\\t\\t}\\n\\t}\\n\\tif (percent * corp.getCorporation().funds >= cheapestCost) corp.levelUpgrade(cheapestUpgrade);\\n}\\n\\n/**\\n * Function to return a list of upgrades\\n *\\n * @return {string[]}\\n */\\nfunction getUpgrades() {\\n\\treturn [\\n\\t\\t'Smart Factories',\\n\\t\\t'Smart Storage',\\n\\t\\t'DreamSense',\\n\\t\\t'Wilson Analytics',\\n\\t\\t'Nuoptimal Nootropic Injector Implants',\\n\\t\\t'Speech Processor Implants',\\n\\t\\t'Neural Accelerators',\\n\\t\\t'FocusWires',\\n\\t\\t'ABC SalesBots',\\n\\t\\t'Project Insight'\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number}\\n */\\nfunction dividendsPercentage(ns) {\\n\\treturn Math.max(0, Math.min(0.99, Math.log(ns.corporation.getCorporation().revenue) / (20 * Math.log(1000))));\\n}\\n\\n/**\\n *\\n * @returns {Object<string>} Jobs\\n */\\nfunction getJobs() {\\n\\treturn {\\n\\t\\toperations: 'Operations',\\n\\t\\tengineer: 'Engineer',\\n\\t\\tbusiness: 'Business',\\n\\t\\tmanagement: 'Management',\\n\\t\\tRAndD: 'Research & Development'\\n\\t};\\n}\\n\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {function} func\\n * @param {*[]} args\\n * @returns {Promise<void>}\\n */\\nasync function moneyFor(ns, func, ...args) {\\n\\twhile (func(...args) > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to wait for enough money\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @returns {Promise<void>}\\n */\\nasync function moneyForAmount(ns, amount) {\\n\\twhile (amount > ns.corporation.getCorporation().funds) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * Function to hire employees up to office size\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n */\\nfunction hireMaxEmployees(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tns.print(`Hiring employees for ${division} (${city})`);\\n\\twhile (corp.getOffice(division, city).employees.length < corp.getOffice(division, city).size) {\\n\\t\\tcorp.hireEmployee(division, city);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade list of upgrades upto a certain level\\n *\\n * @param {NS} ns\\n * @param {Object<string, number>[]} upgrades\\n * @returns {Promise<void>}\\n */\\nasync function upgradeUpto(ns, upgrades) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let upgrade of upgrades) {\\n\\t\\twhile (corp.getUpgradeLevel(upgrade.name) < upgrade.level) {\\n\\t\\t\\tawait moneyFor(ns, corp.getUpgradeLevelCost, upgrade.name);\\n\\t\\t\\tcorp.levelUpgrade(upgrade.name);\\n\\t\\t\\tns.print(`Upgraded ${upgrade.name} to level ${corp.getUpgradeLevel(upgrade.name)}`);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Function to buy materials upto a certain quantity\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {Object<string, number>[]} materials\\n * @returns {Promise<void>}\\n */\\nasync function buyMaterialsUpto(ns, division, city, materials) {\\n\\tconst corp = ns.corporation;\\n\\tfor (let material of materials) {\\n\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\tif (curQty < material.qty) {\\n\\t\\t\\tns.print(`Buying ${material.name} for ${division} (${city})`);\\n\\t\\t\\tcorp.buyMaterial(division, city, material.name, (material.qty - curQty) / 10);\\n\\t\\t}\\n\\t}\\n\\twhile (true) {\\n\\t\\tlet breakOut = true;\\n\\t\\tfor (let material of materials) {\\n\\t\\t\\tconst curQty = corp.getMaterial(division, city, material.name).qty;\\n\\t\\t\\tif (curQty >= material.qty) corp.buyMaterial(division, city, material.name, 0);\\n\\t\\t\\telse breakOut = false;\\n\\t\\t}\\n\\t\\tif (breakOut) break;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade warehouse up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nasync function upgradeWarehouseUpto(ns, division, city, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getWarehouse(division, city).level < level) {\\n\\t\\tawait moneyFor(ns, corp.getUpgradeWarehouseCost, division, city);\\n\\t\\tcorp.upgradeWarehouse(division, city);\\n\\t\\tns.print(`Upgraded warehouse in ${division} (${city}) to level ${corp.getWarehouse(division, city).level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to hire AdVert up to certain level\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {number} level\\n * @returns {Promise<void>}\\n */\\nasync function hireAdVertUpto(ns, division, level) {\\n\\tconst corp = ns.corporation;\\n\\twhile (corp.getHireAdVertCount(division) < level) {\\n\\t\\tawait moneyFor(ns, corp.getHireAdVertCost, division);\\n\\t\\tcorp.hireAdVert(division);\\n\\t\\tns.print(`Hired AdVert in ${division} to level ${level}`);\\n\\t}\\n}\\n\\n/**\\n * Function to upgrade an office, hire maximum number of employees and assign them jobs\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {number} size\\n * @param {Object<string, number>[]} positions\\n * @returns {Promise<void>}\\n */\\nasync function upgradeOffice(ns, division, city, size, positions) {\\n\\tconst corp = ns.corporation;\\n\\tconst upgradeSize = size - corp.getOffice(division, city).size;\\n\\tif (upgradeSize > 0) {\\n\\t\\tns.print(`Upgrading office in ${division} (${city}) to ${size}`);\\n\\t\\tawait moneyFor(ns, corp.getOfficeSizeUpgradeCost, division, city, upgradeSize);\\n\\t\\tcorp.upgradeOfficeSize(division, city, upgradeSize);\\n\\t}\\n\\thireMaxEmployees(ns, division, city);\\n\\tconst allPositions = getPositions(ns, division, city);\\n\\tfor (let position of positions) {\\n\\t\\tif (allPositions[position.job] !== position.num) await corp.setAutoJobAssignment(division, city, position.job, position.num);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param division\\n * @param city\\n * @returns {Object<string, number>[]}\\n */\\nfunction getPositions(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tconst positions = {};\\n\\tconst employeeNames = corp.getOffice(division, city).employees;\\n\\tfor (let employeeName of employeeNames) {\\n\\t\\tconst employeePos = corp.getEmployee(division, city, employeeName).pos;\\n\\t\\tpositions[employeePos] = (positions[employeePos] || 0) + 1;\\n\\t}\\n\\treturn positions;\\n}\\n\\n/**\\n * Function to wait for an investment offer of a certain amount\\n *\\n * @param {NS} ns\\n * @param {number} amount\\n * @param {number} round\\n * @returns {Promise<void>}\\n */\\nasync function investmentOffer(ns, amount, round = 5) {\\n\\tconst corp = ns.corporation;\\n\\tif (corp.getInvestmentOffer().round > round) return;\\n\\tns.print(`Waiting for investment offer of ${formatMoney(ns, amount)}`);\\n\\t// Wait for investment\\n\\twhile (corp.getInvestmentOffer().funds < amount) {\\n\\t\\tif (corp.getInvestmentOffer().round > round) {\\n\\t\\t\\tns.print(`Already accepted investment offer at round ${corp.getInvestmentOffer().round}, ` +\\n\\t\\t\\t\\t`or it was manually accepted now.`);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tamount -= corp.getCorporation().revenue; // Take revenue into account\\n\\t\\t// Pump in corp funds if we have hashes\\n\\t\\tif (ns.hacknet.numHashes() >= ns.hacknet.hashCost('Sell for Corporation Funds')) {\\n\\t\\t\\tns.hacknet.spendHashes('Sell for Corporation Funds');\\n\\t\\t\\tamount -= 1e9;\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.print(`Accepted investment offer of ${formatMoney(ns, corp.getInvestmentOffer().funds)}`);\\n\\tcorp.acceptInvestmentOffer();\\n}\\n\\n/**\\n * Function to start making a product\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @param {string} name\\n * @param {number} design\\n * @param {number} marketing\\n * @returns {Promise<void>}\\n */\\nasync function makeProduct(ns, division, city, name, design = 0, marketing = 0) {\\n\\tconst corp = ns.corporation;\\n\\tconst products = corp.getDivision(division).products;\\n\\tconst proposedVersion = parseVersion(name);\\n\\tlet currentBestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > currentBestVersion) currentBestVersion = version;\\n\\t}\\n\\tif (proposedVersion > currentBestVersion) {\\n\\t\\tawait moneyForAmount(ns, design + marketing);\\n\\t\\tcorp.makeProduct(division, city, name, design, marketing);\\n\\t\\tns.print(`Started to make ${name} in ${division} (${city}) with ${formatMoney(ns, design)} for design and ${formatMoney(ns, marketing)} for marketing`);\\n\\t} else ns.print(`Already making/made ${name} in ${division} (${city})`);\\n}\\n\\n/**\\n * Function to get latest product version\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @return {number}\\n */\\nfunction getLatestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet latestVersion = 0;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version > latestVersion) latestVersion = version;\\n\\t}\\n\\treturn latestVersion;\\n}\\n\\n/**\\n * Function to get earliest product version\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @returns {number}\\n */\\nfunction getEarliestVersion(ns, division) {\\n\\tconst products = ns.corporation.getDivision(division).products;\\n\\tlet earliestVersion = Number.MAX_SAFE_INTEGER;\\n\\tfor (let product of products) {\\n\\t\\tlet version = parseVersion(product);\\n\\t\\tif (version < earliestVersion) earliestVersion = version;\\n\\t}\\n\\treturn earliestVersion;\\n}\\n\\n/**\\n * Function to parse product version from name\\n *\\n * @param {string} name\\n * @returns {number}\\n */\\nfunction parseVersion(name) {\\n\\tlet version = '';\\n\\tfor (let i = 1; i <= name.length; i++) {\\n\\t\\tlet slice = name.slice(-i);\\n\\t\\tif (!isNaN(slice)) version = slice;\\n\\t\\telse if (version === '') throw new Error(`Product name must end with version number`);\\n\\t\\telse return parseInt(version);\\n\\t}\\n}\\n\\n/**\\n * Function to expand industry\\n *\\n * @param {NS} ns\\n * @param {string} industry\\n * @param {string} division\\n * @returns {Promise<void>}\\n */\\nasync function expandIndustry(ns, industry, division) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getCorporation().divisions.some(d => d.type === industry || d.name === division)) {\\n\\t\\tns.print(`Expanding to ${industry} industry: ${division}`);\\n\\t\\tawait moneyFor(ns, corp.getExpandIndustryCost, industry);\\n\\t\\tcorp.expandIndustry(industry, division);\\n\\t} else ns.print(`Already expanded to ${industry} industry: ${division}`);\\n}\\n\\n\\n/**\\n * Function to expand city\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nasync function expandCity(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.getDivision(division).cities.includes(city)) {\\n\\t\\tawait moneyFor(ns, corp.getExpandCityCost);\\n\\t\\tcorp.expandCity(division, city);\\n\\t\\tns.print(`Expanded to ${city} for ${division}`);\\n\\t} else ns.print(`Already expanded to ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to purchase warehouse\\n *\\n * @param {NS} ns\\n * @param {string} division\\n * @param {string} city\\n * @returns {Promise<void>}\\n */\\nasync function purchaseWarehouse(ns, division, city) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasWarehouse(division, city)) {\\n\\t\\tawait moneyFor(ns, corp.getPurchaseWarehouseCost);\\n\\t\\tcorp.purchaseWarehouse(division, city);\\n\\t\\tns.print(`Purchased warehouse in ${division} (${city})`);\\n\\t} else ns.print(`Already purchased warehouse in ${city} for ${division}`);\\n}\\n\\n/**\\n * Function to unlock upgrade\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @returns {Promise<void>}\\n */\\nasync function unlockUpgrade(ns, upgrade) {\\n\\tconst corp = ns.corporation;\\n\\tif (!corp.hasUnlockUpgrade(upgrade)) {\\n\\t\\tawait moneyFor(ns, corp.getUnlockUpgradeCost, upgrade);\\n\\t\\tcorp.unlockUpgrade(upgrade);\\n\\t\\tns.print(`Purchased ${upgrade}`);\\n\\t} else ns.print(`Already purchased ${upgrade}`);\\n}\\n\\n/**\\n * Function to return important research\\n *\\n * @returns {Object<string>}\\n */\\nfunction getResearch() {\\n\\treturn {\\n\\t\\tlab: 'Hi-Tech R&D Laboratory',\\n\\t\\tmarket1: 'Market-TA.I',\\n\\t\\tmarket2: 'Market-TA.II',\\n\\t\\tfulcrum: 'uPgrade: Fulcrum',\\n\\t\\tcapacity1: 'uPgrade: Capacity.I',\\n\\t\\tcapacity2: 'uPgrade: Capacity.II'\\n\\t};\\n}\",\"filename\":\"corporation/autopilot.js\",\"server\":\"home\"}}],[\"crime/automate.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getCrimes} from '/utils.js';\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\treturn [...getCrimes()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst crime = ns.args[0] ?? 'homicide';\\n\\tns.singularity.commitCrime(crime, ns.singularity.isFocused());\\n}\",\"filename\":\"crime/automate.js\",\"server\":\"home\"}}],[\"daemons/charge.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.stanek.chargeFragment(ns.args[0], ns.args[1]);\\n}\",\"filename\":\"daemons/charge.js\",\"server\":\"home\"}}],[\"daemons/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, readFromFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tconst data = readFromFile(ns, getPortNumbers().stock).long;\\n\\tconst stock = data.includes(target);\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.grow(target, {stock: stock});\\n}\",\"filename\":\"daemons/grow.js\",\"server\":\"home\"}}],[\"daemons/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, readFromFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tconst data = readFromFile(ns, getPortNumbers().stock).short;\\n\\tconst stock = data.includes(target);\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.hack(target, {stock: stock});\\n}\",\"filename\":\"daemons/hack.js\",\"server\":\"home\"}}],[\"daemons/share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait ns.share();\\n}\",\"filename\":\"daemons/share.js\",\"server\":\"home\"}}],[\"daemons/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst [target, delay] = ns.args;\\n\\tif (delay) await ns.sleep(delay);\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"daemons/weaken.js\",\"server\":\"home\"}}],[\"exploits/bypass.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\teval('ns.bypass(document)');\\n}\",\"filename\":\"exploits/bypass.js\",\"server\":\"home\"}}],[\"exploits/dev-menu.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toDevMenu();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"exploits/dev-menu.js\",\"server\":\"home\"}}],[\"exploits/edit-save-file.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSDeprecatedSymbols,JSUnresolvedFunction\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet saveStr = decodeURIComponent(escape(atob(await load())));\\n\\n\\tsaveStr = saveStr.replace('\\\\\\\\\\\"exploits\\\\\\\\\\\":[', '\\\\\\\\\\\"exploits\\\\\\\\\\\":[\\\\\\\\\\\"EditSaveFile\\\\\\\\\\\",');\\n\\n\\tsaveStr = btoa(unescape(encodeURIComponent(saveStr)));\\n\\tawait save(saveStr);\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction getDB() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tconst win = eval('window');\\n\\t\\tif (!win.indexedDB) reject(`Indexed DB does not exists`);\\n\\t\\tconst indexedDbRequest = win.indexedDB.open('bitburnerSave', 1);\\n\\t\\tindexedDbRequest.onupgradeneeded = () => indexedDbRequest.result.createObjectStore('savestring');\\n\\t\\tindexedDbRequest.onerror = ev => reject(`Failed to get IDB ${ev}`);\\n\\t\\tindexedDbRequest.onsuccess = () => {\\n\\t\\t\\tconst db = indexedDbRequest.result;\\n\\t\\t\\tif (!db) {\\n\\t\\t\\t\\treject(`database loading result was undefined`);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tresolve(db.transaction(['savestring'], 'readwrite').objectStore('savestring'));\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @returns {Promise<string>}\\n */\\nfunction load() {\\n\\treturn new Promise((resolve, reject) => {\\n\\t\\tgetDB().then(db => {\\n\\t\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\t\\tconst request = db.get('save');\\n\\t\\t\\t\\trequest.onerror = ev => reject(`Error in Database request to get savestring: ${ev}`);\\n\\t\\t\\t\\trequest.onsuccess = () => resolve(request.result);\\n\\t\\t\\t}).then(saveString => resolve(saveString));\\n\\t\\t}).catch(r => reject(r));\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {string} saveString\\n * @returns {Promise<string>}\\n */\\nfunction save(saveString) {\\n\\treturn getDB().then((db) => {\\n\\t\\treturn new Promise((resolve, reject) => {\\n\\t\\t\\tconst request = db.put(saveString, 'save');\\n\\t\\t\\trequest.onerror = e => reject(`Error saving game to IndexedDB: ${e}`);\\n\\t\\t\\trequest.onsuccess = () => resolve();\\n\\t\\t});\\n\\t});\\n}\",\"filename\":\"exploits/edit-save-file.js\",\"server\":\"home\"}}],[\"exploits/n00dles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tlet boxes = Array.from(eval('document').querySelectorAll('[class*=MuiBox-root]'));\\n\\tlet box = boxes.find(x => hasPlayer(x));\\n\\n\\tif (box) {\\n\\t\\tlet props = getProps(box);\\n\\t\\tprops.router.toLocation({name: 'Noodle Bar', types: [4]});\\n\\t\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Eat noodles').click();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {Object}\\n */\\nfunction getProps(obj) {\\n\\treturn Object.entries(obj).find(entry => entry[0].startsWith('__reactProps'))[1].children.props;\\n}\\n\\n/**\\n *\\n * @param {Object} obj\\n * @returns {boolean}\\n */\\nfunction hasPlayer(obj) {\\n\\ttry {\\n\\t\\treturn !!getProps(obj).router;\\n\\t} catch (err) {\\n\\t\\treturn false;\\n\\t}\\n}\",\"filename\":\"exploits/n00dles.js\",\"server\":\"home\"}}],[\"exploits/prototype-tampering.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tNumber.prototype.toExponential = () => null;\\n}\",\"filename\":\"exploits/prototype-tampering.js\",\"server\":\"home\"}}],[\"exploits/rainbow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// Download password list and check it\\n\\tconst link = 'https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-10000.txt';\\n\\tconst list = download(ns, link);\\n\\tawait check(list);\\n\\t// or brute force your way\\n\\t// brute(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @returns {Promise<void>}\\n */\\nasync function check(ns, list) {\\n\\tfor (const s of list) {\\n\\t\\tns.rainbow(s);\\n\\t\\tawait ns.asleep(1);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} link\\n * @returns {Promise<string[]>}\\n */\\nasync function download(ns, link) {\\n\\tlet lines, done;\\n\\tconst req = new XMLHttpRequest();\\n\\treq.onreadystatechange = function () {\\n\\t\\tif (req.readyState === 4 && req.status === 200) {\\n\\t\\t\\tns.print(`Processing successful response...`);\\n\\t\\t\\tconst text = req.responseText;\\n\\t\\t\\tlines = text.split('\\\\n');\\n\\t\\t} else if (req.readyState === 4) ns.print(`Request failed with status ${req.status}`);\\n\\t\\telse ns.print(`State: ${req.readyState}`);\\n\\t\\tdone = req.readyState === 4;\\n\\t};\\n\\treq.open('GET', link);\\n\\treq.send();\\n\\twhile (!done) {\\n\\t\\tawait ns.asleep(5000);\\n\\t}\\n\\treturn lines;\\n}\\n\\n// noinspection JSUnusedLocalSymbols\\n/**\\n *\\n * @param {NS} ns\\n * @param {boolean} lowercase\\n * @param {boolean} uppercase\\n * @param {boolean} numbers\\n * @param {number} length\\n * @returns {Promise<void>}\\n */\\nasync function brute(ns, lowercase = true, uppercase = false, numbers = false, length = 8) {\\n\\tconst list = [];\\n\\tif (lowercase) for (let i = 'a'.charCodeAt(); i <= 'z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (uppercase) for (let i = 'A'.charCodeAt(); i <= 'Z'.charCodeAt(); i++) list.push(String.fromCharCode(i));\\n\\tif (numbers) for (let i = 0; i <= 9; i++) list.push(String(i));\\n\\tawait force(ns, list, ns.rainbow, length);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string[]} list\\n * @param {function} func\\n * @param {number} limit\\n * @param {number} k\\n * @param {string} prepend\\n * @param {boolean} callBig\\n * @returns {Promise<void>}\\n */\\nasync function force(ns, list, func, limit, k = 1, prepend = '', callBig = true) {\\n\\tif (k <= 0 || k > limit) return;\\n\\tif (k === 1) for (let s of list) if (func(prepend + s)) return;\\n\\tfor (let i = 0; i < list.length; i++) await force(ns, list, func, limit - 1, k - 1, prepend + list[i], false);\\n\\tif (callBig) await force(ns, list, func, limit, k + 1);\\n\\tawait ns.asleep(1);\\n}\\n\\n\",\"filename\":\"exploits/rainbow.js\",\"server\":\"home\"}}],[\"exploits/time-compression.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst win = eval('window');\\n\\twin.performance.now = () => 0;\\n}\",\"filename\":\"exploits/time-compression.js\",\"server\":\"home\"}}],[\"exploits/unclickable.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @returns {Promise<void>}\\n */\\nexport async function main() {\\n\\tconst doc = eval('document');\\n\\tdoc.getElementById('unclickable').style = 'display: block; position: absolute; top: 50%; left: 50%; width: 100px; height: 100px; z-index: 10000; background: red;';\\n\\tdoc.getElementById('unclickable').parentNode.addEventListener('click', () => {\\n\\t\\tdoc.getElementById('unclickable').style = 'display: none; visibility: hidden;';\\n\\t}, true);\\n}\",\"filename\":\"exploits/unclickable.js\",\"server\":\"home\"}}],[\"exploits/undocumented-function-call.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\t// noinspection JSUnresolvedFunction\\n\\tns.exploit();\\n}\",\"filename\":\"exploits/undocumented-function-call.js\",\"server\":\"home\"}}],[\"factions/join-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let faction of ns.args) {\\n\\t\\tif (await ns.prompt(`Join ${faction}?`)) ns.singularity.joinFaction(faction);\\n\\t}\\n}\",\"filename\":\"factions/join-factions.js\",\"server\":\"home\"}}],[\"factions/share.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {copyScriptsToAll, findPlaceToRun, getAccessibleServers, getFreeRams, getScripts} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst script = getScripts().share;\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRams(ns, servers);\\n\\t\\tfindPlaceToRun(ns, script, threads, freeRams, i++);\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"factions/share.js\",\"server\":\"home\"}}],[\"factions/work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFactionWorktypes} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tlet factions = ns.getPlayer().factions.filter(f => f !== 'Church of the Machine God' && f !== 'Bladeburner');\\n\\t\\tif (ns.gang.inGang()) factions = factions.filter(f => ns.gang.getGangInformation().faction !== f);\\n\\t\\tconst faction = await ns.prompt(`Work for faction?`, {type: 'select', choices: ['None', ...factions]});\\n\\t\\tif (faction === 'None') break;\\n\\t\\tconst worktype = await ns.prompt(`Type of Work?`, {type: 'select', choices: getFactionWorktypes(faction)});\\n\\t\\tconst rep = Number(await ns.prompt(`Work until how much reputation? (Leave empty to work indefinitely)`, {type: 'text'}));\\n\\t\\tif (!rep) {\\n\\t\\t\\tns.singularity.workForFaction(faction, worktype, ns.singularity.isFocused());\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\twhile (ns.singularity.getFactionRep(faction) < rep) {\\n\\t\\t\\tns.singularity.workForFaction(faction, worktype, ns.singularity.isFocused());\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"factions/work.js\",\"server\":\"home\"}}],[\"gang/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['disable-equipment-buying', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst disableEquipmentBuying = options['disable-equipment-buying'];\\n\\tif (!ns.gang.inGang()) {\\n\\t\\tns.tprint(`You need to join a gang first`);\\n\\t\\treturn;\\n\\t}\\n\\tlet counter = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\t// Check for recruits\\n\\t\\tcounter = recruitGangMembers(ns, counter);\\n\\t\\t// Get gang info\\n\\t\\tconst gangRoster = Array.from(ns.gang.getMemberNames(), name => ns.gang.getMemberInformation(name));\\n\\t\\t//Update Log\\n\\t\\tns.clearLog();\\n\\t\\tns.print(`Gang: ${getGangName(ns)}`);\\n\\t\\tns.print(`Gang Warfare: ${ns.gang.getGangInformation().territoryWarfareEngaged}`);\\n\\t\\tfor (const gangMember of gangRoster) ns.print(`${gangMember.name} - ${gangMember.task}`);\\n\\t\\t// Check for ascensions\\n\\t\\tascendMembers(ns, gangRoster);\\n\\t\\t// Check for equipment purchases\\n\\t\\tif (!disableEquipmentBuying) purchaseEquipment(ns, gangRoster);\\n\\t\\t// Assign tasks\\n\\t\\tassignTasks(ns, gangRoster);\\n\\t\\t// Check for territory warfare\\n\\t\\tns.gang.setTerritoryWarfare(territoryWarfare(ns));\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction getData(ns) {\\n\\tif (ns.gang.getGangInformation().isHacking) return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: true,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'hackerman-',\\n\\t\\ttraining: 'Train Hacking',\\n\\t\\treduceWantedLevel: 'Ethical Hacking',\\n\\t\\tterrorize: 'Cyberterrorism',\\n\\t\\tmoney: 'Money Laundering',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'hack',\\n\\t\\tasc_attribute: 'hack_asc_mult',\\n\\t\\tclash: false\\n\\t};\\n\\telse return {\\n\\t\\tgangName: getGangName(ns),\\n\\t\\tisHacking: false,\\n\\t\\tlevel: 500,\\n\\t\\tname: 'gangsta-',\\n\\t\\ttraining: 'Train Combat',\\n\\t\\treduceWantedLevel: 'Vigilante Justice',\\n\\t\\tterrorize: 'Terrorism',\\n\\t\\tmoney: 'Human Trafficking',\\n\\t\\tterritoryWarfare: 'Territory Warfare',\\n\\t\\tattribute: 'str',\\n\\t\\tasc_attribute: 'str_asc_mult',\\n\\t\\tclash: true\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string}\\n */\\nexport function getGangName(ns) {\\n\\treturn ns.gang.getGangInformation().faction;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getOtherGangs(ns) {\\n\\treturn Object.entries(ns.gang.getOtherGangInformation()).filter(([faction]) =>\\n\\t\\tfaction !== getGangName(ns));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} counter\\n */\\nexport function recruitGangMembers(ns, counter) {\\n\\tconst data = getData(ns);\\n\\tif (ns.gang.canRecruitMember()) {\\n\\t\\tconst name = data.name + counter;\\n\\t\\tns.gang.recruitMember(name);\\n\\t\\tns.gang.setMemberTask(name, data.training);\\n\\t\\tcounter++;\\n\\t}\\n\\treturn counter;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function ascendMembers(ns, gangRoster) {\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (!ns.gang.getAscensionResult(gangMember.name)) continue;\\n\\t\\tconst ascensionThreshold = calculateAscensionThreshold(gangMember[getData(ns).asc_attribute]);\\n\\t\\tif (ns.gang.getAscensionResult(gangMember.name)[getData(ns).attribute] >= ascensionThreshold)\\n\\t\\t\\tns.gang.ascendMember(gangMember.name);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {number} asc_mult\\n * @returns {number}\\n */\\nfunction calculateAscensionThreshold(asc_mult) {\\n\\treturn Math.max(1.6 + (1 - asc_mult) / 58, 1.1);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function purchaseEquipment(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tconst orderedEquipment = data.isHacking ? getHackingEquipment(ns) : getCombatEquipment(ns);\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) continue;\\n\\t\\tfor (const equipment of orderedEquipment) {\\n\\t\\t\\tif (!gangMember.upgrades.includes(equipment) && !gangMember.augmentations.includes(equipment) &&\\n\\t\\t\\t\\t!ns.gang.purchaseEquipment(gangMember.name, equipment)) break;\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getHackingEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst hackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...hackEquipment, ...chaEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {string[]}\\n */\\nfunction getCombatEquipment(ns) {\\n\\tconst allEquipment = ns.gang.getEquipmentNames();\\n\\tconst strAndDefEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).str || ns.gang.getEquipmentStats(equipment).def).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst dexAndAgiEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).dex || ns.gang.getEquipmentStats(equipment).agi).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\tconst chaAndHackEquipment = allEquipment.filter(equipment => ns.gang.getEquipmentStats(equipment).cha || ns.gang.getEquipmentStats(equipment).hack).sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\n\\treturn [...new Set([...strAndDefEquipment, ...dexAndAgiEquipment, ...chaAndHackEquipment])];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {GangMemberInfo[]} gangRoster\\n */\\nexport function assignTasks(ns, gangRoster) {\\n\\tconst data = getData(ns);\\n\\tlet warfareCounter = 0;\\n\\tfor (const gangMember of gangRoster) {\\n\\t\\tif (gangMember[data.attribute] < data.level) ns.gang.setMemberTask(gangMember.name, data.training);\\n\\t\\telse if (ns.gang.getGangInformation().wantedPenalty < 0.5) ns.gang.setMemberTask(gangMember.name, data.reduceWantedLevel);\\n\\t\\telse if (gangRoster.length < 12) ns.gang.setMemberTask(gangMember.name, data.terrorize);\\n\\t\\telse if (data.clash && clashChance(ns).some(s => s < 0.8) &&\\n\\t\\t\\tns.gang.getGangInformation().territory < 1 && warfareCounter < 6) {\\n\\t\\t\\tns.gang.setMemberTask(gangMember.name, data.territoryWarfare);\\n\\t\\t\\twarfareCounter++;\\n\\t\\t} else ns.gang.setMemberTask(gangMember.name, data.money);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {number[]}\\n */\\nfunction clashChance(ns) {\\n\\treturn Array.from(getOtherGangs(ns), ([faction]) => ns.gang.getChanceToWinClash(faction));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nexport function territoryWarfare(ns) {\\n\\treturn (Number(Math.round(Number(ns.gang.getGangInformation().territory + 'e' + 10)) + 'e' + 10 * -1) < 1 &&\\n\\t\\tfightForTerritory(ns, getOtherGangs(ns)));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {boolean}\\n */\\nfunction fightForTerritory(ns) {\\n\\tlet averageWinChance = 0;\\n\\tfor (const [faction, info] of getOtherGangs(ns)) averageWinChance += info.territory * ns.gang.getChanceToWinClash(faction);\\n\\treturn averageWinChance / (1 - ns.gang.getGangInformation().territory) >= 0.7;\\n}\",\"filename\":\"gang/manager.js\",\"server\":\"home\"}}],[\"hacking/backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {hackServer, routeFinder} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route && hackServer(ns, server)) {\\n\\t\\tfor (let serv of route) {\\n\\t\\t\\tns.singularity.connect(serv);\\n\\t\\t}\\n\\t\\tawait ns.singularity.installBackdoor();\\n\\t\\tfor (let serv of route.reverse()) {\\n\\t\\t\\tns.singularity.connect(serv);\\n\\t\\t}\\n\\t}\\n}\\n\\n// noinspection JSUnusedGlobalSymbols\\n/**\\n *\\n * @param {*} data\\n * @returns {string[]}\\n */\\nexport function autocomplete(data) {\\n\\t// noinspection JSUnresolvedVariable\\n\\treturn data.servers;\\n}\",\"filename\":\"hacking/backdoor.js\",\"server\":\"home\"}}],[\"hacking/batcher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tfindPlaceToRun,\\n\\tformatPercentage,\\n\\tformatRam,\\n\\tformatTime,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetFreeRams,\\n\\tgetScripts,\\n\\tprintBoth\\n} from '/utils.js';\\n// TODO: collision detection\\n// TODO: no waiting between groups of cycles\\n// TODO: optimise priming\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst data = packageData(ns);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst sec = ns.getServerSecurityLevel(data.target);\\n\\t\\tconst money = ns.getServerMoneyAvailable(data.target);\\n\\t\\tif (money < data.maxMoney || sec > data.minSec) {\\n\\t\\t\\tns.print(`Priming ${data.target} in ${formatTime(ns, ns.getWeakenTime(data.target))}`);\\n\\t\\t\\tconst primed = await primeTarget(ns, sec, money, data);\\n\\t\\t\\tif (primed) ns.print(`${data.target} is primed`);\\n\\t\\t\\telse continue;\\n\\t\\t}\\n\\t\\tconst info = getInfo(ns, data);\\n\\t\\tif (info === 'EXIT') return;\\n\\t\\telse if (info === 'REPEAT') continue;\\n\\t\\tawait hackTarget(ns, info, data);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} info\\n * @param {Object} data\\n * @returns {Promise<void>}\\n */\\nasync function hackTarget(ns, info, data) {\\n\\tlet c = 0;\\n\\twhile (c < info.cycleCount) {\\n\\t\\tif (info.cycleRAM < info.freeRam) {\\n\\t\\t\\tns.print(`Running cycle ${c}`);\\n\\t\\t\\tif (info.hackThreads > 0) ns.exec(data.scripts.hack, data.host, info.hackThreads, data.target, info.hackDelay, c);\\n\\t\\t\\tif (info.hWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.hWeakenThreads, data.target, info.hWeakenDelay, c);\\n\\t\\t\\tif (info.growThreads > 0) ns.exec(data.scripts.grow, data.host, info.growThreads, data.target, info.growDelay, c);\\n\\t\\t\\tif (info.gWeakenThreads > 0) ns.exec(data.scripts.weaken, data.host, info.gWeakenThreads, data.target, info.gWeakenDelay, c);\\n\\t\\t\\tc++;\\n\\t\\t}\\n\\t\\tawait ns.sleep(info.cycleDelay);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sec\\n * @param {number} money\\n * @param {Object} data\\n * @returns {Promise<boolean>}\\n */\\nasync function primeTarget(ns, sec, money, data) {\\n\\tconst growth = data.maxMoney / money;\\n\\tconst growThreads = Math.ceil(ns.growthAnalyze(data.target, Math.max(growth !== Infinity ? growth : 10, 1), data.cores));\\n\\tconst weakenThreads = Math.ceil((sec - data.minSec + growThreads * data.growSec) / data.weakenSec);\\n\\n\\tconst growTime = ns.getGrowTime(data.target);\\n\\tconst weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tlet grown = growThreads === 0;\\n\\tlet weakened = weakenThreads === 0;\\n\\n\\tconst freeRam = getFreeRam(ns, data.host);\\n\\tconst primeRam = data.growScriptRam * growThreads + data.weakenScriptRam * weakenThreads;\\n\\n\\tif (primeRam > freeRam) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to prime ${data.target}`);\\n\\t\\tns.print(`Priming RAM: ${formatRam(ns, primeRam)}, available RAM: ${formatRam(ns, freeRam)}`);\\n\\t\\tns.print(`Finding other hosts to prime ${data.target}`);\\n\\t\\t// Check for RAM to grow server\\n\\t\\tlet servers = getAccessibleServers(ns);\\n\\t\\tlet freeRams = getFreeRams(ns, servers);\\n\\t\\tlet growFound = true;\\n\\t\\tif (!grown && growThreads > 0) growFound = findPlaceToRun(ns, data.scripts.grow, growThreads, freeRams, data.target);\\n\\t\\tif (growFound) grown = true;\\n\\t\\t// Check for RAM to weaken server\\n\\t\\tservers = getAccessibleServers(ns);\\n\\t\\tfreeRams = getFreeRams(ns, servers);\\n\\t\\tlet weakenFound = true;\\n\\t\\tif (!weakened && weakenThreads > 0) weakenFound = findPlaceToRun(ns, data.scripts.weaken, weakenThreads, freeRams, data.target);\\n\\t\\tif (weakenFound) weakened = true;\\n\\t\\t// Wait until the scripts finish\\n\\t\\tawait ns.sleep(Math.max(growTime, weakenTime) + 1000);\\n\\t} else {\\n\\t\\tif (!grown) {\\n\\t\\t\\tns.exec(data.scripts.grow, data.host, growThreads, data.target);\\n\\t\\t\\tgrown = true;\\n\\t\\t}\\n\\t\\tif (!weakened) {\\n\\t\\t\\tns.exec(data.scripts.weaken, data.host, weakenThreads, data.target);\\n\\t\\t\\tweakened = true;\\n\\t\\t}\\n\\t\\tawait ns.sleep(Math.max(growTime, weakenTime) + 1000);\\n\\t}\\n\\treturn grown && weakened;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} data\\n * @returns {Object}\\n */\\nfunction getInfo(ns, data) {\\n\\tconst hackTime = ns.getHackTime(data.target);\\n\\tconst growTime = ns.getGrowTime(data.target);\\n\\tconst weakenTime = ns.getWeakenTime(data.target);\\n\\n\\tconst hackThreads = Math.floor(ns.hackAnalyzeThreads(data.target, data.drainPercent * data.maxMoney)); // Number of threads to hack 50% of the max money\\n\\tconst hWeakenThreads = Math.ceil(hackThreads * data.hackSec / data.weakenSec); // Number of threads to weaken after hack\\n\\tconst growThreads = Math.ceil(ns.growthAnalyze(data.target, data.increasePercent, data.cores)); // Number of threads to grow back to max money\\n\\tconst gWeakenThreads = Math.ceil(growThreads * data.growSec / data.weakenSec); // Number of threads to weaken after grow\\n\\n\\tconst freeRam = getFreeRam(ns, data.host);\\n\\tlet cycleRAM = data.hackScriptRam * hackThreads + data.growScriptRam * growThreads + data.weakenScriptRam * (hWeakenThreads + gWeakenThreads); // Calculating how much RAM is used for a single run\\n\\tlet cycleCount = Math.floor(freeRam / cycleRAM);\\n\\tlet cycleDelay = weakenTime / cycleCount;\\n\\n\\tif (cycleDelay < data.cycleDelayThresh) {\\n\\t\\tcycleRAM = (data.cycleDelayThresh / cycleDelay) * cycleRAM;\\n\\t\\tcycleDelay = data.cycleDelayThresh;\\n\\t\\tcycleCount = Math.floor(freeRam / cycleRAM);\\n\\t}\\n\\tif (cycleRAM > freeRam) {\\n\\t\\tns.print(`Not enough RAM on ${data.host} to hack ${data.target}`);\\n\\t\\tns.print(`Cycle RAM: ${cycleRAM}. available RAM: ${freeRam}`);\\n\\t\\tdata.drainPercent *= freeRam / cycleRAM;\\n\\t\\tns.print(`Reducing drain percent to ${formatPercentage(data.drainPercent)}`);\\n\\t\\tif (data.drainPercent < 0.001) {\\n\\t\\t\\tprintBoth(ns, `Drain percent too low. Exiting daemon on ${data.host} targeting ${data.target}...`);\\n\\t\\t\\treturn 'EXIT';\\n\\t\\t}\\n\\t\\treturn 'REPEAT';\\n\\t}\\n\\tns.print(`Running ${cycleCount} cycles in ${formatTime(ns, cycleCount * cycleDelay / 1000)}`);\\n\\n\\tconst hackOffset = -0.25 * cycleDelay;\\n\\tconst hWeakenOffset = 0;\\n\\tconst growOffset = 0.25 * cycleDelay;\\n\\tconst gWeakenOffset = 0.5 * cycleDelay;\\n\\n\\tconst hackDelay = weakenTime - hackTime + hackOffset;\\n\\tconst hWeakenDelay = hWeakenOffset;\\n\\tconst growDelay = weakenTime - growTime + growOffset;\\n\\tconst gWeakenDelay = gWeakenOffset;\\n\\n\\treturn {\\n\\t\\thackThreads,\\n\\t\\thWeakenThreads,\\n\\t\\tgrowThreads,\\n\\t\\tgWeakenThreads,\\n\\t\\tfreeRam,\\n\\t\\tcycleRAM,\\n\\t\\tcycleCount,\\n\\t\\tcycleDelay,\\n\\t\\thackDelay,\\n\\t\\thWeakenDelay,\\n\\t\\tgrowDelay,\\n\\t\\tgWeakenDelay\\n\\t};\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object}\\n */\\nfunction packageData(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst host = ns.getHostname();\\n\\tconst cores = ns.getServer(host).cpuCores;\\n\\n\\tconst cycleDelayThresh = 100;\\n\\tconst drainPercent = 0.5;\\n\\tconst increasePercent = 1 / (1 - drainPercent);\\n\\n\\tconst minSec = ns.getServerMinSecurityLevel(target);\\n\\tconst maxMoney = ns.getServerMaxMoney(target);\\n\\n\\tconst hackSec = ns.hackAnalyzeSecurity(1);\\n\\tconst growSec = ns.growthAnalyzeSecurity(1);\\n\\tconst weakenSec = ns.weakenAnalyze(1, cores);\\n\\n\\tconst scripts = getScripts();\\n\\tconst hackScriptRam = ns.getScriptRam(scripts.hack);\\n\\tconst growScriptRam = ns.getScriptRam(scripts.grow);\\n\\tconst weakenScriptRam = ns.getScriptRam(scripts.weaken);\\n\\n\\treturn {\\n\\t\\ttarget,\\n\\t\\thost,\\n\\t\\tcores,\\n\\t\\tcycleDelayThresh,\\n\\t\\tdrainPercent,\\n\\t\\tincreasePercent,\\n\\t\\tminSec,\\n\\t\\tmaxMoney,\\n\\t\\thackSec,\\n\\t\\tgrowSec,\\n\\t\\tweakenSec,\\n\\t\\tscripts,\\n\\t\\thackScriptRam,\\n\\t\\tgrowScriptRam,\\n\\t\\tweakenScriptRam\\n\\t};\\n}\",\"filename\":\"hacking/batcher.js\",\"server\":\"home\"}}],[\"hacknet/hash-spender.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nconst argsSchema = [\\n\\t['upgrade', 'Sell for Money'],\\n\\t['target', undefined],\\n\\t['liquidate', false],\\n\\t['continuous', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tif (!ns.getPlayer().bitNodeN === 9 && !ns.singularity.getOwnedSourceFiles().some(s => s.n === 9)) throw new Error(`Script requires Hacknet servers to be unlocked`);\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst upgrade = options.upgrade;\\n\\tconst target = options.target;\\n\\tconst liquidate = options.liquidate;\\n\\tconst continuous = options.continuous;\\n\\twhile (true) {\\n\\t\\tawait spendHashes(ns, upgrade, target, liquidate);\\n\\t\\tif (!continuous) break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} upgrade\\n * @param {string} target\\n * @param {boolean} liquidate\\n * @returns {Promise<void>}\\n */\\nexport async function spendHashes(ns, upgrade, target = undefined, liquidate = false) {\\n\\tconst hn = ns.hacknet;\\n\\tconst capacity = hn.hashCapacity();\\n\\tconst globalProduction = Array.from({length: hn.numNodes()}, (_, i) => hn.getNodeStats(i)).reduce((total, node) => total + node.production, 0);\\n\\twhile (hn.numHashes() > (liquidate ? hn.hashCost(upgrade) : capacity - 2 * globalProduction)) {\\n\\t\\ttarget ? hn.spendHashes(upgrade, target) : hn.spendHashes(upgrade);\\n\\t\\tawait ns.sleep(1);\\n\\t}\\n}\",\"filename\":\"hacknet/hash-spender.js\",\"server\":\"home\"}}],[\"hacknet/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires formulas\\nimport {formatMoney, formatNumber, formatTime, printBoth} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['max-spend', Infinity],\\n\\t['max-payoff-time', Infinity]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tlet maxSpend = options['max-spend'];\\n\\tconst maxPayoffTime = options['max-payoff-time'];\\n\\twhile (true) {\\n\\t\\tconst spend = upgradeHacknet(ns, maxSpend, maxPayoffTime);\\n\\t\\tif (typeof spend === 'string') {\\n\\t\\t\\tprintBoth(ns, spend);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tmaxSpend -= spend;\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n// Will buy the most effective hacknet upgrade, so long as it will pay for itself in maxPayoffTimeSeconds\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} maxSpend\\n * @param {number} maxPayoffTimeSeconds\\n * @returns {number|boolean}\\n */\\nexport function upgradeHacknet(ns, maxSpend = Infinity, maxPayoffTimeSeconds = 21600 /* 6 hours */) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers : ns.formulas.hacknetNodes;\\n\\tconst currentHacknetMult = ns.getPlayer().hacknet_node_money_mult;\\n\\t// Find the best upgrade we can make to an existing node\\n\\tconst upgrades = getUpgrades(ns);\\n\\tlet bestUpgradePayoff = 0;\\n\\tlet nodeToUpgrade;\\n\\tlet bestUpgrade;\\n\\tlet cost;\\n\\tlet upgradedValue;\\n\\tlet worstNodeProduction = Number.MAX_SAFE_INTEGER; // Used to hold how productive a newly purchased node might be\\n\\tfor (let i = 0; i < hn.numNodes(); i++) {\\n\\t\\tconst nodeStats = hn.getNodeStats(i);\\n\\t\\t// When a hacknet server runs scripts, nodeStats.production lags behind what it should be for current ram usage\\n\\t\\tif (haveHacknetServers) nodeStats.production = form.hashGainRate(nodeStats.level, 0, nodeStats.ram, nodeStats.cores, currentHacknetMult);\\n\\t\\tworstNodeProduction = Math.min(worstNodeProduction, nodeStats.production);\\n\\t\\t// Get next best upgrade\\n\\t\\tfor (let upgrade of upgrades) {\\n\\t\\t\\tconst currentUpgradeCost = upgrade.cost(i);\\n\\t\\t\\tconst payoff = upgrade.addedProduction(nodeStats) / currentUpgradeCost; // Production per money\\n\\t\\t\\tif (payoff > bestUpgradePayoff) {\\n\\t\\t\\t\\tbestUpgradePayoff = payoff;\\n\\t\\t\\t\\tnodeToUpgrade = i;\\n\\t\\t\\t\\tbestUpgrade = upgrade;\\n\\t\\t\\t\\tcost = currentUpgradeCost;\\n\\t\\t\\t\\tupgradedValue = upgrade.nextValue(nodeStats);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// Compare this to the cost of adding a new node\\n\\tlet newNodeCost;\\n\\tlet newNodePayoff;\\n\\tlet shouldBuyNewNode;\\n\\tif (hn.numNodes() < hn.maxNumNodes()) {\\n\\t\\tnewNodeCost = hn.getPurchaseNodeCost();\\n\\t\\tnewNodePayoff = worstNodeProduction / newNodeCost;\\n\\t\\tshouldBuyNewNode = newNodePayoff > bestUpgradePayoff;\\n\\t} else if (bestUpgradePayoff === 0) return false; // Cannot buy new node and payoff will be zero\\n\\t// If specified, only buy upgrades that will pay for themselves in payoffTimeSeconds\\n\\tconst value = haveHacknetServers ? 0.25e6 : 1; // 1 hash = 0.25m\\n\\tlet payoffTimeSeconds = 1 / (value * (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff));\\n\\tif (shouldBuyNewNode) cost = newNodeCost;\\n\\t// Prepare info about next purchase\\n\\tlet strPurchase = (shouldBuyNewNode ? `a new node \\\"hacknet-node-${hn.numNodes()}\\\"` :\\n\\t\\t`hacknet-node-${nodeToUpgrade} ${bestUpgrade.name} ${upgradedValue}`) + ` for ${formatMoney(ns, cost)}`;\\n\\tlet strPayoff = `production ${formatNumber(ns, (shouldBuyNewNode ? newNodePayoff : bestUpgradePayoff) * cost)}, payoff time: ${formatTime(ns, 1000 * payoffTimeSeconds)}`;\\n\\tif (cost > maxSpend) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the cost ${formatMoney(ns, cost)} exceeds the limit (${formatMoney(ns, maxSpend)})`);\\n\\t\\treturn 'Spending limit reached. Turning off Hacknet manager...'; // Overspending\\n\\t}\\n\\tif (payoffTimeSeconds > maxPayoffTimeSeconds) {\\n\\t\\tns.print(`The next best purchase would be ${strPurchase} but the ${strPayoff} is worse than the limit (${formatTime(ns, 1000 * maxPayoffTimeSeconds)})`);\\n\\t\\treturn 'Max payoff time reached. Turning off Hacknet manager...'; // Won't pay itself off\\n\\t}\\n\\tconst success = shouldBuyNewNode ? hn.purchaseNode() !== -1 : bestUpgrade.upgrade(nodeToUpgrade, 1);\\n\\tns.print(success ? `Purchased ${strPurchase} with ${strPayoff}` : `Insufficient funds to purchase the next best upgrade: ${strPurchase}`);\\n\\treturn success ? cost : 0;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<string, function, function, function, function>[]}\\n */\\nexport function getUpgrades(ns) {\\n\\tconst hn = ns.hacknet;\\n\\treturn [\\n\\t\\t{\\n\\t\\t\\tname: 'level',\\n\\t\\t\\tupgrade: hn.upgradeLevel,\\n\\t\\t\\tcost: i => hn.getLevelUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.level + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'level', nodeStats.level)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'ram',\\n\\t\\t\\tupgrade: hn.upgradeRam,\\n\\t\\t\\tcost: i => hn.getRamUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.ram * 2,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'ram', nodeStats.ram)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cores',\\n\\t\\t\\tupgrade: hn.upgradeCore,\\n\\t\\t\\tcost: i => hn.getCoreUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cores + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cores', nodeStats.cores)\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'cache',\\n\\t\\t\\tupgrade: hn.upgradeCache,\\n\\t\\t\\tcost: i => hn.getCacheUpgradeCost(i, 1),\\n\\t\\t\\tnextValue: nodeStats => nodeStats.cache + 1,\\n\\t\\t\\taddedProduction: nodeStats => nodeStats.production * productionMult(ns, 'cache', nodeStats.cache)\\n\\t\\t}\\n\\t];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} type\\n * @param {number} level\\n * @returns {number}\\n */\\nfunction productionMult(ns, type, level) {\\n\\tconst hn = ns.hacknet;\\n\\tconst haveHacknetServers = ns.getPlayer().bitNodeN === 9 || ns.singularity.getOwnedSourceFiles().some(s => s.n === 9);\\n\\tconst form = haveHacknetServers ? ns.formulas.hacknetServers.hashGainRate : ns.formulas.hacknetNodes.moneyGainRate;\\n\\tlet curLevel;\\n\\tlet nextLevel;\\n\\tswitch (type) {\\n\\t\\tcase 'level':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [level, 0, 1, 1] : [level, 1, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [level + 1, 0, 1, 1] : [level + 1, 1, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'ram':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, level, 1] : [1, level, 1];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, level * 2, 1] : [1, level * 2, 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cores':\\n\\t\\t\\tcurLevel = haveHacknetServers ? [1, 0, 1, level] : [1, 1, level];\\n\\t\\t\\tnextLevel = haveHacknetServers ? [1, 0, 1, level + 1] : [1, 1, level + 1];\\n\\t\\t\\tbreak;\\n\\t\\tcase 'cache': // Doesn't improve production, but we consider buying cache if hash is at percentageCutoff capacity\\n\\t\\t\\tconst percentageCutoff = 0.95;\\n\\t\\t\\tconst mult = 1 / (1 - percentageCutoff);\\n\\t\\t\\treturn mult * (hn.numHashes() / hn.hashCapacity() - percentageCutoff);\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid type encountered in Hacknet production multiplier`);\\n\\t}\\n\\treturn form(...nextLevel) / form(...curLevel) - 1;\\n}\",\"filename\":\"hacknet/manager.js\",\"server\":\"home\"}}],[\"player/create-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getUsefulPrograms} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (const program of getUsefulPrograms()) {\\n\\t\\twhile (!ns.fileExists(program, 'home')) {\\n\\t\\t\\tns.singularity.createProgram(program, ns.singularity.isFocused());\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tns.tprint(`${program} created`);\\n\\t}\\n}\",\"filename\":\"player/create-programs.js\",\"server\":\"home\"}}],[\"player/hacking-farm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {copyScriptsToAll, findPlaceToRun, getAccessibleServers, getFreeRams, getScripts} from 'utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tawait copyScriptsToAll(ns);\\n\\tconst threads = Number.MAX_SAFE_INTEGER;\\n\\tconst scripts = getScripts();\\n\\tconst target = 'joesguns';\\n\\tconst level = ns.getServerRequiredHackingLevel(target);\\n\\twhile (ns.getPlayer().skills.hacking < level) {\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tlet i = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst servers = getAccessibleServers(ns);\\n\\t\\tconst freeRams = getFreeRams(ns, servers);\\n\\t\\tfindPlaceToRun(ns, scripts.grow, threads, freeRams, target, 0, i);\\n\\t\\tfindPlaceToRun(ns, scripts.weaken, threads, freeRams, target, 0, i);\\n\\t\\ti++;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"player/hacking-farm.js\",\"server\":\"home\"}}],[\"player/gym.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getGymLocation} from 'utils.js';\\n\\nlet level;\\nlet gym;\\n\\nconst argsSchema = [\\n\\t['str', false],\\n\\t['def', false],\\n\\t['dex', false],\\n\\t['agi', false],\\n\\t['all', false],\\n\\t['level', 100],\\n\\t['gym', 'Powerhouse Gym']\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tlevel = options.level;\\n\\tgym = options.gym;\\n\\tif (!ns.singularity.travelToCity(getGymLocation(gym))) throw new Error(`Could not travel to correct location`);\\n\\tif (options.str || options.all) await workOutStr(ns);\\n\\tif (options.def || options.all) await workOutDef(ns);\\n\\tif (options.dex || options.all) await workOutDex(ns);\\n\\tif (options.agi || options.all) await workOutAgi(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutStr(ns) {\\n\\tns.singularity.gymWorkout(gym, 'str', ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().skills.strength < level) {\\n\\t\\tif (ns.singularity.getCurrentWork()?.classType !== 'GYMSTRENGTH') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutDef(ns) {\\n\\tns.singularity.gymWorkout(gym, 'def', ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().defense < level) {\\n\\t\\tif (ns.singularity.getCurrentWork()?.classType !== 'GYMDEFENSE') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutDex(ns) {\\n\\tns.singularity.gymWorkout(gym, 'dex', ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().dexterity < level) {\\n\\t\\tif (ns.singularity.getCurrentWork()?.classType !== 'GYMDEXTERITY') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function workOutAgi(ns) {\\n\\tns.singularity.gymWorkout(gym, 'agi', ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().skills.agility < level) {\\n\\t\\tif (ns.singularity.getCurrentWork()?.classType !== 'GYMAGILITY') break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\",\"filename\":\"player/gym.js\",\"server\":\"home\"}}],[\"player/intelligence-farm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatTime, getCities} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['trips-per-cycle', 1e4],\\n\\t['money-threshold', 1e12]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst tripsPerCycle = options['trips-per-cycle'];\\n\\tconst moneyThreshold = options['money-threshold'];\\n\\tns.print(`trips-per-cycle: ${tripsPerCycle}`);\\n\\tns.print(`money-threshold: ${formatMoney(ns, moneyThreshold)}`);\\n\\tconst cities = getCities();\\n\\tconst citiesLength = cities.length;\\n\\tlet justStarted = true;\\n\\tlet previousInt = ns.getPlayer().skills.intelligence;\\n\\tlet currentInt = previousInt;\\n\\tlet previousLevelTime = Date.now();\\n\\tlet levelupTime;\\n\\tlet cycles = 0;\\n\\tlet duration = 0;\\n\\tlet tripsPerLevel = 0;\\n\\tlet tripsPerMs = 0;\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\twhile (ns.getPlayer().money > moneyThreshold) {\\n\\t\\t\\tfor (let i = 0; i < tripsPerCycle; i++) cities.forEach(city => ns.singularity.travelToCity(city));\\n\\t\\t\\tawait ns.sleep(1);\\n\\t\\t\\tcycles++;\\n\\t\\t\\tif (previousInt !== ns.getPlayer().skills.intelligence) {\\n\\t\\t\\t\\tcurrentInt = ns.getPlayer().skills.intelligence;\\n\\t\\t\\t\\tlevelupTime = Date.now();\\n\\t\\t\\t\\tduration = levelupTime - previousLevelTime;\\n\\t\\t\\t\\ttripsPerLevel = cycles * tripsPerCycle * citiesLength;\\n\\t\\t\\t\\ttripsPerMs = Math.floor(tripsPerLevel / duration);\\n\\t\\t\\t\\tns.print(`Level Up: Int ${currentInt}` + (justStarted ? ` partial ` : ` full `) +\\n\\t\\t\\t\\t\\t`level in ${formatTime(ns, duration)} & ${formatMoney(ns, tripsPerLevel)} travels`);\\n\\t\\t\\t\\tns.print(`Approximately ${tripsPerMs} trips/ms`);\\n\\t\\t\\t\\tpreviousLevelTime = levelupTime;\\n\\t\\t\\t\\tpreviousInt = currentInt;\\n\\t\\t\\t\\tjustStarted = false;\\n\\t\\t\\t\\tcycles = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000);\\n\\t\\tns.print(`Below money threshold, waiting 10 seconds`);\\n\\t}\\n}\",\"filename\":\"player/intelligence-farm.js\",\"server\":\"home\"}}],[\"player/university.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedVariable\\n\\nimport {getUniversityLocation} from 'utils.js';\\n\\nlet level;\\nlet course;\\nlet university;\\n\\nconst argsSchema = [\\n\\t['university', 'ZB Institute of Technology'],\\n\\t['course', 'Leadership'],\\n\\t['level', 100]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tlevel = options.level;\\n\\tcourse = options.course;\\n\\tuniversity = options.university;\\n\\tns.singularity.travelToCity(getUniversityLocation(university));\\n\\tif (options.course === 'Computer Science' ||\\n\\t\\toptions.course === 'Data Structures' ||\\n\\t\\toptions.course === 'Networks' ||\\n\\t\\toptions.course === 'Algorithms') await studyHack(ns);\\n\\telse if (options.course === 'Management' ||\\n\\t\\toptions.course === 'Leadership') await studyCha(ns);\\n\\telse throw new Error(`Invalid course`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function studyHack(ns) {\\n\\tns.singularity.universityCourse(university, course, ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().skills.hacking < level) {\\n\\t\\tif (ns.singularity.getCurrentWork()?.classType !== options.course.replace(/\\\\s+/g, '')) break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nasync function studyCha(ns) {\\n\\tns.singularity.universityCourse(university, course, ns.singularity.isFocused());\\n\\twhile (ns.getPlayer().skills.charisma < level) {\\n\\t\\tif (ns.getPlayer().workType !== options.course.replace(/\\\\s+/g, '')) break;\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n\\tns.singularity.stopAction();\\n}\",\"filename\":\"player/university.js\",\"server\":\"home\"}}],[\"player/upgrade-home-cores.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.singularity.getUpgradeHomeCoresCost();\\n\\tif (await ns.prompt(`Upgrade home Cores for ${formatMoney(ns, cost)}?`)) {\\n\\t\\tif (ns.singularity.upgradeHomeCores()) ns.tprint(`Home cores upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home cores.`);\\n\\t}\\n}\",\"filename\":\"player/upgrade-home-cores.js\",\"server\":\"home\"}}],[\"player/upgrade-home-ram.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.singularity.getUpgradeHomeRamCost();\\n\\tif (await ns.prompt(`Upgrade home RAM for ${formatMoney(ns, cost)}?`)) {\\n\\t\\tif (ns.singularity.upgradeHomeRam()) ns.tprint(`Home RAM upgraded.`);\\n\\t\\telse ns.tprint(`Could not upgrade home RAM.`);\\n\\t}\\n}\",\"filename\":\"player/upgrade-home-ram.js\",\"server\":\"home\"}}],[\"sleeve/autopilot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n\\tisUseful,\\n\\tisUsefulCombat,\\n\\tisUsefulCompany,\\n\\tisUsefulCrime,\\n\\tisUsefulFaction,\\n\\tisUsefulHackingSkill\\n} from '/augmentations/utils.js';\\nimport {getPortNumbers, readFromFile} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['disable-augmentation-buying', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n// TODO: Add Bladeburner Actions\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst disableAugmentationBuying = options['disable-augmentation-buying'];\\n\\tconst works = ['SECURITY', 'FIELD', 'HACKING'];\\n\\tconst jobs = getJobs();\\n\\tconst numSleeves = ns.sleeve.getNumSleeves();\\n\\tconst usefulCombat = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulHacking = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulFaction = Array.from({length: numSleeves}, _ => false);\\n\\tconst usefulCompany = Array.from({length: numSleeves}, _ => false);\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\tconst data = readFromFile(ns, getPortNumbers().sleeve);\\n\\t\\tconst freeSleeves = Object.keys(data).filter(k => data[k]).map(k => Number(k));\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\t// Check for useful augmentations\\n\\t\\t\\tconst criteria = [isUsefulCrime];\\n\\t\\t\\tif (data[i].usefulCombat) criteria.push(isUsefulCombat);\\n\\t\\t\\tif (data[i].usefulHacking) criteria.push(isUsefulHackingSkill);\\n\\t\\t\\tif (data[i].usefulFaction) criteria.push(isUsefulFaction);\\n\\t\\t\\tif (data[i].usefulCompany) criteria.push(isUsefulCompany);\\n\\t\\t\\t// Check for augmentation purchases\\n\\t\\t\\tns.sleeve.getSleevePurchasableAugs(i).forEach(aug => {\\n\\t\\t\\t\\tif (!disableAugmentationBuying && isUseful(ns, criteria, aug.name) &&\\n\\t\\t\\t\\t\\tns.getPlayer().money >= aug.cost && ns.sleeve.getSleeveStats(i).shock === 0)\\n\\t\\t\\t\\t\\tns.sleeve.purchaseSleeveAug(i, aug.name);\\n\\t\\t\\t});\\n\\t\\t\\t// Assign tasks\\n\\t\\t\\tconst factionName = ns.singularity.getCurrentWork()?.factionName;\\n\\t\\t\\tconst companyName = ns.singularity.getCurrentWork()?.companyName;\\n\\t\\t\\t// Free sleeve copies player working for faction\\n\\t\\t\\tif (freeSleeves.includes(i) && ns.singularity.getCurrentWork()?.type === 'FACTION' &&\\n\\t\\t\\t\\t!sameSleeveWork(ns, factionName)) {\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i).type !== 'FACTION' ||\\n\\t\\t\\t\\t\\t!works.includes(ns.sleeve.getTask(i).factionWorkType)) {\\n\\t\\t\\t\\t\\tlet j = 0;\\n\\t\\t\\t\\t\\twhile (!ns.sleeve.setToFactionWork(i, factionName, works[j])) j++;\\n\\t\\t\\t\\t\\tfreeSleeves.splice(freeSleeves.findIndex(s => s === i), 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Free sleeve copies player working for company\\n\\t\\t\\telse if (freeSleeves.includes(i) && ns.singularity.getCurrentWork()?.type === 'COMPANY' &&\\n\\t\\t\\t\\t!sameSleeveWork(ns, companyName)) {\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i).type !== 'Company') {\\n\\t\\t\\t\\t\\tns.sleeve.setToCompanyWork(i, companyName);\\n\\t\\t\\t\\t\\tfreeSleeves.splice(freeSleeves.findIndex(s => s === i), 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// Crime\\n\\t\\t\\telse if (!sleeveDoingFactionWork(ns, i, factionName) && !sleeveDoingCompanyWork(ns, i, companyName)) {\\n\\t\\t\\t\\tif (data[i].autopilot && ns.sleeve.getTask(i)?.type !== 'CRIME') ns.sleeve.setToCommitCrime(i, 'Homicide');\\n\\t\\t\\t}\\n\\t\\t\\t// Make relevant augmentations purchasable for sleeves\\n\\t\\t\\tconst task = ns.sleeve.getTask(i);\\n\\t\\t\\tif (task?.type === 'FACTION') {\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${task.factionName}`);\\n\\t\\t\\t\\tusefulFaction[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'SECURITY' || task.factionWorkType === 'FIELD') usefulCombat[i] = true;\\n\\t\\t\\t\\tif (task.factionWorkType === 'HACKING' || task.factionWorkType === 'FIELD') usefulHacking[i] = true;\\n\\t\\t\\t} else if (task?.type === 'COMPANY') {\\n\\t\\t\\t\\tusefulCompany[i] = true;\\n\\t\\t\\t\\tns.print(`Sleeve ${i}: Working for ${task.companyName}`);\\n\\t\\t\\t\\tfor (const [company, job] of Object.entries(ns.getPlayer().jobs)) {\\n\\t\\t\\t\\t\\tif (company === ns.singularity.getCurrentWork().companyName) {\\n\\t\\t\\t\\t\\t\\tconst foundJob = Object.values(jobs).find(val => val.name === job);\\n\\t\\t\\t\\t\\t\\tif (foundJob.hacking) usefulHacking[i] = true;\\n\\t\\t\\t\\t\\t\\tif (foundJob.combat) usefulCombat[i] = true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (task?.type === 'CRIME') ns.print(`Sleeve ${i}: ${task.type}`);\\n\\t\\t\\telse if (task?.type === 'BLADEBURNER') ns.print(`Sleeve ${i}: ${task.type}`);\\n\\t\\t\\telse ns.print(`Sleeve ${i}: IDLE`);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} organization\\n * @return {boolean}\\n */\\nfunction sameSleeveWork(ns, organization) {\\n\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++)\\n\\t\\tif (ns.sleeve.getTask(i)?.factionName === organization || ns.sleeve.getTask(i)?.companyName === organization)\\n\\t\\t\\treturn true;\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n * @param {string} factionName\\n * @return {boolean}\\n */\\nfunction sleeveDoingFactionWork(ns, sleeveNumber, factionName) {\\n\\treturn !!(factionName && ns.sleeve.getTask(sleeveNumber)?.factionName === factionName);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n * @param {string} factionName\\n * @return {boolean}\\n */\\nfunction sleeveDoingCompanyWork(ns, sleeveNumber, companyName) {\\n\\treturn !!(companyName && ns.sleeve.getTask(sleeveNumber)?.companyName === companyName);\\n}\\n\\n/**\\n *\\n * @returns {Object<Object<string, boolean, boolean, boolean>[]>}\\n */\\nfunction getJobs() {\\n\\treturn {\\n\\t\\tagent: {\\n\\t\\t\\tname: 'Agent',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tbusiness: {\\n\\t\\t\\tname: 'Business',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tit: {\\n\\t\\t\\tname: 'IT',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsecurity: {\\n\\t\\t\\tname: 'Security',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware: {\\n\\t\\t\\tname: 'Software',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tsoftware_consultant: {\\n\\t\\t\\tname: 'Software Consultant',\\n\\t\\t\\thacking: true,\\n\\t\\t\\tcombat: false,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\temployee: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_employee: {\\n\\t\\t\\tname: 'part-time Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\twaiter: {\\n\\t\\t\\tname: 'Employee',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t},\\n\\t\\tpart_time_waiter: {\\n\\t\\t\\tname: 'part-time Waiter',\\n\\t\\t\\thacking: false,\\n\\t\\t\\tcombat: true,\\n\\t\\t\\tcharisma: true\\n\\t\\t}\\n\\t};\\n}\",\"filename\":\"sleeve/autopilot.js\",\"server\":\"home\"}}],[\"sleeve/company.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getCompanies} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['company', undefined]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getCompanies()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\t// Get sleeve number\\n\\tif (!options.sleeve) throw new Error(`Need to specify --sleeve 'number'`);\\n\\tconst sleeveNumber = options.sleeve;\\n\\t// Get company\\n\\tif (!options.faction) throw new Error(`Need to specify --company 'company'`);\\n\\tconst company = options.company;\\n\\tconst foundCompany = Object.keys(ns.getPlayer().jobs).find(c => c.toLowerCase() === company.toLowerCase());\\n\\tif (!foundCompany) throw new Error(`Invalid company or you haven't joined ${company} yet`);\\n\\t// Disable autopilot for this sleeve\\n\\tawait disableSleeveAutopilot(ns, sleeveNumber);\\n\\t// Set sleeve to company work\\n\\tns.sleeve.setToCompanyWork(sleeveNumber, foundCompany);\\n}\",\"filename\":\"sleeve/company.js\",\"server\":\"home\"}}],[\"sleeve/crime.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getCrimes} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['crime', 'homicide'],\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getCrimes()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve \\\"number\\\" or --all`);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToCommitCrime(i, options.crime);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToCommitCrime(options.sleeve, options.crime);\\n\\t}\\n}\",\"filename\":\"sleeve/crime.js\",\"server\":\"home\"}}],[\"sleeve/faction.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getFactions} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['faction', undefined],\\n\\t['hacking', false],\\n\\t['field', false],\\n\\t['security', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getFactions()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\t// Get sleeve number\\n\\tif (!options.sleeve) throw new Error(`Need to specify --sleeve 'number'`);\\n\\tconst sleeveNumber = options.sleeve;\\n\\t// Get faction\\n\\tif (!options.faction) throw new Error(`Need to specify --faction 'faction'`);\\n\\tconst faction = options.faction;\\n\\t// Get work type\\n\\tif (!options.hacking && !options.field && !options.security)\\n\\t\\tthrow new Error(`Specify --hacking, --field or --security for work type`);\\n\\tconst workType = options.hacking ? 'Hacking Contracts' : options.field ? 'Field Work' : 'Security Work';\\n\\t// Get factions player has joined\\n\\tconst foundFaction = ns.getPlayer().factions.find(f => f.toLowerCase() === faction.toLowerCase());\\n\\tif (!foundFaction) throw new Error(`Invalid faction or you haven't joined ${faction} yet`);\\n\\t// Disable autopilot for this sleeve\\n\\tawait disableSleeveAutopilot(ns, sleeveNumber);\\n\\t// Set sleeve to faction work\\n\\tif (!ns.sleeve.setToFactionWork(sleeveNumber, foundFaction, workType))\\n\\t\\tthrow new Error(`Could not get sleeve ${sleeveNumber} to start working for ${foundFaction} doing ${workType}`);\\n}\",\"filename\":\"sleeve/faction.js\",\"server\":\"home\"}}],[\"sleeve/gym.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getGymLocation, getGyms} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['str', false],\\n\\t['def', false],\\n\\t['dex', false],\\n\\t['agi', false],\\n\\t['gym', 'Powerhouse Gym'],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getGyms()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve 'number' or --all`);\\n\\t// Get gym location\\n\\tconst location = getGymLocation(options.gym);\\n\\t// Get stat to train\\n\\tif (!options.str && !options.def && !options.dex && !options.agi)\\n\\t\\tthrow new Error(`Specify --str, --def, --dex or --agi for stat to train`);\\n\\tconst stat = options.str ? 'Strength' : options.def ? 'Defense' : options.dex ? 'Dexterity' : 'Agility';\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (!ns.sleeve.travel(i, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToGymWorkout(i, options.gym, stat);\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (!ns.sleeve.travel(options.sleeve, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToGymWorkout(options.sleeve, options.gym, stat);\\n\\t}\\n}\",\"filename\":\"sleeve/gym.js\",\"server\":\"home\"}}],[\"sleeve/reset.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {defaultPortData, getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst portNumber = getPortNumbers().sleeve;\\n\\tawait modifyFile(ns, portNumber, defaultPortData(portNumber));\\n}\",\"filename\":\"sleeve/reset.js\",\"server\":\"home\"}}],[\"sleeve/shock-recovery.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify a sleeve number or --all`);\\n\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToShockRecovery(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToShockRecovery(options.sleeve);\\n\\t}\\n}\",\"filename\":\"sleeve/shock-recovery.js\",\"server\":\"home\"}}],[\"sleeve/synchronize.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify a sleeve 'number' or --all`);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToSynchronize(i);\\n\\t\\t}\\n\\t} else {\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToSynchronize(options.sleeve);\\n\\t}\\n}\",\"filename\":\"sleeve/synchronize.js\",\"server\":\"home\"}}],[\"sleeve/university.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {disableSleeveAutopilot} from '/sleeve/utils.js';\\nimport {getUniversities, getUniversityLocation} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['sleeve', undefined],\\n\\t['university', 'ZB Institute of Technology'],\\n\\t['course', 'Algorithms'],\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, options) {\\n\\tdata.flags(argsSchema);\\n\\treturn [...getUniversities()];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && !options.sleeve) throw new Error(`Need to specify --sleeve 'number' or --all`);\\n\\t// Get university location\\n\\tconst location = getUniversityLocation(options.university);\\n\\tif (options.all) {\\n\\t\\tfor (let i = 0; i < ns.sleeve.getNumSleeves(); i++) {\\n\\t\\t\\tif (!ns.sleeve.travel(i, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\t\\tawait disableSleeveAutopilot(ns, i);\\n\\t\\t\\tns.sleeve.setToUniversityCourse(i, options.university, options.course);\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (!ns.sleeve.travel(options.sleeve, location)) throw new Error(`Could not travel sleeve to correct location`);\\n\\t\\tawait disableSleeveAutopilot(ns, options.sleeve);\\n\\t\\tns.sleeve.setToUniversityCourse(options.sleeve, options.university, options.course);\\n\\t}\\n}\",\"filename\":\"sleeve/university.js\",\"server\":\"home\"}}],[\"sleeve/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} sleeveNumber\\n */\\nexport async function disableSleeveAutopilot(ns, sleeveNumber) {\\n\\tawait modifyFile(ns, getPortNumbers().sleeve, {[sleeveNumber]: {autopilot: false}});\\n}\",\"filename\":\"sleeve/utils.js\",\"server\":\"home\"}}],[\"stanek/accept.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tacceptStanek(ns);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nexport function acceptStanek(ns) {\\n\\tns.singularity.travelToCity('Chongqing');\\n\\tns.singularity.goToLocation('Church of the Machine God');\\n\\t[...eval('document').getElementsByTagName('*')].find(e => e.innerText === 'Accept Stanek\\\\'s Gift').click();\\n}\",\"filename\":\"stanek/accept.js\",\"server\":\"home\"}}],[\"stanek/controller.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\nimport {\\n\\tformatNumber,\\n\\tformatRam,\\n\\tgetAccessibleServers,\\n\\tgetFreeRam,\\n\\tgetPortNumbers,\\n\\tgetScripts,\\n\\treadFromFile,\\n\\treserveRam,\\n\\tunreserveRam\\n} from '/utils.js';\\n\\n// Constants\\nconst portNumber = getPortNumbers().stanek;\\nconst hostSearchDelay = 3600;\\n\\n// Variables\\nlet host;\\nlet threads = 0;\\nlet ram = 0;\\nlet firstLoop = true;\\nlet time = Date.now();\\n// TODO: Stanek is still crashing everything, not sure why but I need to find a fix\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\tconst st = ns.stanek;\\n\\thost = ns.getHostname();\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tns.clearLog();\\n\\t\\t// Get Stanek data\\n\\t\\tconst data = readFromFile(ns, portNumber);\\n\\t\\t// Get best host and the max RAM we can reserve for charging\\n\\t\\tgetBestHost(ns);\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.giftWidth(), st.giftHeight())[data.pattern]);\\n\\t\\t// Get chargeable fragment info\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges && f.limit === 1);\\n\\t\\tif (fragments.length === 0) {\\n\\t\\t\\tns.print(`INFO: All fragments are fully charged`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Reserve RAM on host for charging\\n\\t\\tawait reserveRam(ns, host, ram);\\n\\t\\t// Wait for RAM to free up\\n\\t\\twhile (ns.getServerMaxRam(host) - ns.getServerUsedRam(host) < ram) {\\n\\t\\t\\tns.clearLog();\\n\\t\\t\\tns.print(`INFO: Waiting for RAM to free up on ${host}: ` +\\n\\t\\t\\t\\t`${formatRam(ns, ns.getServerMaxRam(host) - ns.getServerUsedRam(host))} ${formatRam(ns, ram)}`);\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\t// Charge Stanek\\n\\t\\tawait charger(ns);\\n\\t\\t// Remove reserved RAM on host\\n\\t\\tawait unreserveRam(ns, host);\\n\\t\\t// Update every second\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nfunction getBestHost(ns) {\\n\\tconst scripts = getScripts();\\n\\tconst chargeRam = ns.getScriptRam(scripts.charge);\\n\\tlet bestHost, maxThreads = 0, maxRam = 0;\\n\\tfor (const host of getAccessibleServers(ns)) {\\n\\t\\tconst maxRamAvailable = getFreeRam(ns, host, true);\\n\\t\\tif (maxRamAvailable > maxRam) {\\n\\t\\t\\tbestHost = host;\\n\\t\\t\\tmaxThreads = Math.floor(maxRamAvailable / chargeRam);\\n\\t\\t\\tmaxRam = maxRamAvailable;\\n\\t\\t}\\n\\t}\\n\\tif (firstLoop || (Date.now() >= time + hostSearchDelay && maxThreads > threads)) {\\n\\t\\tns.stanek.clearGift(); // Reset charges\\n\\t\\thost = bestHost;\\n\\t\\tthreads = maxThreads;\\n\\t\\tram = maxRam;\\n\\t\\tfirstLoop = false;\\n\\t\\ttime = Date.now();\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nasync function charger(ns) {\\n\\tconst st = ns.stanek;\\n\\tconst script = getScripts().charge;\\n\\tconst scriptRam = ns.getScriptRam(script);\\n\\t// Charge fragments\\n\\twhile (true) {\\n\\t\\t// Get data\\n\\t\\tconst data = readFromFile(ns, portNumber);\\n\\t\\t// Set up pattern\\n\\t\\tsetupPattern(ns, getPatterns(st.giftWidth(), st.giftHeight())[data.pattern]);\\n\\t\\t// Get chargeable fragments\\n\\t\\tconst fragments = st.activeFragments().filter(f => f.numCharge < data.maxCharges && f.limit === 1);\\n\\t\\tif (fragments.length === 0) return; // All fragments charged to full\\n\\t\\t// Charge each fragment one at a time\\n\\t\\tfor (const fragment of fragments) {\\n\\t\\t\\tstatusUpdate(ns, data);\\n\\t\\t\\tconst availableRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host);\\n\\t\\t\\tconst availableThreads = Math.floor(availableRam / scriptRam);\\n\\t\\t\\tif (availableThreads <= 0) {\\n\\t\\t\\t\\tns.print(`INFO: Not enough RAM available on ${host} to charge Stanek. ` +\\n\\t\\t\\t\\t\\t`Waiting for RAM to free up.`);\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Only charge if we will not be bringing down the highest\\n\\t\\t\\tif (availableThreads < fragment.highestCharge * 0.99) {\\n\\t\\t\\t\\tns.print(`WARNING: The highest charge of fragment ${fragment.id} is ${formatNumber(ns, fragment.highestCharge)}, ` +\\n\\t\\t\\t\\t\\t`indicating that it has been charged while there was ${formatRam(ns, scriptRam * fragment.highestCharge)} or more free RAM on home, ` +\\n\\t\\t\\t\\t\\t`but currently there is only ${formatRam(ns, availableRam)} available, which would reduce the average charge and lower your stats. ` +\\n\\t\\t\\t\\t\\t`This update will be skipped, and you should free up RAM on home to resume charging.`);\\n\\t\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tconst pid = ns.exec(script, host, threads, fragment.x, fragment.y);\\n\\t\\t\\twhile (ns.isRunning(pid, host)) {\\n\\t\\t\\t\\tawait ns.sleep(100);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Fragment[]} fragments\\n * @param {Object} data\\n */\\nfunction statusUpdate(ns, data) {\\n\\tns.clearLog();\\n\\tconst fragments = ns.stanek.activeFragments().filter(f => f.numCharge < data.maxCharges && f.limit === 1);\\n\\tlet status = `Charging ${fragments.length} fragments to ${data.maxCharges}\\\\n`;\\n\\tfor (const fragment of fragments) {\\n\\t\\tstatus += `Fragment ${String(fragment.id).padStart(2)} at [${fragment.x}, ${fragment.y}], ` +\\n\\t\\t\\t`charge num: ${fragment.numCharge}, highest: ${formatNumber(ns, fragment.highestCharge)}\\\\n`;\\n\\t}\\n\\tns.print(status);\\n}\\n\\n/**\\n *\\n * @param {number} width\\n * @param {number} height\\n * @returns {Object<Object<number, number, number, number, number>[]>}\\n */\\nfunction getPatterns(width, height) { // Can be filled in using stanek/save.js\\n\\tconst patterns = {};\\n\\tswitch (true) { // Sorted in descending order of size\\n\\t\\tcase width >= 8 && height >= 7:\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 1, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 0, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 2, 'rotation': 0, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 4, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 1, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 4, 'rotation': 2, 'fragmentID': 101, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 5, 'rotation': 0, 'fragmentID': 25, 'type': 14},\\n\\t\\t\\t\\t{'rootX': 5, 'rootY': 2, 'rotation': 1, 'fragmentID': 100, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 5, 'rootY': 5, 'rotation': 0, 'fragmentID': 28, 'type': 16},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 5, 'rotation': 0, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 6, 'rootY': 0, 'rotation': 3, 'fragmentID': 18, 'type': 11}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 6 && height >= 5:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 0, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 0, 'fragmentID': 14, 'type': 9},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 2, 'rotation': 0, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 0, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 101, 'type': 18}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 1, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 0, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 2, 'rotation': 0, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 4, 'rotation': 0, 'fragmentID': 20, 'type': 12},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 1, 'fragmentID': 7, 'type': 5}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.bladeburner = [\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 0, 'rotation': 0, 'fragmentID': 30, 'type': 17},\\n\\t\\t\\t\\t{'rootX': 3, 'rootY': 3, 'rotation': 0, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 1, 'rootY': 0, 'rotation': 0, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 1, 'rotation': 2, 'fragmentID': 101, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 3, 'rotation': 2, 'fragmentID': 14, 'type': 9},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 1, 'fragmentID': 18, 'type': 11}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 5 && height >= 5:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 3, 'fragmentID': 12, 'type': 8},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 2, 'fragmentID': 16, 'type': 10},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 3, 'rotation': 2, 'fragmentID': 10, 'type': 7},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 0, 'rotation': 3, 'fragmentID': 6, 'type': 4},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 2, 'fragmentID': 14, 'type': 9}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 2, 'rotation': 2, 'fragmentID': 1, 'type': 6},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 3, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 1, 'rotation': 1, 'fragmentID': 102, 'type': 18},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 1, 'fragmentID': 21, 'type': 13},\\n\\t\\t\\t\\t{'rootX': 2, 'rootY': 0, 'rotation': 0, 'fragmentID': 5, 'type': 3},\\n\\t\\t\\t\\t{'rootX': 4, 'rootY': 1, 'rotation': 1, 'fragmentID': 6, 'type': 4}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tcase width >= 3 && height >= 3:\\n\\t\\t\\tpatterns.starter = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6}\\n\\t\\t\\t];\\n\\t\\t\\tpatterns.hacking = [\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 1, 'rotation': 0, 'fragmentID': 7, 'type': 5},\\n\\t\\t\\t\\t{'rootX': 0, 'rootY': 0, 'rotation': 0, 'fragmentID': 1, 'type': 6}\\n\\t\\t\\t];\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`No patterns are defined for Stanek's gift of size ${width} by ${height}`);\\n\\t}\\n\\treturn patterns;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {string} pattern\\n */\\nfunction setupPattern(ns, pattern) {\\n\\tconst st = ns.stanek;\\n\\tfor (const fragment of pattern) {\\n\\t\\tconst x = fragment.rootX;\\n\\t\\tconst y = fragment.rootY;\\n\\t\\tconst rot = fragment.rotation;\\n\\t\\tconst id = fragment.fragmentID;\\n\\t\\tif (st.getFragment(x, y)?.id === id) continue; // Fragment already placed there\\n\\t\\tif (!st.canPlaceFragment(x, y, rot, id)) makeSpace(ns, x, y, rot, id); // Make space for fragment\\n\\t\\tst.placeFragment(x, y, rot, id); // Place fragment\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {number} rotation\\n * @param {number} fragmentID\\n * @returns {boolean}\\n */\\nfunction makeSpace(ns, rootX, rootY, rotation, fragmentID) {\\n\\tconst st = ns.stanek;\\n\\tconst fragment = getFragment(ns, fragmentID);\\n\\tconst activeFragments = st.activeFragments();\\n\\tconst sameActiveFragments = activeFragments.filter(f => f.id === fragmentID);\\n\\t// Check first if we are going over the limit\\n\\tif (sameActiveFragments.length + 1 > fragment.limit) {\\n\\t\\t// Remove any fragments with the same ID\\n\\t\\tfor (let sameActiveFragment of sameActiveFragments) {\\n\\t\\t\\tst.removeFragment(sameActiveFragment.x, sameActiveFragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlaceFragment(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Check if we are colliding with another fragment\\n\\tconst currentFragmentCoordinates = getCoordinates(ns, rootX, rootY, fragment.shape, rotation);\\n\\tfor (let other of getActiveFragmentsAndCoordinates(ns)) {\\n\\t\\t// Check if there are colliding cells\\n\\t\\tif (currentFragmentCoordinates.some(c => other.coordinates.some(e => e[0] === c[0] && e[1] === c[1]))) {\\n\\t\\t\\tst.removeFragment(other.fragment.x, other.fragment.y);\\n\\t\\t}\\n\\t\\t// Check if we can place fragment now\\n\\t\\tif (st.canPlaceFragment(rootX, rootY, rotation, fragmentID)) return true;\\n\\t}\\n\\t// Something is stopping us from making space\\n\\tthrow new Error(`Could not make space for fragment`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object<Fragment, [number, number][]>[]}\\n */\\nfunction getActiveFragmentsAndCoordinates(ns) {\\n\\treturn Array.from(ns.stanek.activeFragments(), f => {\\n\\t\\treturn {\\n\\t\\t\\tfragment: f,\\n\\t\\t\\tcoordinates: getCoordinates(ns, f.x, f.y, getFragment(ns, f.id).shape, f.rotation)\\n\\t\\t};\\n\\t});\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {number} rootX\\n * @param {number} rootY\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {[number, number][]}\\n */\\nfunction getCoordinates(ns, rootX, rootY, shape, rotation) {\\n\\tconst st = ns.stanek;\\n\\tconst coordinates = [];\\n\\tfor (let [i, row] of getRotatedShape(shape, rotation).entries()) {\\n\\t\\tfor (let [j, cell] of row.entries()) {\\n\\t\\t\\t// Check if fragment occupies the cell\\n\\t\\t\\tif (cell === false) continue;\\n\\t\\t\\tconst x = rootX + j;\\n\\t\\t\\tconst y = rootY + i;\\n\\t\\t\\t// If we are going over the gift's edges throw an error\\n\\t\\t\\tif (x < 0 || y < 0 || x >= st.giftWidth() || y >= st.giftHeight()) throw new Error(`Invalid placement`);\\n\\t\\t\\tcoordinates.push([x, y]);\\n\\t\\t}\\n\\t}\\n\\treturn coordinates;\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @param {number} rotation\\n * @returns {boolean[][]}\\n */\\nfunction getRotatedShape(shape, rotation) {\\n\\tswitch (rotation) {\\n\\t\\tcase 0: // No rotation\\n\\t\\t\\treturn shape;\\n\\t\\tcase 1: // Rotate by 90 degrees\\n\\t\\t\\treturn reverse(transpose(shape));\\n\\t\\tcase 2: // Rotate by 180 degrees\\n\\t\\t\\treturn reverse(transpose(reverse(transpose(shape))));\\n\\t\\tcase 3: // Rotate by 270 degrees\\n\\t\\t\\treturn transpose(reverse(shape));\\n\\t\\tdefault:\\n\\t\\t\\tthrow new Error(`Invalid rotation`);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction transpose(shape) {\\n\\treturn Object.keys(shape[0]).map(c => shape.map(r => r[c]));\\n}\\n\\n/**\\n *\\n * @param {boolean[][]} shape\\n * @returns {boolean[][]}\\n */\\nfunction reverse(shape) {\\n\\treturn shape.map(r => r.reverse());\\n}\",\"filename\":\"stanek/controller.js\",\"server\":\"home\"}}],[\"stanek/reset-charges.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.stanek.clearGift();\\n}\",\"filename\":\"stanek/reset-charges.js\",\"server\":\"home\"}}],[\"stanek/save.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getFragment} from '/stanek/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprintf(JSON.stringify(ns.stanek.activeFragments().map(f => ({\\n\\t\\trootX: f.x,\\n\\t\\trootY: f.y,\\n\\t\\trotation: f.rotation,\\n\\t\\tfragmentID: f.id,\\n\\t\\ttype: getFragment(ns, f.id).type\\n\\t}))));\\n}\",\"filename\":\"stanek/save.js\",\"server\":\"home\"}}],[\"stanek/set.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getPortNumbers, modifyFile} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['pattern', undefined],\\n\\t['maxCharges', undefined]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst dataToModify = {};\\n\\tif (options.pattern) dataToModify.pattern = options.pattern;\\n\\tif (options.maxCharges) dataToModify.maxCharges = options.maxCharges;\\n\\tawait modifyFile(ns, getPortNumbers().stanek, dataToModify);\\n}\",\"filename\":\"stanek/set.js\",\"server\":\"home\"}}],[\"stanek/utils.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @param {number} fragmentID\\n * @returns {Fragment}\\n */\\nexport function getFragment(ns, fragmentID) {\\n\\treturn ns.stanek.fragmentDefinitions().find(f => f.id === fragmentID);\\n}\",\"filename\":\"stanek/utils.js\",\"server\":\"home\"}}],[\"stock-market/autopilot.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// Requires access to the TIX API. Purchases access to the 4S Mkt Data API as soon as it can\\nimport {\\n\\tformatMoney,\\n\\tformatNumber,\\n\\tformatPercentage,\\n\\tformatTime,\\n\\tgetPortNumbers,\\n\\tmodifyFile,\\n\\tprintBoth,\\n\\tsymbolToServer\\n} from '/utils.js';\\n\\nlet disableShorts = false;\\nlet commission = 100000; // Buy/sell commission. Expected profit must exceed this to buy anything.\\nlet totalProfit = 0; // We can keep track of how much we've earned since start.\\nlet mock = false; // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n// Pre-4S configuration (influences how we play the stock market before we have 4S data, after which everything's fool-proof)\\nlet minTickHistory; // This much history must be gathered before we will offer a stock forecast.\\nlet longTermForecastWindowLength; // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected)\\nlet nearTermForecastWindowLength; // This much history will be used to detect recent negative trends and act on them immediately.\\n// The following pre-4s constants are hard-coded (not configurable via command line) but may require tweaking\\nconst marketCycleLength = 75; // Every this many ticks, all stocks have a 45% chance of \\\"reversing\\\" their probability. Something we must detect and act on quick to not lose profits.\\nconst maxTickHistory = 151; // This much history will be kept for purposes of determining volatility and perhaps one day pinpointing the market cycle tick\\nconst inversionDetectionTolerance = 0.1; // If the near-term forecast is within this distance of (1 - long-term forecast), consider it a potential \\\"inversion\\\"\\nconst inversionLagTolerance = 5; // An inversion is \\\"trusted\\\" up to this many ticks after the normal nearTermForecastWindowLength expected detection time\\n// (Note: 33 total stocks * 45% inversion chance each cycle = ~15 expected inversions per cycle)\\n// The following pre-4s values are set during the lifetime of the program\\nlet marketCycleDetected = false; // We should not make risky purchasing decisions until the stock market cycle is detected. This can take a long time, but we'll be thanked\\nlet detectedCycleTick = 0; // This will be reset to zero once we've detected the market cycle point.\\nlet inversionAgreementThreshold = 6; // If this many stocks are detected as being in an \\\"inversion\\\", consider this the stock market cycle point\\nconst expectedTickTime = 6000;\\nconst catchUpTickTime = 4000;\\nlet lastTick = 0;\\nlet sleepInterval = 1000;\\nconst portNumber = getPortNumbers().stock;\\n\\nconst argsSchema = [\\n\\t['liquidate', false], // Stop any other running instances and sell all stocks\\n\\t['mock', false], // If set to true, will \\\"mock\\\" buy/sell but not actually buy/sell anything\\n\\t['disable-shorts', false], // If set to true, will disable shorting\\n\\t['reserve', 0], // A fixed amount of money to not spend\\n\\t['fracB', 0.4], // Fraction of assets to have as liquid before we consider buying more stock\\n\\t['fracH', 0.2], // Fraction of assets to retain as cash in hand when buying\\n\\t['buy-threshold', 0.0001], // Buy only stocks forecasted to earn better than a 0.01% return (1 Basis Point)\\n\\t['sell-threshold', 0], // Sell stocks forecasted to earn less than this return (default 0% - which happens when prob hits 50% or worse)\\n\\t['diversification', 0.34], // Before we have 4S data, we will not hold more than this fraction of our portfolio as a single stock\\n\\t['disableHud', false], // Disable showing stock value in the HUD panel\\n\\t// The following settings are related only to tweaking pre-4s stock-market logic\\n\\t['pre-4s-buy-threshold-probability', 0.15], // Before we have 4S data, only buy stocks whose probability is more than this far away from 0.5, to account for imprecision\\n\\t['pre-4s-buy-threshold-return', 0.0015], // Before we have 4S data, Buy only stocks forecasted to earn better than this return (default 0.25% or 25 Basis Points)\\n\\t['pre-4s-sell-threshold-return', 0.0005], // Before we have 4S data, Sell stocks forecasted to earn less than this return (default 0.15% or 15 Basis Points)\\n\\t['pre-4s-min-tick-history', 21], // This much history must be gathered before we will use pre-4s stock forecasts to make buy/sell decisions. (Default 21)\\n\\t['pre-4s-forecast-window', 51], // This much history will be used to determine the historical probability of the stock (so long as no inversions are detected) (Default 76)\\n\\t['pre-4s-inversion-detection-window', 10], // This much history will be used to detect recent negative trends and act on them immediately. (Default 10)\\n\\t['pre-4s-min-blackout-window', 10], // Do not make any new purchases this many ticks before the detected stock market cycle tick, to avoid buying a position that reverses soon after\\n\\t['pre-4s-minimum-hold-time', 10] // A recently bought position must be held for this long before selling, to avoid rash decisions due to noise after a fresh market cycle. (Default 10)\\n];\\n\\nexport function autocomplete(data) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.disableLog('ALL');\\n\\t// Extract various options from the args (globals, purchasing decision factors, pre-4s factors)\\n\\tconst options = ns.flags(argsSchema);\\n\\tmock = options.mock;\\n\\tconst fracB = options.fracB;\\n\\tconst fracH = options.fracH;\\n\\tconst diversification = options.diversification;\\n\\tconst disableHud = options.disableHud || options.liquidate || options.mock;\\n\\tdisableShorts = options['disable-shorts'];\\n\\tconst pre4sBuyThresholdProbability = options['pre-4s-buy-threshold-probability'];\\n\\tconst pre4sMinBlackoutWindow = options['pre-4s-min-blackout-window'] || 1;\\n\\tconst pre4sMinHoldTime = options['pre-4s-minimum-hold-time'] || 0;\\n\\tminTickHistory = options['pre-4s-min-tick-history'] || 21;\\n\\tnearTermForecastWindowLength = options['pre-4s-inversion-detection-window'] || 10;\\n\\tlongTermForecastWindowLength = options['pre-4s-forecast-window'] || (marketCycleLength + 1);\\n\\t// Other global values must be reset at start lest they be left in memory from a prior run\\n\\tlastTick = 0;\\n\\ttotalProfit = 0;\\n\\tmarketCycleDetected = false;\\n\\tdetectedCycleTick = 0;\\n\\tinversionAgreementThreshold = 6;\\n\\tlet corpus = 0;\\n\\tlet myStocks = [];\\n\\tlet allStocks = [];\\n\\tif (!ns.stock.hasTIXAPIAccess()) { // You cannot use the autopilot until you have API access\\n\\t\\treturn printBoth(ns, `ERROR: You have to buy WSE account and TIX API access before you can run this script`);\\n\\t}\\n\\tif (options.liquidate) { // If given the \\\"liquidate\\\" command, try to kill the version of ourselves trading in stocks\\n\\t\\tns.ps().filter(p => p.filename === ns.getScriptName() && !p.args.includes('--l') &&\\n\\t\\t\\t!p.args.includes('--liquidate')).forEach(p => ns.kill(p.pid));\\n\\t}\\n\\tif (!disableShorts && ns.getPlayer().bitNodeN !== 8 && !ns.singularity.getOwnedSourceFiles().some(s => s.n === 8 && s.lvl > 1)) {\\n\\t\\tns.print(`INFO: Shorting stocks has been disabled (you have not yet unlocked access to shorting)`);\\n\\t\\tdisableShorts = true;\\n\\t}\\n\\t// Initialise all stocks\\n\\tallStocks = initAllStocks(ns);\\n\\tif (options.liquidate) {\\n\\t\\tliquidate(ns); // Sell all stocks\\n\\t\\treturn;\\n\\t}\\n\\t// Assume Bitnode mults are 1 if user doesn't have this API access yet\\n\\tconst bitnodeMults = ns.getPlayer().bitNodeN === 5 || ns.singularity.getOwnedSourceFiles().includes(s => s.n === 5) ?\\n\\t\\tns.getBitNodeMultipliers() : {FourSigmaMarketDataCost: 1, FourSigmaMarketDataApiCost: 1};\\n\\tlet hudElement = null;\\n\\tif (!disableHud) {\\n\\t\\thudElement = initializeHud();\\n\\t\\tns.atExit(() => hudElement.parentElement.parentElement.parentElement.removeChild(hudElement.parentElement.parentElement));\\n\\t}\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst playerStats = ns.getPlayer();\\n\\t\\tconst pre4s = !ns.stock.has4SDataTIXAPI();\\n\\t\\tcorpus = await refresh(ns, playerStats, allStocks, myStocks);\\n\\t\\tif (pre4s && !mock && tryGet4SApi(ns, playerStats, bitnodeMults, corpus)) continue; // Start the loop over if we just bought 4S API access\\n\\t\\t// Be more conservative with our decisions if we don't have 4S data\\n\\t\\tconst thresholdToBuy = pre4s ? options['pre-4s-buy-threshold-return'] : options['buy-threshold'];\\n\\t\\tconst thresholdToSell = pre4s ? options['pre-4s-sell-threshold-return'] : options['sell-threshold'];\\n\\t\\tif (myStocks.length > 0) doStatusUpdate(ns, allStocks, myStocks, hudElement);\\n\\t\\telse if (hudElement) hudElement.innerText = '$0.000 ';\\n\\t\\tif (pre4s && allStocks[0].priceHistory.length < minTickHistory) {\\n\\t\\t\\tns.print(`Building a history of stock prices (${allStocks[0].priceHistory.length}/${minTickHistory})...`);\\n\\t\\t\\tawait ns.sleep(sleepInterval);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Sell shares which are forecasted to underperform (worse than some expected return threshold)\\n\\t\\tlet sales = 0;\\n\\t\\tfor (let stk of myStocks) {\\n\\t\\t\\tif (stk.absReturn() <= thresholdToSell || stk.bullish() && stk.sharesShort > 0 || stk.bearish() && stk.sharesLong > 0) {\\n\\t\\t\\t\\tif (pre4s && stk.ticksHeld < pre4sMinHoldTime) {\\n\\t\\t\\t\\t\\tif (!stk.warnedBadPurchase) ns.print(`WARNING: Thinking of selling ${stk.sym} with ER ${formatMoney(ns, stk.absReturn())}, but holding out as it was purchased just ${stk.ticksHeld} ticks ago...`);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = true; // Hack to ensure we don't spam this warning\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsales += doSellAll(ns, stk);\\n\\t\\t\\t\\t\\tstk.warnedBadPurchase = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (sales > 0) continue; // If we sold anything, loop immediately (no need to sleep) and refresh stats immediately before making purchasing decisions.\\n\\t\\tlet cash = playerStats.money - options['reserve'];\\n\\t\\tlet liquidity = cash / corpus;\\n\\t\\t// If we haven't gone above a certain liquidity threshold, don't attempt to buy more stock\\n\\t\\t// Avoids death-by-a-thousand-commissions before we get super-rich, stocks are capped, and this is no longer an issue\\n\\t\\t// BUT may mean we miss striking while the iron is hot while waiting to build up more funds.\\n\\t\\tif (liquidity > fracB) {\\n\\t\\t\\t// If we haven't detected the market cycle (or haven't detected it reliably), assume it might be quite soon and restrict bets to those that can turn a profit in the very-near term.\\n\\t\\t\\tconst estTick = Math.max(detectedCycleTick, marketCycleLength - (!marketCycleDetected ? 5 : inversionAgreementThreshold <= 8 ? 15 : inversionAgreementThreshold <= 10 ? 30 : marketCycleLength));\\n\\t\\t\\t// Buy shares with cash remaining in hand if exceeding some buy threshold. Prioritize targets whose expected return will cover the ask/bit spread the soonest\\n\\t\\t\\tfor (const stk of allStocks.sort(purchaseOrder)) {\\n\\t\\t\\t\\t// Do not purchase a stock if it is not forecasted to recover from the ask/bid spread before the next market cycle and potential probability inversion\\n\\t\\t\\t\\tif (stk.blackoutWindow() >= marketCycleLength - estTick) continue;\\n\\t\\t\\t\\tif (pre4s && (Math.max(pre4sMinHoldTime, pre4sMinBlackoutWindow) >= marketCycleLength - estTick)) continue;\\n\\t\\t\\t\\t// Compute the cash we have to spend (such that spending it all on stock would bring us down to a liquidity of fracH)\\n\\t\\t\\t\\tlet budget = cash - (fracH * corpus);\\n\\t\\t\\t\\tif (budget <= 0) break; // Break if we are out of money (i.e. from prior purchases)\\n\\t\\t\\t\\t// Skip if we already own all possible shares in this stock, or if the expected return is below our threshold, or if shorts are disabled and stock is bearish\\n\\t\\t\\t\\tif (stk.ownedShares() === stk.maxShares || stk.absReturn() <= thresholdToBuy || (disableShorts && stk.bearish())) continue;\\n\\t\\t\\t\\t// If pre-4s, do not purchase any stock whose last inversion was too recent, or whose probability is too close to 0.5\\n\\t\\t\\t\\tif (pre4s && (stk.lastInversion < minTickHistory || Math.abs(stk.prob - 0.5) < pre4sBuyThresholdProbability)) continue;\\n\\t\\t\\t\\t// Enforce diversification - don't hold more than x% of our portfolio as a single stock (as corpus increases, this naturally stops being a limiter)\\n\\t\\t\\t\\tbudget = Math.min(budget, (1 - fracH) * corpus * diversification - stk.positionValue());\\n\\t\\t\\t\\tlet purchasePrice = stk.bullish() ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\t\\t\\t\\tlet affordableShares = Math.floor((budget - commission) / purchasePrice);\\n\\t\\t\\t\\tlet numShares = Math.min(stk.maxShares - stk.ownedShares(), affordableShares);\\n\\t\\t\\t\\tif (numShares <= 0) continue;\\n\\t\\t\\t\\t// Don't buy fewer shares than can beat the commission before the next stock market cycle (after covering the spread), lest the position reverse before we break even.\\n\\t\\t\\t\\tlet ticksBeforeCycleEnd = marketCycleLength - estTick - stk.timeToCoverTheSpread();\\n\\t\\t\\t\\tif (ticksBeforeCycleEnd < 1) continue; // We're cutting it too close to the market cycle, position might reverse before we break even on commission\\n\\t\\t\\t\\tlet estEndOfCycleValue = numShares * purchasePrice * ((stk.absReturn() + 1) ** ticksBeforeCycleEnd - 1); // Expected difference in purchase price and value at next market cycle end\\n\\t\\t\\t\\tif (estEndOfCycleValue <= 2 * commission)\\n\\t\\t\\t\\t\\tns.print(`Despite attractive ER of ${formatMoney(ns, stk.absReturn())}, ${stk.sym} was not bought. Budget: ${formatMoney(ns, budget)} can only buy ${numShares} shares @ ${formatMoney(ns, purchasePrice)}. ` +\\n\\t\\t\\t\\t\\t\\t`Given an estimated ${marketCycleLength - estTick} ticks left in market cycle, less ${stk.timeToCoverTheSpread().toFixed(1)} ticks to cover the spread (${formatPercentage(stk.spread_pct)}), ` +\\n\\t\\t\\t\\t\\t\\t`remaining ${ticksBeforeCycleEnd.toFixed(1)} ticks would only generate ${formatMoney(ns, estEndOfCycleValue)}, which is less than 2x commission (${formatMoney(ns, 2 * commission)})`);\\n\\t\\t\\t\\telse cash -= doBuy(ns, stk, numShares);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tawait ns.sleep(sleepInterval);\\n\\t}\\n}\\n\\n/**\\n *\\n * @param {function} func\\n * @returns {Object<string, *>}\\n */\\nfunction getStockInfoDict(ns, func) {\\n\\treturn Object.fromEntries(ns.stock.getSymbols().map(sym => [sym, func(sym)]));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Object[]}\\n */\\nfunction initAllStocks(ns) {\\n\\tconst dictMaxShares = getStockInfoDict(ns, ns.stock.getMaxShares); // Only need to get this once, it never changes\\n\\treturn ns.stock.getSymbols().map(s => ({\\n\\t\\tsym: s,\\n\\t\\tmaxShares: dictMaxShares[s], // Value never changes once retrieved\\n\\t\\texpectedReturn: function () { // How many holdings are expected to appreciate (or depreciate) in the future\\n\\t\\t\\t// To add conservatism to pre-4s estimates, we reduce the probability by 1 standard deviation without crossing the midpoint\\n\\t\\t\\tlet normalizedProb = (this.prob - 0.5);\\n\\t\\t\\tlet conservativeProb = normalizedProb < 0 ? Math.min(0, normalizedProb + this.probStdDev) : Math.max(0, normalizedProb - this.probStdDev);\\n\\t\\t\\treturn this.vol * conservativeProb;\\n\\t\\t},\\n\\t\\tabsReturn: function () {\\n\\t\\t\\treturn Math.abs(this.expectedReturn());\\n\\t\\t}, // Appropriate to use when can just as well buy a short position as a long position\\n\\t\\tbullish: function () {\\n\\t\\t\\treturn this.prob > 0.5;\\n\\t\\t},\\n\\t\\tbearish: function () {\\n\\t\\t\\treturn !this.bullish();\\n\\t\\t},\\n\\t\\townedShares: function () {\\n\\t\\t\\treturn this.sharesLong + this.sharesShort;\\n\\t\\t},\\n\\t\\towned: function () {\\n\\t\\t\\treturn this.ownedShares() > 0;\\n\\t\\t},\\n\\t\\tpositionValueLong: function () {\\n\\t\\t\\treturn this.sharesLong * this.bid_price;\\n\\t\\t},\\n\\t\\tpositionValueShort: function () {\\n\\t\\t\\treturn this.sharesShort * (2 * this.boughtPriceShort - this.ask_price);\\n\\t\\t}, // Shorts work a bit weird\\n\\t\\tpositionValue: function () {\\n\\t\\t\\treturn this.positionValueLong() + this.positionValueShort();\\n\\t\\t},\\n\\t\\t// How many stock market ticks must occur at the current expected return before we regain the value lost by the spread between buy and sell prices.\\n\\t\\t// This can be derived by taking the compound interest formula (future = current * (1 + expected_return) ^ n) and solving for n\\n\\t\\ttimeToCoverTheSpread: function () {\\n\\t\\t\\treturn Math.log(this.ask_price / this.bid_price) / Math.log(1 + this.absReturn());\\n\\t\\t},\\n\\t\\t// We should not buy this stock within this many ticks of a Market cycle, or we risk being forced to sell due to a probability inversion, and losing money due to the spread\\n\\t\\tblackoutWindow: function () {\\n\\t\\t\\treturn Math.ceil(this.timeToCoverTheSpread());\\n\\t\\t},\\n\\t\\t// Pre-4s properties used for forecasting\\n\\t\\tpriceHistory: [],\\n\\t\\tlastInversion: 0\\n\\t}));\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n */\\nfunction liquidate(ns) {\\n\\tlet totalStocks = 0, totalSharesLong = 0, totalSharesShort = 0, totalRevenue = 0;\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tfor (const sym of ns.stock.getSymbols()) {\\n\\t\\tconst [sharesLong, , sharesShort, avgShortCost] = dictPositions[sym];\\n\\t\\tif (sharesLong + sharesShort === 0) continue;\\n\\t\\ttotalStocks++;\\n\\t\\ttotalSharesLong += sharesLong;\\n\\t\\ttotalSharesShort += sharesShort;\\n\\t\\tif (sharesLong > 0) totalRevenue += ns.stock.sellStock(sym, sharesLong) * sharesLong - commission;\\n\\t\\tif (sharesShort > 0) totalRevenue += (2 * avgShortCost - ns.stock.sellShort(sym, sharesShort)) * sharesShort - commission;\\n\\t}\\n\\tprintBoth(ns, `Sold ${formatNumber(ns, totalSharesLong)} long shares and ${formatNumber(ns, totalSharesShort)} short shares ` +\\n\\t\\t`in ${totalStocks} stocks for ${formatMoney(ns, totalRevenue)}`);\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object<number>} bitnodeMults\\n * @param {number} corpus\\n * @returns {boolean}\\n */\\nfunction tryGet4SApi(ns, playerStats, bitnodeMults, corpus) {\\n\\tif (ns.stock.has4SDataTIXAPI()) return false; // Only return true if we just bought it\\n\\tconst cost4sApi = bitnodeMults.FourSigmaMarketDataApiCost * 25e9;\\n\\tif (cost4sApi > corpus * 0.9) return false;\\n\\t// Liquidate shares if it would allow us to afford 4S API data\\n\\tif (playerStats.money < cost4sApi) liquidate(ns);\\n\\tif (ns.stock.purchase4SMarketDataTixApi()) {\\n\\t\\tprintBoth(ns, `Purchased 4SMarketDataTixApi for ${formatMoney(ns, cost4sApi)}`);\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tns.print(`ERROR attempting to purchase 4SMarketDataTixApi`);\\n\\t\\tif (playerStats.bitNodeN !== 5 || !ns.singularity.getOwnedSourceFiles().some(s => s.n === 5)) { // If we do not have access to Bitnode multipliers, assume the cost is double and try again later\\n\\t\\t\\tns.print('INFO: Bitnode mults are not available (SF5) - assuming everything is twice as expensive in the current Bitnode');\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataCost *= 2;\\n\\t\\t\\tbitnodeMults.FourSigmaMarketDataApiCost *= 2;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object} stocks\\n * @param {Object} myStocks\\n * @param {*} hudElement\\n */\\nfunction doStatusUpdate(ns, stocks, myStocks, hudElement = null) {\\n\\tconst maxReturnBP = 1e5 * Math.max(...myStocks.map(s => s.absReturn())); // The largest return (in basis points) in our portfolio\\n\\tconst minReturnBP = 1e5 * Math.min(...myStocks.map(s => s.absReturn())); // The smallest return (in basis points) in our portfolio\\n\\tconst est_holdings_cost = myStocks.reduce((sum, stk) => sum + (stk.owned() ? commission : 0) +\\n\\t\\tstk.sharesLong * stk.boughtPrice + stk.sharesShort * stk.boughtPriceShort, 0);\\n\\tconst liquidation_value = myStocks.reduce((sum, stk) => sum - (stk.owned() ? commission : 0) + stk.positionValue(), 0);\\n\\tns.print(`Long ${myStocks.filter(s => s.sharesLong > 0).length}, Short ${myStocks.filter(s => s.sharesShort > 0).length} of ${stocks.length} stocks ` +\\n\\t\\t(myStocks.length === 0 ? '' : `(ER ${minReturnBP.toFixed(1)}-${maxReturnBP.toFixed(1)} BP) `) +\\n\\t\\t`Profit: ${formatMoney(ns, totalProfit)} Holdings: ${formatMoney(ns, liquidation_value)} ` +\\n\\t\\t`(Cost: ${formatMoney(ns, est_holdings_cost)}) Net: ${formatMoney(ns, totalProfit + liquidation_value - est_holdings_cost)}`);\\n\\tif (hudElement) hudElement.innerText = formatMoney(ns, liquidation_value);\\n}\\n\\n/* A sorting function to put stocks in the order we should prioritize investing in them */\\nconst purchaseOrder = (a, b) => (Math.ceil(a.timeToCoverTheSpread()) - Math.ceil(b.timeToCoverTheSpread())) || (b.absReturn() - a.absReturn());\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Player} playerStats\\n * @param {Object[]} allStocks\\n * @param {Object[]} myStocks\\n * @returns {Promise<number>}\\n */\\nasync function refresh(ns, playerStats, allStocks, myStocks) {\\n\\tconst has4s = ns.stock.has4SDataTIXAPI();\\n\\tlet corpus = playerStats.money;\\n\\tconst dictAskPrices = getStockInfoDict(ns, ns.stock.getAskPrice);\\n\\tconst dictBidPrices = getStockInfoDict(ns, ns.stock.getBidPrice);\\n\\tconst dictVolatilities = !has4s ? null : getStockInfoDict(ns, ns.stock.getVolatility);\\n\\tconst dictForecasts = !has4s ? null : getStockInfoDict(ns, ns.stock.getForecast);\\n\\tconst dictPositions = mock ? null : getStockInfoDict(ns, ns.stock.getPosition);\\n\\tconst ticked = allStocks.some(stk => stk.ask_price !== dictAskPrices[stk.sym]); // If any price has changed since our last update, the stock market has \\\"ticked\\\"\\n\\tif (ticked) {\\n\\t\\tif (Date.now() - lastTick < expectedTickTime - sleepInterval) {\\n\\t\\t\\tif (Date.now() - lastTick < catchUpTickTime - sleepInterval) {\\n\\t\\t\\t\\tconst changedPrices = allStocks.filter(stk => stk.ask_price !== dictAskPrices[stk.sym]);\\n\\t\\t\\t\\tns.print(`WARNING: Detected a stock market tick after only ${formatTime(ns, Date.now() - lastTick)}, but expected ~${formatTime(ns, expectedTickTime)}. ` +\\n\\t\\t\\t\\t\\t(changedPrices.length >= 33 ? '(All stocks updated)' : `The following ${changedPrices.length} stock prices changed: ${changedPrices.map(stk =>\\n\\t\\t\\t\\t\\t\\t`${stk.sym} ${formatMoney(ns, stk.ask_price)} -> ${formatMoney(ns, dictAskPrices[stk.sym])}`).join(', ')}`));\\n\\t\\t\\t} else ns.print(`INFO: Detected a rapid stock market tick (${formatTime(ns, Date.now() - lastTick)}), likely to make up for lag / offline time.`);\\n\\t\\t}\\n\\t\\tlastTick = Date.now();\\n\\t}\\n\\n\\tmyStocks.length = 0;\\n\\tfor (const stk of allStocks) {\\n\\t\\tconst sym = stk.sym;\\n\\t\\tstk.ask_price = dictAskPrices[sym]; // The amount we would pay if we bought the stock (higher than 'price')\\n\\t\\tstk.bid_price = dictBidPrices[sym]; // The amount we would receive if we sold the stock (lower than 'price')\\n\\t\\tstk.spread = stk.ask_price - stk.bid_price;\\n\\t\\tstk.spread_pct = stk.spread / stk.ask_price; // The percentage of value we lose just by buying the stock\\n\\t\\tstk.price = (stk.ask_price + stk.bid_price) / 2; // = ns.stock.getPrice(sym);\\n\\t\\tstk.vol = has4s ? dictVolatilities[sym] : stk.vol;\\n\\t\\tstk.prob = has4s ? dictForecasts[sym] : stk.prob;\\n\\t\\tstk.probStdDev = has4s ? 0 : stk.probStdDev; // Standard deviation around the est. probability\\n\\t\\t// Update our current portfolio of owned stock\\n\\t\\tconst [priorLong, priorShort] = [stk.sharesLong, stk.sharesShort];\\n\\t\\tstk.position = mock ? null : dictPositions[sym];\\n\\t\\tstk.sharesLong = mock ? (stk.sharesLong || 0) : stk.position[0];\\n\\t\\tstk.boughtPrice = mock ? (stk.boughtPrice || 0) : stk.position[1];\\n\\t\\tstk.sharesShort = mock ? (stk.shares_short || 0) : stk.position[2];\\n\\t\\tstk.boughtPriceShort = mock ? (stk.boughtPrice_short || 0) : stk.position[3];\\n\\t\\tcorpus += stk.positionValue();\\n\\t\\tif (stk.owned()) myStocks.push(stk);\\n\\t\\telse stk.ticksHeld = 0;\\n\\t\\tif (ticked) // Increment ticksHeld, or reset it if we have no position in this stock or reversed our position last tick.\\n\\t\\t\\tstk.ticksHeld = !stk.owned() || (priorLong > 0 && stk.sharesLong === 0) || (priorShort > 0 && stk.sharesShort === 0) ? 0 : 1 + (stk.ticksHeld || 0);\\n\\t}\\n\\tif (ticked) await updateForecast(ns, allStocks, has4s); // Logic below only required on market tick\\n\\treturn corpus;\\n}\\n\\n// Historical probability can be inferred from the number of times the stock was recently observed increasing over the total number of observations\\nconst forecast = history => history.reduce((ups, price, idx) => idx === 0 ? 0 : (history[idx - 1] > price ? ups + 1 : ups), 0) / (history.length - 1);\\n// An \\\"inversion\\\" can be detected if two probabilities are far enough apart and are within \\\"tolerance\\\" of p1 being equal to 1-p2\\nconst tol2 = inversionDetectionTolerance / 2;\\nconst detectInversion = (p1, p2) => ((p1 >= 0.5 + tol2) && (p2 <= 0.5 - tol2) && p2 <= (1 - p1) + inversionDetectionTolerance)\\n\\t/* Reverse Condition: */ || ((p1 <= 0.5 - tol2) && (p2 >= 0.5 + tol2) && p2 >= (1 - p1) - inversionDetectionTolerance);\\n\\n\\n/**\\n *\\n * @param {NS} ns\\n * @param {Object[]} allStocks\\n * @param {boolean} has4s\\n * @returns {Promise<void>}\\n */\\nasync function updateForecast(ns, allStocks, has4s) {\\n\\tconst currentHistory = allStocks[0].priceHistory.length;\\n\\tconst prepSummary = mock || (!has4s && (currentHistory < minTickHistory || allStocks.filter(stk => stk.owned()).length === 0)); // Decide whether to display the market summary table.\\n\\tconst inversionsDetected = []; // Keep track of individual stocks whose probability has inverted (45% chance of happening each \\\"cycle\\\")\\n\\tdetectedCycleTick = (detectedCycleTick + 1) % marketCycleLength; // Keep track of stock market cycle (which occurs every 75 ticks)\\n\\tfor (const stk of allStocks) {\\n\\t\\tstk.priceHistory.unshift(stk.price);\\n\\t\\tif (stk.priceHistory.length > maxTickHistory) // Limit the rolling window size\\n\\t\\t\\tstk.priceHistory.splice(maxTickHistory, 1);\\n\\t\\t// Volatility is easy - the largest observed % movement in a single tick\\n\\t\\tif (!has4s) stk.vol = stk.priceHistory.reduce((max, price, idx) => Math.max(max, idx === 0 ? 0 : Math.abs(stk.priceHistory[idx - 1] - price) / price), 0);\\n\\t\\t// We want stocks that have the best expected return, averaged over a long window for greater precision, but the game will occasionally invert probabilities\\n\\t\\t// (45% chance every 75 updates), so we also compute a near-term forecast window to allow for early-detection of inversions, so we can ditch our position.\\n\\t\\tstk.nearTermForecast = forecast(stk.priceHistory.slice(0, nearTermForecastWindowLength));\\n\\t\\tlet preNearTermWindowProb = forecast(stk.priceHistory.slice(nearTermForecastWindowLength)); // Used to detect the probability before the potential inversion event.\\n\\t\\t// Detect whether it appears as though the probability of this stock has recently undergone an inversion (i.e. prob => 1 - prob)\\n\\t\\tstk.possibleInversionDetected = has4s ? detectInversion(stk.prob, stk.lastTickProbability || stk.prob) : detectInversion(preNearTermWindowProb, stk.nearTermForecast);\\n\\t\\tstk.lastTickProbability = stk.prob;\\n\\t\\tif (stk.possibleInversionDetected) inversionsDetected.push(stk);\\n\\t}\\n\\t// Detect whether our auto-detected \\\"stock market cycle\\\" timing should be adjusted based on the number of potential inversions observed\\n\\tlet summary = '';\\n\\tif (inversionsDetected.length > 0) {\\n\\t\\tsummary += `${inversionsDetected.length} Stocks appear to be reversing their outlook: ${inversionsDetected.map(s => s.sym).join(', ')} (threshold: ${inversionAgreementThreshold})\\\\n`;\\n\\t\\tif (inversionsDetected.length >= inversionAgreementThreshold && (has4s || currentHistory >= minTickHistory)) { // We believe we have detected the stock market cycle!\\n\\t\\t\\tconst newPredictedCycleTick = has4s ? 0 : nearTermForecastWindowLength; // By the time we've detected it, we're this many ticks past the cycle start\\n\\t\\t\\tif (detectedCycleTick !== newPredictedCycleTick) {\\n\\t\\t\\t\\tns.print(`Threshold for changing predicted market cycle met (${inversionsDetected.length} >= ${inversionAgreementThreshold}). ` +\\n\\t\\t\\t\\t\\t`Changing current market tick from ${detectedCycleTick} to ${newPredictedCycleTick}.`);\\n\\t\\t\\t}\\n\\t\\t\\tmarketCycleDetected = true;\\n\\t\\t\\tdetectedCycleTick = newPredictedCycleTick;\\n\\t\\t\\t// Don't adjust this in the future unless we see another day with as much or even more agreement (capped at 14, it seems sometimes our cycles get out of sync with\\n\\t\\t\\t// actual cycles, and we need to reset our clock even after previously determining the cycle with great certainty.)\\n\\t\\t\\tinversionAgreementThreshold = Math.max(14, inversionsDetected.length);\\n\\t\\t}\\n\\t}\\n\\t// Act on any inversions (if trusted), compute the probability, and prepare the stock summary\\n\\tfor (const stk of allStocks) {\\n\\t\\t// Don't \\\"trust\\\" (act on) a detected inversion unless it's near the time when we're capable of detecting market cycle start. Avoids most false-positives.\\n\\t\\tif (stk.possibleInversionDetected && (has4s && detectedCycleTick === 0 ||\\n\\t\\t\\t(!has4s && (detectedCycleTick > nearTermForecastWindowLength / 2 - 1) &&\\n\\t\\t\\t\\t(detectedCycleTick <= nearTermForecastWindowLength + inversionLagTolerance)))) {\\n\\t\\t\\tstk.lastInversion = detectedCycleTick; // If we \\\"trust\\\" a probability inversion has occurred, probability will be calculated based on only history since the last inversion.\\n\\t\\t} else stk.lastInversion++;\\n\\t\\t// Only take the stock history since after the last inversion to compute the probability of the stock.\\n\\t\\tconst probWindowLength = Math.min(longTermForecastWindowLength, stk.lastInversion);\\n\\t\\tstk.longTermForecast = forecast(stk.priceHistory.slice(0, probWindowLength));\\n\\t\\tif (!has4s) {\\n\\t\\t\\tstk.prob = stk.longTermForecast;\\n\\t\\t\\tstk.probStdDev = Math.sqrt((stk.prob * (1 - stk.prob)) / probWindowLength);\\n\\t\\t}\\n\\t\\tconst signalStrength = 1 + (stk.bullish() ? (stk.nearTermForecast > stk.prob ? 1 : 0) + (stk.prob > 0.8 ? 1 : 0) : (stk.nearTermForecast < stk.prob ? 1 : 0) + (stk.prob < 0.2 ? 1 : 0));\\n\\t\\tif (prepSummary) { // Example: AERO  ++   Prob: 54% (t51: 54%, t10: 67%) tLast⇄:190 Vol:0.640% ER: 2.778BP Spread:1.784% ttProfit: 65 Pos: 14.7M long  (held 189 ticks)\\n\\t\\t\\tstk.debugLog = `${stk.sym.padEnd(5, ' ')} ${(stk.bullish() ? '+' : '-').repeat(signalStrength).padEnd(3)} ` +\\n\\t\\t\\t\\t`Prob:${(stk.prob * 100).toFixed(0).padStart(3)}% (t${probWindowLength.toFixed(0).padStart(2)}:${(stk.longTermForecast * 100).toFixed(0).padStart(3)}%, ` +\\n\\t\\t\\t\\t`t${Math.min(stk.priceHistory.length, nearTermForecastWindowLength).toFixed(0).padStart(2)}:${(stk.nearTermForecast * 100).toFixed(0).padStart(3)}%) ` +\\n\\t\\t\\t\\t`tLast⇄:${(stk.lastInversion + 1).toFixed(0).padStart(3)} Vol:${formatPercentage(stk.vol)} ER:${formatMoney(ns, stk.expectedReturn()).padStart(8)} ` +\\n\\t\\t\\t\\t`Spread:${formatPercentage(stk.spread_pct)} ttProfit:${stk.blackoutWindow().toFixed(0).padStart(3)}`;\\n\\t\\t\\tif (stk.owned()) stk.debugLog += ` Pos: ${formatMoney(ns, stk.ownedShares())} (${stk.ownedShares() === stk.maxShares ? 'max' :\\n\\t\\t\\t\\tformatPercentage(stk.ownedShares() / stk.maxShares)}) ${stk.sharesLong > 0 ? 'long ' : 'short'} (held ${stk.ticksHeld} ticks)`;\\n\\t\\t\\tif (stk.possibleInversionDetected) stk.debugLog += ' ⇄⇄⇄';\\n\\t\\t}\\n\\t}\\n\\t// Print a summary of stocks as of this most recent tick (if enabled)\\n\\tif (prepSummary) {\\n\\t\\tsummary += `Market day ${detectedCycleTick + 1}${marketCycleDetected ? '' : '?'} of ${marketCycleLength} (${marketCycleDetected ? (100 * inversionAgreementThreshold / 19).toPrecision(2) : '0'}% certain) ` +\\n\\t\\t\\t`Current Stock Summary and Pre-4S Forecasts (by best payoff-time):\\\\n` + allStocks.sort(purchaseOrder).map(s => s.debugLog).join('\\\\n');\\n\\t\\tns.print(summary);\\n\\t}\\n\\t// Write out a file of stock information so that other scripts can make use of this (e.g. hacks and grows can manipulate the stock market)\\n\\tconst long = [];\\n\\tconst short = [];\\n\\tallStocks.forEach(stk => {\\n\\t\\tconst symbol = symbolToServer(stk.sym);\\n\\t\\tif (symbol) {\\n\\t\\t\\tif (stk.sharesLong > 0) long.push(symbol);\\n\\t\\t\\tif (stk.sharesShort > 0) short.push(symbol);\\n\\t\\t}\\n\\t});\\n\\tawait modifyFile(ns, portNumber, {long: long, short: short});\\n}\\n\\n/**\\n * Automatically buys either a short or long position depending on the outlook of the stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @param {amount} sharesBought\\n * @returns {number}\\n */\\nfunction doBuy(ns, stk, sharesBought) {\\n\\t// We include -2*commission in the \\\"holdings value\\\" of our stock, but if we make repeated purchases of the same stock, we have to track\\n\\t// the additional commission somewhere. So only subtract it from our running profit if this isn't our first purchase of this symbol\\n\\tif (stk.owned()) totalProfit -= commission;\\n\\tlet long = stk.bullish();\\n\\tlet expectedPrice = long ? stk.ask_price : stk.bid_price; // Depends on whether we will be buying a long or short position\\n\\tlet price;\\n\\ttry {\\n\\t\\tprice = mock ? expectedPrice : long ? ns.stock.buyStock(stk.sym, sharesBought) : ns.stock.buyShort(stk.sym, sharesBought);\\n\\t} catch (err) {\\n\\t\\tif (long) throw err;\\n\\t\\tprintBoth(ns, `WARNING: Failed to short ${stk.sym} (Shorts not available?). Disabling shorts...`);\\n\\t\\tdisableShorts = true;\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tns.print(`INFO: ${long ? 'Bought ' : 'Shorted'} ${formatNumber(ns, sharesBought).padStart(5)}${stk.maxShares === sharesBought + stk.ownedShares() ? ' (max shares)' : ''} ` +\\n\\t\\t`${stk.sym.padEnd(5)} @ ${formatMoney(ns, price).padStart(9)} for ${formatMoney(ns, sharesBought * price).padStart(9)} (Spread: ${formatPercentage(stk.spread_pct)} ` +\\n\\t\\t`ER:${formatMoney(ns, stk.expectedReturn()).padStart(8)}) Ticks to Profit: ${stk.timeToCoverTheSpread().toFixed(2)}`);\\n\\t// The rest of this work is for troubleshooting / mock-mode purposes\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to ${long ? 'buy' : 'short'} ${stk.sym} @ ${formatMoney(ns, expectedPrice)} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tprintBoth(ns, `WARNING: ${long ? 'Bought' : 'Shorted'} ${stk.sym} @ ${formatMoney(ns, price)} but expected ${formatMoney(ns, expectedPrice)} (spread: ${formatMoney(ns, stk.spread)})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, short returns \\\"price\\\" instead of \\\"bit_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (mock && long) stk.boughtPrice = (stk.boughtPrice * stk.sharesLong + price * sharesBought) / (stk.sharesLong + sharesBought);\\n\\tif (mock && !long) stk.boughtPriceShort = (stk.boughtPriceShort * stk.sharesShort + price * sharesBought) / (stk.sharesShort + sharesBought);\\n\\tif (long) stk.sharesLong += sharesBought; else stk.sharesShort += sharesBought; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\treturn sharesBought * price + commission; // Return the amount spent on the transaction, so it can be subtracted from our cash on hand\\n}\\n\\n/**\\n * Sell our current position in this stock\\n *\\n * @param {NS} ns\\n * @param {Object} stk\\n * @returns {number}\\n */\\nfunction doSellAll(ns, stk) {\\n\\tlet long = stk.sharesLong > 0;\\n\\tif (long && stk.sharesShort > 0) // Detect any issues here - we should always sell one before buying the other.\\n\\t\\tprintBoth(ns, `ERROR: Somehow ended up both ${stk.sharesShort} short and ${stk.sharesLong} long on ${stk.sym}`);\\n\\tlet expectedPrice = long ? stk.bid_price : stk.ask_price; // Depends on whether we will be selling a long or short position\\n\\tlet sharesSold = long ? stk.sharesLong : stk.sharesShort;\\n\\tlet price = mock ? expectedPrice : long ? ns.stock.sellStock(stk.sym, sharesSold) : ns.stock.sellShort(stk.sym, sharesSold);\\n\\tconst profit = (long ? stk.sharesLong * (price - stk.boughtPrice) : stk.sharesShort * (stk.boughtPriceShort - price)) - 2 * commission;\\n\\tns.print(`${profit > 0 ? 'SUCCESS' : 'WARNING'}: Sold all ${formatMoney(ns, sharesSold).padStart(5)} ${stk.sym.padEnd(5)} ${long ? ' long' : 'short'} positions ` +\\n\\t\\t`@ ${formatMoney(ns, price).padStart(9)} for a ` + (profit > 0 ? `PROFIT of ${formatMoney(ns, profit).padStart(9)}` : ` LOSS of ${formatMoney(ns, -profit).padStart(9)}`) + ` after ${stk.ticksHeld} ticks`);\\n\\tif (price === 0) {\\n\\t\\tprintBoth(ns, `ERROR: Failed to sell ${sharesSold} ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(ns, expectedPrice)} - 0 was returned`);\\n\\t\\treturn 0;\\n\\t} else if (price !== expectedPrice) {\\n\\t\\tns.print(`WARNING: Sold ${stk.sym} ${long ? 'shares' : 'shorts'} @ ${formatMoney(ns, price)} but expected ${formatMoney(ns, expectedPrice)} (spread: ${formatMoney(ns, stk.spread)})`);\\n\\t\\tprice = expectedPrice; // Known Bitburner bug for now, sellSort returns \\\"price\\\" instead of \\\"ask_price\\\". Correct this so running profit calculations are correct.\\n\\t}\\n\\tif (long) stk.sharesLong -= sharesSold;\\n\\telse stk.sharesShort -= sharesSold; // Maintained for mock mode, otherwise, redundant (overwritten at next refresh)\\n\\ttotalProfit += profit;\\n\\treturn price * sharesSold - commission; // Return the amount of money received from the transaction\\n}\\n\\n/**\\n *\\n * @returns {*}\\n */\\nfunction initializeHud() {\\n\\tconst d = eval('document');\\n\\tlet htmlDisplay = d.getElementById('stock-display-1');\\n\\tif (htmlDisplay !== null) return htmlDisplay;\\n\\t// Get the custom display elements in HUD.\\n\\tlet customElements = d.getElementById('overview-extra-hook-0').parentElement.parentElement;\\n\\t// Make a clone of the hook for extra hud elements, and move it up under money\\n\\tlet stockValueTracker = customElements.cloneNode(true);\\n\\t// Remove any nested elements created by stats.js\\n\\tstockValueTracker.querySelectorAll('p > p').forEach(e => e.parentElement.removeChild(e));\\n\\t// Change ids since duplicate ids are invalid\\n\\tstockValueTracker.querySelectorAll('p').forEach((e, i) => e.id = `stock-display-${i}`);\\n\\t// Get out output element\\n\\thtmlDisplay = stockValueTracker.querySelector('#stock-display-1');\\n\\t// Display label and default value\\n\\tstockValueTracker.querySelectorAll('p')[0].innerText = 'Stock';\\n\\thtmlDisplay.innerText = '$0.000 ';\\n\\t// Insert our element right after Money\\n\\tcustomElements.parentElement.insertBefore(stockValueTracker, customElements.parentElement.childNodes[2]);\\n\\treturn htmlDisplay;\\n}\",\"filename\":\"stock-market/autopilot.js\",\"server\":\"home\"}}],[\"tools/analyze-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatPercentage, formatRam, formatTime} from '/utils.js';\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst usedRam = ns.getServerUsedRam(server);\\n\\tconst maxRam = ns.getServerMaxRam(server);\\n\\tconst money = ns.getServerMoneyAvailable(server);\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\tconst sec = ns.getServerSecurityLevel(server);\\n\\n\\tns.tprint(`\\n${server}:\\n    RAM        : ${formatRam(ns, usedRam)} / ${formatRam(ns, maxRam)} (${formatPercentage(usedRam / maxRam)})\\n    $          : ${formatMoney(ns, money)} / ${formatMoney(ns, maxMoney)} (${formatPercentage(money / maxMoney)})\\n    security   : ${sec.toFixed(2)} (min: ${minSec.toFixed(2)})\\n    growth     : ${ns.getServerGrowth(server)}\\n    hack time  : ${formatTime(ns, ns.getHackTime(server))}\\n    grow time  : ${formatTime(ns, ns.getGrowTime(server))}\\n    weaken time: ${formatTime(ns, ns.getWeakenTime(server))}\\n    grow x2    : ${Math.ceil(ns.growthAnalyze(server, 2))} threads\\n    grow x3    : ${Math.ceil(ns.growthAnalyze(server, 3))} threads\\n    grow x4    : ${Math.ceil(ns.growthAnalyze(server, 4))} threads\\n    hack 10%   : ${Math.floor(0.1 / ns.hackAnalyze(server))} threads\\n    hack 25%   : ${Math.floor(0.25 / ns.hackAnalyze(server))} threads\\n    hack 50%   : ${Math.floor(0.5 / ns.hackAnalyze(server))} threads\\n    hackChance : ${formatPercentage(ns.hackAnalyzeChance(server))}\\n`);\\n}\",\"filename\":\"tools/analyze-server.js\",\"server\":\"home\"}}],[\"tools/bitnode-multipliers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (const [mult, val] of Object.entries(ns.getBitNodeMultipliers())) ns.tprint(`${mult}: ${val}`);\\n}\",\"filename\":\"tools/bitnode-multipliers.js\",\"server\":\"home\"}}],[\"tools/connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {routeFinder} from '/utils.js';\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst server = ns.args[0];\\n\\tconst route = routeFinder(ns, server);\\n\\tif (route) for (const serv of route) ns.singularity.connect(serv);\\n}\",\"filename\":\"tools/connect.js\",\"server\":\"home\"}}],[\"tools/cost-pserv.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst cost = ns.getPurchasedServerCost(Math.pow(2, ns.args[0]));\\n\\tconst purchasedServerLimit = ns.getBitNodeMultipliers().PurchasedServerLimit;\\n\\tif (!purchasedServerLimit) {\\n\\t\\tns.tprint(`Cannot purchase servers in this Bitnode...`);\\n\\t\\treturn;\\n\\t}\\n\\tconst maxServers = Math.floor(purchasedServerLimit * 25);\\n\\tconst costMax = cost * maxServers;\\n\\tns.tprint(`1 Server: ${formatMoney(ns, cost)}, ${maxServers} servers: ${formatMoney(ns, costMax)}`);\\n}\",\"filename\":\"tools/cost-pserv.js\",\"server\":\"home\"}}],[\"tools/favor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(1 + Math.floor(Math.log((ns.args[0] + 25000) / 25500) / Math.log(1.02)));\\n}\",\"filename\":\"tools/favor.js\",\"server\":\"home\"}}],[\"tools/get-all-text.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getServers} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (const server of getServers(ns))\\n\\t\\tfor (const file of ns.ls(server))\\n\\t\\t\\tif (file.endsWith('.lit') || file.endsWith('.txt')) await ns.scp(file, 'home', server);\\n}\",\"filename\":\"tools/get-all-text.js\",\"server\":\"home\"}}],[\"tools/hackable-servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatNumber, getAccessibleServers, getOptimalHackable, targetCost} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['cores', 1],\\n\\t['verbose', false]\\n];\\n\\nexport function autocomplete(data) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tconst servers = getAccessibleServers(ns);\\n\\tconst hackable = getOptimalHackable(ns, servers);\\n\\tfor (let [i, server] of hackable.entries()) {\\n\\t\\tconst growth = ns.getServerGrowth(server);\\n\\t\\tconst money = formatMoney(ns, ns.getServerMaxMoney(server));\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst cost = targetCost(ns, server, options.cores);\\n\\t\\tlet string = `${i + 1}: Server: ${server}`;\\n\\t\\tif (options.verbose) string += `, Maximum Money: ${money}, Growth: ${growth}, Min Security: ${minSec}`;\\n\\t\\tfor (let [j, c] of cost.entries()) string += `, Cost ${j + 1}: ${formatNumber(ns, c)}`;\\n\\t\\tns.tprintf(string);\\n\\t}\\n}\",\"filename\":\"tools/hackable-servers.js\",\"server\":\"home\"}}],[\"tools/karma.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// noinspection JSUnresolvedFunction,JSUnresolvedVariable\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(ns.heart.break().toFixed(2));\\n}\",\"filename\":\"tools/karma.js\",\"server\":\"home\"}}],[\"tools/monitor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatMoney, formatPercentage, formatTime} from '/utils.js';\\n\\nexport function autocomplete(data) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\t// noinspection InfiniteLoopJS\\n\\twhile (true) {\\n\\t\\tconst server = ns.args[0];\\n\\t\\tlet money = ns.getServerMoneyAvailable(server);\\n\\t\\tif (money === 0) money = 1;\\n\\t\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\t\\tconst minSec = ns.getServerMinSecurityLevel(server);\\n\\t\\tconst sec = ns.getServerSecurityLevel(server);\\n\\t\\tns.clearLog(server);\\n\\t\\tns.print(`${server} :`);\\n\\t\\tns.print(` $        : ${formatMoney(ns, money)} / ${formatMoney(ns, maxMoney)} (${formatPercentage(money / maxMoney)})`);\\n\\t\\tns.print(` security : +${sec - minSec}`);\\n\\t\\tns.print(` hack     : ${formatTime(ns, ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, money))})`);\\n\\t\\tns.print(` grow     : ${formatTime(ns, ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n\\t\\tns.print(` weaken   : ${formatTime(ns, ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n\\t\\tawait ns.sleep(100);\\n\\t}\\n}\",\"filename\":\"tools/monitor.js\",\"server\":\"home\"}}],[\"tools/player.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (let [key, val] of Object.entries(ns.getPlayer())) {\\n\\t\\tif (key === 'jobs') {\\n\\t\\t\\tns.tprint('jobs:');\\n\\t\\t\\tfor (const [i, j] of Object.entries(val)) ns.tprintf(`\\\\t${i}: ${j}`);\\n\\t\\t} else ns.tprint(`${key}: ${val}`);\\n\\t}\\n}\",\"filename\":\"tools/player.js\",\"server\":\"home\"}}],[\"tools/pserv-buyer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {scriptsToCopy} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst power = ns.args[0];\\n\\tconst targetRam = Math.pow(2, power);\\n\\tfor (let i = 0; i < ns.getPurchasedServerLimit(); i++) {\\n\\t\\tconst server = 'pserv-' + i;\\n\\t\\tconst cost = ns.getPurchasedServerCost(targetRam);\\n\\t\\twhile (ns.getServerMoneyAvailable('home') < cost) {\\n\\t\\t\\tawait ns.sleep(1000);\\n\\t\\t}\\n\\t\\tif (ns.serverExists(server)) {\\n\\t\\t\\tif (ns.getServerMaxRam(server) < targetRam) {\\n\\t\\t\\t\\tns.killall(server);\\n\\t\\t\\t\\tns.deleteServer(server);\\n\\t\\t\\t} else continue;\\n\\t\\t}\\n\\t\\tns.tprint(`Buying server: ${server}, target RAM: ${targetRam}`);\\n\\t\\tns.purchaseServer(server, targetRam);\\n\\t\\tawait ns.scp(scriptsToCopy(), server, 'home');\\n\\t}\\n}\",\"filename\":\"tools/pserv-buyer.js\",\"server\":\"home\"}}],[\"tools/reputation.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {formatNumber} from '/utils.js';\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tns.tprint(formatNumber(ns, Math.ceil(25500 * Math.exp(Math.log(1.02) * (ns.args[0] - 1)) - 25000)));\\n}\",\"filename\":\"tools/reputation.js\",\"server\":\"home\"}}],[\"tools/reset-port.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {resetData} from '/utils.js';\\n\\nconst argsSchema = [\\n\\t['all', false]\\n];\\n\\n// noinspection JSUnusedLocalSymbols\\nexport function autocomplete(data, args) {\\n\\tdata.flags(argsSchema);\\n\\treturn [];\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @return {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tconst options = ns.flags(argsSchema);\\n\\tif (!options.all && options._.length === 0) throw new Error(`Must specify which port(s) or --all`);\\n\\tif (options.all) for (let i = 1; i <= 20; i++) await resetData(ns, i);\\n\\telse for (let i of options._) await resetData(ns, i);\\n}\",\"filename\":\"tools/reset-port.js\",\"server\":\"home\"}}],[\"tools/copy-all-scripts.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export function autocomplete(data) {\\n\\treturn data.servers;\\n}\\n\\n/**\\n *\\n * @param {NS} ns\\n * @returns {Promise<void>}\\n */\\nexport async function main(ns) {\\n\\tfor (const script of ns.read('/build/scripts.txt').split('\\\\n'))\\n\\t\\tawait ns.scp(script.includes('/') ? '/' + script : script, ns.args[0], 'home');\\n}\",\"filename\":\"tools/copy-all-scripts.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\",\"server12\",\"server13\",\"server14\",\"server15\",\"server16\",\"server17\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"contract.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contract.txt\",\"text\":\"\"}}],[\"build/scripts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"build/scripts.txt\",\"text\":\"cortex.js\\nutils.js\\naugmentations/install.js\\naugmentations/lister.js\\naugmentations/purchase.js\\naugmentations/utils.js\\nbladeburner/autopilot.js\\nbuild/download-bitburner-scripts.js\\nbuild/script-remover.js\\nbuild/scripts.txt\\nbuild/update.js\\ncompany/work.js\\ncontracts/contractor.js\\ncontracts/enable-contractor.js\\ncontracts/disable-contractor.js\\ncorporation/autopilot.js\\ncrime/automate.js\\ndaemons/charge.js\\ndaemons/grow.js\\ndaemons/hack.js\\ndaemons/share.js\\ndaemons/weaken.js\\nexploits/bypass.js\\nexploits/dev-menu.js\\nexploits/edit-save-file.js\\nexploits/n00dles.js\\nexploits/prototype-tampering.js\\nexploits/rainbow.js\\nexploits/time-compression.js\\nexploits/unclickable.js\\nexploits/undocumented-function-call.js\\nfactions/join-factions.js\\nfactions/share.js\\nfactions/work.js\\ngang/manager.js\\nhacking/backdoor.js\\nhacking/batcher.js\\nhacknet/hash-spender.js\\nhacknet/manager.js\\nplayer/create-programs.js\\nplayer/hacking-farm.js\\nplayer/gym.js\\nplayer/intelligence-farm.js\\nplayer/university.js\\nplayer/upgrade-home-cores.js\\nplayer/upgrade-home-ram.js\\nsleeve/autopilot.js\\nsleeve/company.js\\nsleeve/crime.js\\nsleeve/faction.js\\nsleeve/gym.js\\nsleeve/reset.js\\nsleeve/shock-recovery.js\\nsleeve/synchronize.js\\nsleeve/university.js\\nsleeve/utils.js\\nstanek/accept.js\\nstanek/controller.js\\nstanek/reset-charges.js\\nstanek/save.js\\nstanek/set.js\\nstanek/utils.js\\nstock-market/autopilot.js\\ntexts/augmentations-list.txt\\ntexts/bitnode-order.txt\\ntools/analyze-server.js\\ntools/bitnode-multipliers.js\\ntools/connect.js\\ntools/cost-pserv.js\\ntools/favor.js\\ntools/get-all-text.js\\ntools/hackable-servers.js\\ntools/karma.js\\ntools/monitor.js\\ntools/player.js\\ntools/pserv-buyer.js\\ntools/reputation.js\\ntools/reset-port.js\\ntools/copy-all-scripts.js\"}}],[\"texts/augmentations-list.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"texts/augmentations-list.txt\",\"text\":\"\\n\\n----- ECorp -----\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ECorp HVMind Implant ---\\nhacking_grow_mult: 3\\nPrice: $5.500b\\nRep: 1.500m\\n\\n\\n----- MegaCorp -----\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- CordiARC Fusion Reactor ---\\nstrength_mult: 1.35\\ndefense_mult: 1.35\\ndexterity_mult: 1.35\\nagility_mult: 1.35\\nstrength_exp_mult: 1.35\\ndefense_exp_mult: 1.35\\ndexterity_exp_mult: 1.35\\nagility_exp_mult: 1.35\\nPrice: $5.000b\\nRep: 1.125m\\n\\n\\n----- Blade Industries -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Neotra ---\\nstrength_mult: 1.55\\ndefense_mult: 1.55\\nPrice: $2.875b\\nRep: 562.500k\\n\\n\\n----- Clarke Incorporated -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neuronal Densification ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 187.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- nextSENS Gene Modification ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nPrice: $1.925b\\nRep: 437.500k\\n\\n\\n----- OmniTek Incorporated -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- OmniTek InfoLoad ---\\nhacking_mult: 1.2\\nhacking_exp_mult: 1.25\\nPrice: $2.875b\\nRep: 625.000k\\n\\n\\n----- Four Sigma -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n\\n----- KuaiGong International -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- Photosynthetic Cells ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\nagility_mult: 1.4\\nPrice: $2.750b\\nRep: 562.500k\\n\\n\\n----- CyberSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n\\n----- BitRunners -----\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Neural Accelerator ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.15\\nhacking_money_mult: 1.2\\nPrice: $1.750b\\nRep: 200.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen V ---\\nhacking_mult: 1.3\\nhacking_money_mult: 1.25\\nhacking_grow_mult: 1.75\\nPrice: $2.250b\\nRep: 250.000k\\nPrereq: Cranial Signal Processors - Gen IV\\nPrereq: Cranial Signal Processors - Gen III\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- BitRunners Neurolink ---\\nhacking_mult: 1.15\\nhacking_exp_mult: 1.2\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nPrice: $4.375b\\nRep: 875.000k\\n\\n\\n----- Bachman & Associates -----\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- SmartJaw ---\\ncharisma_mult: 1.5\\ncharisma_exp_mult: 1.5\\ncompany_rep_mult: 1.25\\nfaction_rep_mult: 1.25\\nPrice: $2.750b\\nRep: 375.000k\\n\\n\\n----- Fulcrum Secret Technologies -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- PC Direct-Neural Interface NeuroNet Injector ---\\nhacking_mult: 1.1\\nhacking_speed_mult: 1.05\\ncompany_rep_mult: 2\\nPrice: $7.500b\\nRep: 1.500m\\nPrereq: PC Direct-Neural Interface\\n\\n\\n----- NiteSec -----\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Neural-Retention Enhancement ---\\nhacking_exp_mult: 1.25\\nPrice: $250.000m\\nRep: 20.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- CRTX42-AA Gene Modification ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nPrice: $225.000m\\nRep: 45.000k\\n\\n\\n----- The Black Hand -----\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- The Black Hand ---\\nhacking_mult: 1.1\\nstrength_mult: 1.15\\ndexterity_mult: 1.15\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.1\\nPrice: $550.000m\\nRep: 100.000k\\n\\n\\n----- Slum Snakes -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Graphene Bionic Spine Upgrade ---\\nstrength_mult: 1.6\\ndefense_mult: 1.6\\ndexterity_mult: 1.6\\nagility_mult: 1.6\\nPrice: $6.000b\\nRep: 1.625m\\nPrereq: Bionic Spine\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Graphene Bionic Legs Upgrade ---\\nagility_mult: 2.5\\nPrice: $4.500b\\nRep: 750.000k\\nPrereq: Bionic Legs\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- BitWire ---\\nhacking_mult: 1.05\\nPrice: $10.000m\\nRep: 3.750k\\n\\n--- Artificial Bio-neural Network Implant ---\\nhacking_mult: 1.12\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.15\\nPrice: $3.000b\\nRep: 275.000k\\n\\n--- Artificial Synaptic Potentiation ---\\nhacking_exp_mult: 1.05\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $80.000m\\nRep: 6.250k\\n\\n--- Enhanced Myelin Sheathing ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.1\\nhacking_speed_mult: 1.03\\nPrice: $1.375b\\nRep: 100.000k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Cranial Signal Processors - Gen I ---\\nhacking_mult: 1.05\\nhacking_speed_mult: 1.01\\nPrice: $70.000m\\nRep: 10.000k\\n\\n--- Cranial Signal Processors - Gen II ---\\nhacking_mult: 1.07\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.02\\nPrice: $125.000m\\nRep: 18.750k\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen III ---\\nhacking_mult: 1.09\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.15\\nPrice: $550.000m\\nRep: 50.000k\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Cranial Signal Processors - Gen IV ---\\nhacking_speed_mult: 1.02\\nhacking_money_mult: 1.2\\nhacking_grow_mult: 1.25\\nPrice: $1.100b\\nRep: 125.000k\\nPrereq: Cranial Signal Processors - Gen III\\nPrereq: Cranial Signal Processors - Gen II\\nPrereq: Cranial Signal Processors - Gen I\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- FocusWire ---\\nhacking_exp_mult: 1.05\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\ncharisma_exp_mult: 1.05\\ncompany_rep_mult: 1.1\\nwork_money_mult: 1.2\\nPrice: $900.000m\\nRep: 75.000k\\n\\n--- PC Direct-Neural Interface ---\\nhacking_mult: 1.08\\ncompany_rep_mult: 1.3\\nPrice: $3.750b\\nRep: 375.000k\\n\\n--- PC Direct-Neural Interface Optimization Submodule ---\\nhacking_mult: 1.1\\ncompany_rep_mult: 1.75\\nPrice: $4.500b\\nRep: 500.000k\\nPrereq: PC Direct-Neural Interface\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- Neurotrainer II ---\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- HyperSight Corneal Implant ---\\ndexterity_mult: 1.4\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.750b\\nRep: 150.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- SmartSonar Implant ---\\ndexterity_mult: 1.1\\ndexterity_exp_mult: 1.15\\ncrime_money_mult: 1.25\\nPrice: $75.000m\\nRep: 22.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n\\n----- Tetrads -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- LuminCloaking-V1 Skin Implant ---\\nagility_mult: 1.05\\ncrime_money_mult: 1.1\\nPrice: $5.000m\\nRep: 1.500k\\n\\n--- LuminCloaking-V2 Skin Implant ---\\ndefense_mult: 1.1\\nagility_mult: 1.1\\ncrime_money_mult: 1.25\\nPrice: $30.000m\\nRep: 5.000k\\nPrereq: LuminCloaking-V1 Skin Implant\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Bionic Arms ---\\nstrength_mult: 1.3\\ndexterity_mult: 1.3\\nPrice: $275.000m\\nRep: 62.500k\\n\\n\\n----- Speakers for the Dead -----\\n\\n--- Unstable Circadian Modulator ---\\nstrength_mult: 1.25\\ndefense_mult: 1.25\\ndexterity_mult: 1.25\\nagility_mult: 1.25\\nstrength_exp_mult: 2\\ndefense_exp_mult: 2\\ndexterity_exp_mult: 2\\nagility_exp_mult: 2\\nPrice: $5.000b\\nRep: 362.500k\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Graphene BrachiBlades Upgrade ---\\nstrength_mult: 1.4\\ndefense_mult: 1.4\\ncrime_money_mult: 1.3\\ncrime_success_mult: 1.1\\nPrice: $2.500b\\nRep: 225.000k\\nPrereq: BrachiBlades\\n\\n\\n----- The Dark Army -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Graphene Bionic Arms Upgrade ---\\nstrength_mult: 1.85\\ndexterity_mult: 1.85\\nPrice: $3.750b\\nRep: 500.000k\\nPrereq: Bionic Arms\\n\\n\\n----- The Syndicate -----\\n\\n--- HemoRecirculator ---\\nstrength_mult: 1.08\\ndefense_mult: 1.08\\ndexterity_mult: 1.08\\nagility_mult: 1.08\\nPrice: $45.000m\\nRep: 10.000k\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Bionic Spine ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ndexterity_mult: 1.15\\nagility_mult: 1.15\\nPrice: $125.000m\\nRep: 45.000k\\n\\n--- Bionic Legs ---\\nagility_mult: 1.6\\nPrice: $375.000m\\nRep: 150.000k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- The Shadow's Simulacrum ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nPrice: $400.000m\\nRep: 37.500k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- BrachiBlades ---\\nstrength_mult: 1.15\\ndefense_mult: 1.15\\ncrime_money_mult: 1.15\\ncrime_success_mult: 1.1\\nPrice: $90.000m\\nRep: 12.500k\\n\\n\\n----- Silhouette -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- TITN-41 Gene-Modification Injection ---\\ncharisma_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $190.000m\\nRep: 25.000k\\n\\n--- ADR-V2 Pheromone Gene ---\\ncompany_rep_mult: 1.2\\nfaction_rep_mult: 1.2\\nPrice: $550.000m\\nRep: 62.500k\\n\\n\\n----- Tian Di Hui -----\\n\\n--- Nanofiber Weave ---\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\nPrice: $125.000m\\nRep: 37.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Speech Enhancement ---\\ncharisma_mult: 1.1\\ncompany_rep_mult: 1.1\\nPrice: $12.500m\\nRep: 2.500k\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Social Negotiation Assistant (S.N.A) ---\\ncompany_rep_mult: 1.15\\nfaction_rep_mult: 1.15\\nwork_money_mult: 1.1\\nPrice: $30.000m\\nRep: 6.250k\\n\\n--- Neuroreceptor Management Implant ---\\nSpecial\\nPrice: $550.000m\\nRep: 75.000k\\n\\n\\n----- Netburners -----\\n\\n--- Hacknet Node CPU Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.15\\nhacknet_node_purchase_cost_mult: 0.85\\nPrice: $11.000m\\nRep: 3.750k\\n\\n--- Hacknet Node Cache Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_level_cost_mult: 0.85\\nPrice: $5.500m\\nRep: 2.500k\\n\\n--- Hacknet Node NIC Architecture Neural-Upload ---\\nhacknet_node_money_mult: 1.1\\nhacknet_node_purchase_cost_mult: 0.9\\nPrice: $4.500m\\nRep: 1.875k\\n\\n--- Hacknet Node Kernel Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.25\\nPrice: $40.000m\\nRep: 7.500k\\n\\n--- Hacknet Node Core Direct-Neural Interface ---\\nhacknet_node_money_mult: 1.45\\nPrice: $60.000m\\nRep: 12.500k\\n\\n\\n----- Aevum -----\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Synaptic Enhancement Implant ---\\nhacking_speed_mult: 1.03\\nPrice: $7.500m\\nRep: 2.000k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Neurotrainer I ---\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $4.000m\\nRep: 1.000k\\n\\n--- PCMatrix ---\\ncharisma_mult: 1.0777\\ncharisma_exp_mult: 1.0777\\ncompany_rep_mult: 1.0777\\nfaction_rep_mult: 1.0777\\ncrime_money_mult: 1.0777\\ncrime_success_mult: 1.0777\\nwork_money_mult: 1.777\\nPrice: $2.000b\\nRep: 100.000k\\n\\n\\n----- Sector-12 -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Augmented Targeting II ---\\ndexterity_mult: 1.2\\nPrice: $42.500m\\nRep: 8.750k\\nPrereq: Augmented Targeting I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- CashRoot Starter Kit ---\\nSpecial\\nPrice: $125.000m\\nRep: 12.500k\\n\\n\\n----- Chongqing -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- Neuregen Gene Modification ---\\nhacking_exp_mult: 1.4\\nPrice: $375.000m\\nRep: 37.500k\\n\\n\\n----- New Tokyo -----\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- DataJack ---\\nhacking_money_mult: 1.25\\nPrice: $450.000m\\nRep: 112.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- NutriGen Implant ---\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\nPrice: $2.500m\\nRep: 6.250k\\n\\n\\n----- Ishima -----\\n\\n--- Augmented Targeting I ---\\ndexterity_mult: 1.1\\nPrice: $15.000m\\nRep: 5.000k\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- INFRARET Enhancement ---\\ndexterity_mult: 1.1\\ncrime_money_mult: 1.1\\ncrime_success_mult: 1.25\\nPrice: $30.000m\\nRep: 7.500k\\n\\n\\n----- Volhaven -----\\n\\n--- Combat Rib I ---\\nstrength_mult: 1.1\\ndefense_mult: 1.1\\nPrice: $23.750m\\nRep: 7.500k\\n\\n--- Combat Rib II ---\\nstrength_mult: 1.14\\ndefense_mult: 1.14\\nPrice: $65.000m\\nRep: 18.750k\\nPrereq: Combat Rib I\\n\\n--- Wired Reflexes ---\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\nPrice: $2.500m\\nRep: 1.250k\\n\\n--- Speech Processor Implant ---\\ncharisma_mult: 1.2\\nPrice: $50.000m\\nRep: 7.500k\\n\\n--- Neuralstimulator ---\\nhacking_exp_mult: 1.12\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.02\\nPrice: $3.000b\\nRep: 50.000k\\n\\n--- Nuoptimal Nootropic Injector Implant ---\\ncompany_rep_mult: 1.2\\nPrice: $20.000m\\nRep: 5.000k\\n\\n--- DermaForce Particle Barrier ---\\ndefense_mult: 1.4\\nPrice: $50.000m\\nRep: 15.000k\\n\\n\\n----- NWO -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Enhanced Social Interaction Implant ---\\ncharisma_mult: 1.6\\ncharisma_exp_mult: 1.6\\nPrice: $1.375b\\nRep: 375.000k\\n\\n--- Embedded Netburner Module ---\\nhacking_mult: 1.08\\nPrice: $250.000m\\nRep: 15.000k\\n\\n--- Embedded Netburner Module Core Implant ---\\nhacking_mult: 1.07\\nhacking_exp_mult: 1.07\\nhacking_chance_mult: 1.03\\nhacking_speed_mult: 1.03\\nhacking_money_mult: 1.1\\nPrice: $2.500b\\nRep: 175.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V2 Upgrade ---\\nhacking_mult: 1.08\\nhacking_exp_mult: 1.15\\nhacking_chance_mult: 1.05\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.3\\nPrice: $4.500b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- ADR-V1 Pheromone Gene ---\\ncompany_rep_mult: 1.1\\nfaction_rep_mult: 1.1\\nPrice: $17.500m\\nRep: 3.750k\\n\\n--- Neurotrainer III ---\\nhacking_exp_mult: 1.2\\nstrength_exp_mult: 1.2\\ndefense_exp_mult: 1.2\\ndexterity_exp_mult: 1.2\\nagility_exp_mult: 1.2\\ncharisma_exp_mult: 1.2\\nPrice: $130.000m\\nRep: 25.000k\\n\\n--- Power Recirculation Core ---\\nhacking_mult: 1.05\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nagility_mult: 1.05\\ncharisma_mult: 1.05\\nhacking_exp_mult: 1.1\\nstrength_exp_mult: 1.1\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nagility_exp_mult: 1.1\\ncharisma_exp_mult: 1.1\\nPrice: $180.000m\\nRep: 25.000k\\n\\n--- Xanipher ---\\nhacking_mult: 1.2\\nstrength_mult: 1.2\\ndefense_mult: 1.2\\ndexterity_mult: 1.2\\nagility_mult: 1.2\\ncharisma_mult: 1.2\\nhacking_exp_mult: 1.15\\nstrength_exp_mult: 1.15\\ndefense_exp_mult: 1.15\\ndexterity_exp_mult: 1.15\\nagility_exp_mult: 1.15\\ncharisma_exp_mult: 1.15\\nPrice: $4.250b\\nRep: 875.000k\\n\\n--- Hydroflame Left Arm ---\\nstrength_mult: 2.7\\nPrice: $2.500t\\nRep: 1.250m\\n\\n\\n----- The Covenant -----\\n\\n--- Augmented Targeting III ---\\ndexterity_mult: 1.3\\nPrice: $115.000m\\nRep: 27.500k\\nPrereq: Augmented Targeting II\\nPrereq: Augmented Targeting I\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- Combat Rib III ---\\nstrength_mult: 1.18\\ndefense_mult: 1.18\\nPrice: $120.000m\\nRep: 35.000k\\nPrereq: Combat Rib II\\nPrereq: Combat Rib I\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Graphene Bone Lacings ---\\nstrength_mult: 1.7\\ndefense_mult: 1.7\\nPrice: $4.250b\\nRep: 1.125m\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- SPTN-97 Gene Modification ---\\nhacking_mult: 1.15\\nstrength_mult: 1.75\\ndefense_mult: 1.75\\ndexterity_mult: 1.75\\nagility_mult: 1.75\\nPrice: $4.875b\\nRep: 1.250m\\n\\n\\n----- Daedalus -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- The Red Pill ---\\nSpecial\\nPrice: $0.000\\nRep: 2.500m\\n\\n\\n----- Illuminati -----\\n\\n--- Synthetic Heart ---\\nstrength_mult: 1.5\\nagility_mult: 1.5\\nPrice: $2.875b\\nRep: 750.000k\\n\\n--- Synfibril Muscle ---\\nstrength_mult: 1.3\\ndefense_mult: 1.3\\nPrice: $1.125b\\nRep: 437.500k\\n\\n--- NEMEAN Subdermal Weave ---\\ndefense_mult: 2.2\\nPrice: $3.250b\\nRep: 875.000k\\n\\n--- Embedded Netburner Module Core V3 Upgrade ---\\nhacking_mult: 1.1\\nhacking_exp_mult: 1.25\\nhacking_chance_mult: 1.1\\nhacking_speed_mult: 1.05\\nhacking_money_mult: 1.4\\nPrice: $7.500b\\nRep: 1.750m\\nPrereq: Embedded Netburner Module Core V2 Upgrade\\nPrereq: Embedded Netburner Module Core Implant\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Analyze Engine ---\\nhacking_speed_mult: 1.1\\nPrice: $6.000b\\nRep: 625.000k\\nPrereq: Embedded Netburner Module\\n\\n--- Embedded Netburner Module Direct Memory Access Upgrade ---\\nhacking_chance_mult: 1.2\\nhacking_money_mult: 1.4\\nPrice: $7.000b\\nRep: 1.000m\\nPrereq: Embedded Netburner Module\\n\\n--- QLink ---\\nhacking_mult: 1.75\\nhacking_chance_mult: 2.5\\nhacking_speed_mult: 2\\nhacking_money_mult: 4\\nPrice: $25.000t\\nRep: 1.875m\\n\\n\\n----- Bladeburners -----\\n\\n--- EsperTech Bladeburner Eyewear ---\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $165.000m\\nRep: 1.250k\\n\\n--- EMS-4 Recombination ---\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_analysis_mult: 1.05\\nbladeburner_success_chance_mult: 1.03\\nPrice: $275.000m\\nRep: 2.500k\\n\\n--- ORION-MKIV Shoulder ---\\nstrength_mult: 1.05\\ndefense_mult: 1.05\\ndexterity_mult: 1.05\\nbladeburner_success_chance_mult: 1.04\\nPrice: $550.000m\\nRep: 6.250k\\n\\n--- Hyperion Plasma Cannon V1 ---\\nbladeburner_success_chance_mult: 1.06\\nPrice: $2.750b\\nRep: 12.500k\\n\\n--- Hyperion Plasma Cannon V2 ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $5.500b\\nRep: 25.000k\\nPrereq: Hyperion Plasma Cannon V1\\n\\n--- GOLEM Serum ---\\nstrength_mult: 1.07\\ndefense_mult: 1.07\\ndexterity_mult: 1.07\\nagility_mult: 1.07\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $11.000b\\nRep: 31.250k\\n\\n--- Vangelis Virus ---\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.1\\nbladeburner_success_chance_mult: 1.04\\nPrice: $2.750b\\nRep: 18.750k\\n\\n--- Vangelis Virus 3.0 ---\\ndefense_exp_mult: 1.1\\ndexterity_exp_mult: 1.1\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.05\\nPrice: $11.000b\\nRep: 37.500k\\nPrereq: Vangelis Virus\\n\\n--- I.N.T.E.R.L.I.N.K.E.D ---\\nstrength_exp_mult: 1.05\\ndefense_exp_mult: 1.05\\ndexterity_exp_mult: 1.05\\nagility_exp_mult: 1.05\\nbladeburner_max_stamina_mult: 1.1\\nPrice: $5.500b\\nRep: 25.000k\\n\\n--- Blade's Runners ---\\nagility_mult: 1.05\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.05\\nPrice: $8.250b\\nRep: 20.000k\\n\\n--- BLADE-51b Tesla Armor ---\\nstrength_mult: 1.04\\ndefense_mult: 1.04\\ndexterity_mult: 1.04\\nagility_mult: 1.04\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.03\\nPrice: $1.375b\\nRep: 12.500k\\n\\n--- BLADE-51b Tesla Armor: Power Cells Upgrade ---\\nbladeburner_max_stamina_mult: 1.05\\nbladeburner_stamina_gain_mult: 1.02\\nbladeburner_success_chance_mult: 1.05\\nPrice: $2.750b\\nRep: 18.750k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Energy Shielding Upgrade ---\\ndefense_mult: 1.05\\nbladeburner_success_chance_mult: 1.06\\nPrice: $5.500b\\nRep: 21.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Unibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.08\\nPrice: $16.500b\\nRep: 31.250k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- BLADE-51b Tesla Armor: Omnibeam Upgrade ---\\nbladeburner_success_chance_mult: 1.1\\nPrice: $27.500b\\nRep: 62.500k\\nPrereq: BLADE-51b Tesla Armor: Unibeam Upgrade\\n\\n--- BLADE-51b Tesla Armor: IPU Upgrade ---\\nbladeburner_analysis_mult: 1.15\\nbladeburner_success_chance_mult: 1.02\\nPrice: $1.100b\\nRep: 15.000k\\nPrereq: BLADE-51b Tesla Armor\\n\\n--- The Blade's Simulacrum ---\\nSpecial\\nPrice: $150.000b\\nRep: 1.250k\\n\\n\\n----- Church of the Machine God -----\\n\\n--- Stanek's Gift - Genesis ---\\nhacking_mult: 0.9\\nstrength_mult: 0.9\\ndefense_mult: 0.9\\ndexterity_mult: 0.9\\nagility_mult: 0.9\\ncharisma_mult: 0.9\\nhacking_exp_mult: 0.9\\nstrength_exp_mult: 0.9\\ndefense_exp_mult: 0.9\\ndexterity_exp_mult: 0.9\\nagility_exp_mult: 0.9\\ncharisma_exp_mult: 0.9\\nhacking_chance_mult: 0.9\\nhacking_speed_mult: 0.9\\nhacking_money_mult: 0.9\\nhacking_grow_mult: 0.9\\ncompany_rep_mult: 0.9\\nfaction_rep_mult: 0.9\\ncrime_money_mult: 0.9\\ncrime_success_mult: 0.9\\nwork_money_mult: 0.9\\nhacknet_node_money_mult: 0.9\\nhacknet_node_purchase_cost_mult: 1.1\\nhacknet_node_ram_cost_mult: 1.1\\nhacknet_node_core_cost_mult: 1.1\\nhacknet_node_level_cost_mult: 1.1\\nPrice: $0.000\\nRep: 0.000\\n\\n--- Stanek's Gift - Awakening ---\\nhacking_mult: 1.0555555555555556\\nstrength_mult: 1.0555555555555556\\ndefense_mult: 1.0555555555555556\\ndexterity_mult: 1.0555555555555556\\nagility_mult: 1.0555555555555556\\ncharisma_mult: 1.0555555555555556\\nhacking_exp_mult: 1.0555555555555556\\nstrength_exp_mult: 1.0555555555555556\\ndefense_exp_mult: 1.0555555555555556\\ndexterity_exp_mult: 1.0555555555555556\\nagility_exp_mult: 1.0555555555555556\\ncharisma_exp_mult: 1.0555555555555556\\nhacking_chance_mult: 1.0555555555555556\\nhacking_speed_mult: 1.0555555555555556\\nhacking_money_mult: 1.0555555555555556\\nhacking_grow_mult: 1.0555555555555556\\ncompany_rep_mult: 1.0555555555555556\\nfaction_rep_mult: 1.0555555555555556\\ncrime_money_mult: 1.0555555555555556\\ncrime_success_mult: 1.0555555555555556\\nwork_money_mult: 1.0555555555555556\\nhacknet_node_money_mult: 1.0555555555555556\\nhacknet_node_purchase_cost_mult: 0.9545454545454545\\nhacknet_node_ram_cost_mult: 0.9545454545454545\\nhacknet_node_core_cost_mult: 0.9545454545454545\\nhacknet_node_level_cost_mult: 0.9545454545454545\\nPrice: $0.000\\nRep: 1.000m\\nPrereq: Stanek's Gift - Genesis\\n\\n--- Stanek's Gift - Serenity ---\\nhacking_mult: 1.0526315789473684\\nstrength_mult: 1.0526315789473684\\ndefense_mult: 1.0526315789473684\\ndexterity_mult: 1.0526315789473684\\nagility_mult: 1.0526315789473684\\ncharisma_mult: 1.0526315789473684\\nhacking_exp_mult: 1.0526315789473684\\nstrength_exp_mult: 1.0526315789473684\\ndefense_exp_mult: 1.0526315789473684\\ndexterity_exp_mult: 1.0526315789473684\\nagility_exp_mult: 1.0526315789473684\\ncharisma_exp_mult: 1.0526315789473684\\nhacking_chance_mult: 1.0526315789473684\\nhacking_speed_mult: 1.0526315789473684\\nhacking_money_mult: 1.0526315789473684\\nhacking_grow_mult: 1.0526315789473684\\ncompany_rep_mult: 1.0526315789473684\\nfaction_rep_mult: 1.0526315789473684\\ncrime_money_mult: 1.0526315789473684\\ncrime_success_mult: 1.0526315789473684\\nwork_money_mult: 1.0526315789473684\\nhacknet_node_money_mult: 1.0526315789473684\\nhacknet_node_purchase_cost_mult: 0.9523809523809523\\nhacknet_node_ram_cost_mult: 0.9523809523809523\\nhacknet_node_core_cost_mult: 0.9523809523809523\\nhacknet_node_level_cost_mult: 0.9523809523809523\\nPrice: $0.000\\nRep: 100.000m\\nPrereq: Stanek's Gift - Awakening\\nPrereq: Stanek's Gift - Genesis\\n\\n\\n----- Shadows of Anarchy -----\\n\\n--- SoA - phyzical WKS harmonizer ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Might of Ares ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Wisdom of Athena ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Chaos of Dionysus ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Beauty of Aphrodite ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Trickery of Hermes ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Flood of Poseidon ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Hunt of Artemis ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\\n--- SoA - Knowledge of Apollo ---\\nSpecial\\nPrice: $1.000m\\nRep: 10.000k\\n\"}}],[\"texts/bitnode-order.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"texts/bitnode-order.txt\",\"text\":\"1.1  -> 1.2  -> 1.3     Max SF1 28% All\\n5.1                     Int, Formulas & getBitNodeMultipliers()\\n4.1  -> 4.2  -> 4.3     Max SF4 Singularity Functions\\n5.2  -> 5.3             Max SF5 14% Hacking\\n2.1  -> 2.2  -> 2.3     Max SF2 42% Crime & Charisma, Gangs\\n3.1                     Corps\\n12.1                    NFG-1\\n6.1                     Bladeburner\\n7.1                     Bladeburner API\\n10.1 -> 10.2 -> 10.3    Max SF 10 8 Sleeves max memory\\n6.2  -> 6.3             Max SF6 14% Combat\\n7.2  -> 7.3             Max SF7 14% Bladeburner\\n3.2  -> 3.3             Max SF3 14% Company Salary and Charisma, Office API & Warehouse API\\n11.1 -> 11.2 -> 11.3    Max SF11 56% Company Salary and Reputation Gain, 7% Augmentation Price Decrease, Favored Reputation\\n9.1  -> 9.2  -> 9.3     Max SF9 14% Hacknet, Hacknet Servers, 128 GiB RAM, Bitnode Server\\n12.2                    NFG-2\\n13.1 -> 13.2 -> 13.3    Max SF13 +3 size Stanek's Gift, Church of the Machine God\\n12.3 -> 12.4            NFG-4\\n8.1  -> 8.2  -> 8.3     Max SF8, 21% Grow, WSE Account and TIX API, Shorting Stocks, Limit/Stop Orders\\n12.5 -> ...\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":978.2100000000178,\"ramUsage\":2.8,\"server\":\"home\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":10000,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-231026.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSEFRAMECLOUDLOGINSHIFT\",\"CONFIGURE\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-822636-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[115,168,29,101,23,31,78,195],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-841380-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":26,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-898847.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":990079195824029,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-916655-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"95098738990\",-12],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-199489-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":87,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289098-NewTokyo.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6Y6666A8190AAAOAAqx090DX8jhotw551r3909582dkwqvfQ5232LB524PJUP8921m\",\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802078-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,29],[19,25],[18,26],[16,21],[7,12],[17,21],[8,14],[8,15],[6,13],[24,25],[13,21],[9,17],[2,3],[14,15],[18,19],[20,28],[16,19],[11,13],[10,12]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-823113.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"EMAIL SHIFT FRAME LOGIC TRASH\",1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-417488.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[86,117,13,116,23,85,59,36,194,101,114,24,160,185,84,169,16,20,38,124,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-798102-TianDiHui.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,31],[9,13],[22,31]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"26.8.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":47886799336,\"moneyMax\":1197169983400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1259,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-134413.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a))\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766547.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,4,0,3,4,10,3,0],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-568590-TheBlackHand.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,6,0],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-466337.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[87,170,148,29,128,8,38,199,81],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441162.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,1,0,0,0,0],[1,0,1,1,0,0,0,0],[0,0,0,1,0,0,1,0],[1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,1],[0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[1,0,0,1,1,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"25.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49435294452,\"moneyMax\":1235882361300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1165,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-271903.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"9494\",62],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-381243.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":42715716956433,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-767092-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,1,0,0,0,1,0,1,1,0],[1,0,0,0,1,1,0,1,0,0,0,0],[0,1,0,1,0,0,0,0,0,1,0,1],[0,0,1,0,0,0,0,1,1,0,1,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,1,0,1,0,0,0,0,1,0,0,0],[0,1,1,1,1,1,0,0,1,1,0,1],[0,0,1,1,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,0,1,0,0,0,1],[0,1,0,0,0,0,1,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-104420-Chongqing.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[17,138,128,100,158,62,116,135,155,77,28,87,84,118,84,184,8,107,117,50,18,156,27,154,169,138,104,165,95,124,106,141,121,151,97,86,154,59,187,111,77,142,39,10,8,144,46],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-57540.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"POPUPVIRUSARRAYMEDIAPRINT\",\"CONFIGURE\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136298.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":23186660,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"89.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":28784211161,\"moneyMax\":719605279025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":67,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-944851.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":526614905352319,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-545606-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"eeeeeeeeeeeeeZJddpppppppp44Y33JJJJJrrssG66ttttttttttttii444UUUUUggggXXSSSSSSSSSNNJ22PTTTT\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-142879-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[3,8],[4,7],[2,5],[3,5],[6,8],[5,6],[4,5],[0,7],[1,6]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-210617-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":74,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-124174.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[4,9],[6,9,6],[7,7,7,4],[8,6,7,2,9],[4,5,7,2,5,3],[4,8,3,2,4,4,9],[6,1,4,3,1,8,8,3],[6,2,6,4,7,3,3,1,6],[3,8,1,2,8,7,8,8,9,9],[1,7,2,1,6,3,2,4,2,6,2],[6,5,4,9,4,8,9,9,4,8,3,8]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-934203.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6HjFl4p517b3ghL1a1993kshSN444482gG740696PBA6je577t6puy40153c6R\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891751.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454273-SpeakersfortheDead.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,7,0,0,8,4,1,1,0,5,3,0,0,0,0,6,1,3,4,7,4,5],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"65.7.9.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":29839691002,\"moneyMax\":745992275050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1166,\"serverGrowth\":60,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-657364-SpeakersfortheDead.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FLASH LOGIN POPUP LINUX MACRO\",19],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-165226-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(aa(a)())))()(()()\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-786145.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-3,10,6,10,10,-2,3,3,-8,6,-9,8,-9,-6,9,0,8,3,-2,0,-3,0],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262583.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[38,46,46],[37,39,8],[36,35,28],[46,38,46],[37,4,40],[25,13,40],[11,24,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166459-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":227956,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-506320.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"INBOXDEBUGCLOUDARRAYLOGIN\",\"HYPERTEXT\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703054.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,20],[13,14],[6,9],[24,33],[11,13],[22,31]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542337-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,0,3,7,5,2,6,0,1,0,7,0,8,9,9,0,5,3,6,6,6,6],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-396764.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"56.4.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":29072103450,\"moneyMax\":726802586250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":95,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-977262.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-8,4,-2,1,5,1,5,0,-1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-412303.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"glhjbEM3glhjbEM3g6g63g6g633sheSX23eheSX23eYiuSX23eYiXIOOOOT6l31Dwl31DwDwDwDwDDwDwDkR\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64006-TianDiHui.cct\",\"type\":\"Total Ways to Sum\",\"data\":68,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263060-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))))a))(((((a)\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731890.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,3,2,-3,-8,9,-10,7,3,-1,-4,-4,-3,-10,0,2,-6,9,-5,-2,7,3,-5,-6,-8,-10,10,10,-3],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820335.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[75,156,109,84,11,125,118,79,27,15,73,191,35,191],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161746.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,3,0,3,5,1,3,6,4,4,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"86.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":22498225945,\"moneyMax\":562455648625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1191,\"serverGrowth\":45,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674767-TianDiHui.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1122279458994921,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-177790-MegaCorp.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FRAMEDEBUGTABLELOGICFLASH\",\"GIGABYTE\"],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-7742.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,-3,-3,-3,-8,9,-8,3,0,-4,10,-5,9,-4,8,-3,-2,8,-5,1,-3,-8,-2,5,7,-2,3,6,5,7,9,-9,7,-6,2,6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89382.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,10,4,0,8,8,7,6,2,0,4,0,0,7,10,0,4,9],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-942564-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,195,181,156,138,111,5,47,112,147,165,87,2,153,150,196,17,3,154,155,92,37,59,172,5,156,166,26,192,110,19,23,96,123,187,86,198,54,37,106,111,73,23,48,70,54,141,173,110,26],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56476.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"77ZZZZZZZZZZZZFFFFFFFFFFFFFFQjjWWIIoHH6666ss68Huqq888811111eeeeeeeeeeCCCII\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940762-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[12,138,34,90,19,186,178,174,126,51,67,76,31,18,181,194,149,83,90,100,117,63,23,120,174,151,61,141,149],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433123-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[176,[2,5,6,7,8,9,12,13,14,16]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"5.6.1.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":13194633515,\"moneyMax\":329865837875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":955,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-148533.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[113,198,129,21,87,66,166,73,197,75,22,116,56,66,74,135,50],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881670.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MACRO ARRAY CLOUD LOGIN POPUP\",3],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-298891.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":682122746,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113785-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[190,175,112,46,52,112,43,22,128,89,109,74,88,170,67,22,7,156,107,99,34,63,154],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-849357-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0],[1,0,0,1,0,1],[0,0,0,1,0,0],[1,0,0,0,0,0],[1,0,0,0,0,1],[1,1,0,0,0,0],[0,1,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138340-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4645945\",-68],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415485-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,10,8,0,0,7,4,4],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"82.5.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":22492654949,\"moneyMax\":562316373725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1027,\"serverGrowth\":82,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-993648.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,11],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-609251-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"416846\",77],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-519445.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"15559241177\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781395-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"WnK7cCnKq46qLIduzoMoMoMgK02U02U02U0rs6fxypU0rs6fxyTgbg6xMMdRMMdRZmdRMM\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-296411-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[47,45,23,3,2,50,38,25,39,11,12,39,47,43],[21,25,35,4,26,25,16,30,39,50,1,1,9,14],[20,28,43,29,2,8,41,38,31,23,14,22,13,5],[21,49,26,44,13,23,24,23,28,49,35,48,37,37],[27,16,8,8,16,47,25,39,25,37,16,17,15,10],[34,4,41,39,4,47,2,39,43,38,47,13,42,40],[7,20,33,44,12,28,3,21,13,50,7,35,26,22],[12,42,28,1,46,5,34,35,38,21,14,42,27,26],[15,43,38,46,10,14,16,33,25,23,49,40,20,38]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-962274.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":174618,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-810073.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()a))(((a((a))a()))\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-758002-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,-5,2,-4,7,3,0,3,1,0,3,0,6,10,-1,2,5],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899741-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":16,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"99.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":29223670235,\"moneyMax\":730591755875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1256,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-998056-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())a))(()()(aa())(\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-488054.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"50116\",-72],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-727895-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"18915211473\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-176732-TheDarkArmy.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"DEBUG TRASH LOGIN LINUX FLASH\",18],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-176141.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[2,6],[1,3],[1,6],[0,4],[5,6],[0,1],[0,3]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-419661.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[194,126,62,108,198,69,86,40,75,172,55,134,172,20,115,96,54,70,189],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-69107-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"144242232169\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-962330-SpeakersfortheDead.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[3,170,29,27,189,195,40,34,77,36,97,196,47,54,67,103,195,52,132,54,53,150,128,81,78,100,103,69,81,2,148,107,4,164,80,35,123,76,192],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"48.1.5.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1552583888,\"moneyMax\":38814597200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1095,\"serverGrowth\":83,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"68.1.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1571,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229445.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[5,45,31,198,52,74,177,117,137,106,17,151,173,51,50,174,11,91,72,42,119,140,181,194,128,130,46,117,141,86,99,65,133,139,92,114],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-2306-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[76,93,172,74],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489068.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[5,10],[3,8],[7,8],[2,3],[8,9],[1,10],[8,10],[2,5],[0,9],[3,7],[4,10]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-377844-TheBlackHand.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":102692017,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749410-TheDarkArmy.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":53437271121,\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-480285.cct\",\"type\":\"Total Ways to Sum\",\"data\":98,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826835-Ishima.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"90amio23dw09SJq2tnZ5e05EqegQ961O652FH5620S534rr36669mF8L1WLmr0457aU\",\"reward\":{\"type\":0,\"name\":\"Ishima\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"45.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1116108031,\"moneyMax\":27902700775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1075,\"serverGrowth\":72,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642678-MegaCorp.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7neQTbtj570720619OAnlPlfCf04WxWl633WDw936rDLkg046\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-394855.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9c6xLK0Ege04Z0d2981Q919QQQOBD3xz777cG51JxC52\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-384055.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,3,4,2,1,3,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558755-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[65,195,48,31,59,20,84,18,109,26,153,30,106,166,47,126,33,82,21]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-742618.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"10822432203\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-602426-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[189,5,87,52,69,89,35,198,162,64,154,32,71,89,128,107,174,68,139,178,162,24,121,101,12,117,93,147,48,61,195,84,143,125,85,194,43,106,76,45,102,14,21,189,162,22,171,20,190,76],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"61.3.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":915835369,\"moneyMax\":22895884225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":868,\"serverGrowth\":62,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-148146-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[34,13,35,10,8],[9,33,50,34,25],[12,37,50,23,11],[31,39,50,48,13],[24,1,37,46,34],[8,2,1,42,40],[49,38,21,7,45],[29,46,3,14,42],[22,39,8,7,9],[21,38,31,15,3],[4,8,49,22,27],[32,26,34,36,47],[19,37,26,31,20]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-62057.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,1,1],[0,1,0],[0,0,1],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325095.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0],[0,0,1,0],[0,1,0,0],[1,0,0,0],[0,1,1,0],[0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373485-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[11,11,33,15,49,160,38,132,86,115,54],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-95063-TheSyndicate.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,6,4,-8,-1,9,8,5,-4,-3,1,7,-10,-4,4,-5,-7,9,-4,5,-5,9,4,4,-5,-2,9,8],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-716711-MegaCorp.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYINBOXMACRODEBUGMOUSE\",\"PROTOCOL\"],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-350060.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,1,0,0,0,1],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,1,0],[0,0,1,1,1,1,0,1,1],[0,0,1,0,1,0,0,0,0],[0,1,0,0,1,0,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0,0],[0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,1,0,0],[1,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"54.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":708661196,\"moneyMax\":17716529900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":883,\"serverGrowth\":57,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720196-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[73,106,194,126,140,102,194,152,59,150,80,42,105,23,14,8,148,57,86,169,135,2,32,178,96,6,195,76,79,25,76,88,160,35,44],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-227612.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-461924.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,8,3,-9,-3,5,-3,-3,-3,-3,4,4,8,6,4,-7,7,-4,-9,-7,-9,-9,-9,10,-7,-5,3,-3,8,-5,10,-8,6,-9,-6,-4,4,-2,6],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-976941-TheDarkArmy.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,7],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318495.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"SHELLFRAMEINBOXARRAYFLASH\",\"INTERNET\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249741-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[0,6],[2,4],[0,2],[0,3],[1,6]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494734.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,2,1,-10,8,-2,-9,0,-6,-9,0,4,5,-10,9,-4,7,7,-10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-322674-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":138,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"68.3.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":652895528,\"moneyMax\":16322388200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":884,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481485-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Vjk82vQHIvQwXHIvQwXHIvQw366OS2WWWGYOOZVOZVoOZVoOZVoOBOJmqnQOJmqnAq\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790588-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[8,11],[2,3],[3,10],[2,6],[2,8],[1,3],[11,12],[9,12],[6,10],[4,7],[0,7],[0,5],[7,12],[5,8],[6,7],[10,12],[4,10],[4,11],[3,7],[4,9],[0,10]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954645-TheSyndicate.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[51,76,62,128,84,31,16,147,79,199,195,156,64,183,140]],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-458711-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"3190522232\",46],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-315765.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[5,10],[1,9],[3,5],[1,7],[3,7],[9,10],[1,2],[6,8],[4,11],[0,2],[5,11],[4,8],[3,9],[1,5],[0,8],[9,11],[0,7]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570636-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"444963879962\",86],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"73.3.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":746342808,\"moneyMax\":18658570200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":60,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-865968-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":100,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931787.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"UTUTUTUTUpeUpeTUpv4jUpeoirv36666666666666666666Xy66666Xy6616uf8xIZjEf8xIZjEf8\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555188.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8829573652\",62],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995002-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"721897965\",-52],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286689-NewTokyo.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0],[0,1,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-138177-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000000000000000110100100111100110110110100001010001100000110000\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494272.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,25],[14,18],[7,9],[5,15],[23,32],[9,19],[19,21],[18,20],[24,30],[3,12],[20,28],[7,8],[12,17]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695183-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"10877290\",68],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"71.6.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":924515770,\"moneyMax\":23112894250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":911,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-878715.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,10,3,10,4,8,2,10,5,3,0,1,5,0,10,6,4,4,3],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-979270-TheSyndicate.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"871315\",-39],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656299-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())a)()\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-779955-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0,0],[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,0,1],[0,1,0,1,0,0,0,1],[0,0,0,0,1,0,0,0],[1,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327250-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[178,131,162,132,134,152,62],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760155.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,9,5,9,3,-8,-8,6,6,-1,4,-8,-10,7,-7,9,-4,-8,10,-9,1,5,-5,0,-4,5],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"29.6.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1182227205,\"moneyMax\":29555680125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":86,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56974-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,17,34,31,21,22,8,45,29,5,9,48,11,48,3],[48,6,14,15,39,40,10,9,45,28,15,20,27,45,39],[21,9,4,38,16,21,32,20,33,13,19,33,50,30,18],[41,39,3,16,47,17,7,33,36,26,20,14,31,26,23],[28,14,7,18,42,29,20,22,29,43,22,4,22,49,35]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618499.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-2,8,4,1,-3,-2,8,4,-3,-6,-4,-1],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-182957.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1110100010000000100000000111010011011001101100101111100111001101\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-445891.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[4,7],[7,8],[0,4],[4,9],[0,2],[5,10],[2,7],[8,9],[7,10],[3,7],[0,6],[1,7]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-442821-Ishima.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[11,2,122,52,162,115,37,2,74,7,101,198]],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939260.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,12],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-332007.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,4],[1,6],[2,9],[6,9],[1,7],[6,8],[1,2],[0,9],[0,8],[0,5],[5,9]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106947-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8894300\",52],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-626358.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[157,[4,5,7,8,11,14,15,16]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-689532.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[32,18,38,10,25,36,5,18,1],[42,42,46,47,12,27,9,34,49]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-999685.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,9],[2,8],[22,27]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-499119.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8014175263\",17],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"24.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":862246645,\"moneyMax\":21556166125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":70,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968495-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((((((((((((()\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269118-SpeakersfortheDead.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[9,8],[1,1,9],[8,5,5,4],[3,6,6,9,1],[3,1,6,6,7,7],[6,6,3,6,7,7,6],[1,2,4,1,2,2,8,9],[5,1,3,1,9,4,6,9,2],[9,2,3,5,7,1,7,5,9,6]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890803-TheBlackHand.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":1206876005,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"65.3.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":664462143,\"moneyMax\":16611553575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":75,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-724520-MegaCorp.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1892237623\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401242-TheDarkArmy.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[25],[15],[7],[35],[11],[13],[24],[17],[38]],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54833-TheBlackHand.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ggBBBBBBBGGaaaaaXdddddddddddddRRRRRRRRRRRmmmmmmmmmmmmn0BBBBBBBBBBBRR7777777777777rrqqqqqq\",\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-587327.cct\",\"type\":\"Total Ways to Sum\",\"data\":96,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-507930.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[4,193,42,65,118,31,127,71,68,138,177,153,37,3,30,110,137,27,171,44,147,66,158,180,3,35,191,131,21,39,102,103,59,164,197,106,56,12,1,72,59,38,82,178,140,157,104,40,91],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-841294.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CACHE LOGIN TRASH SHELL FRAME\",13],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691168-TheDarkArmy.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[107,185,88,137,32,75,79,198,8,127,158,141,49,155,98,117,147,99,138,185,48,100,151,109,72,36,179,172,125,97,191,101,37,26,99,177,17,90,144],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"1.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":825758303,\"moneyMax\":20643957575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":904,\"serverGrowth\":76,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159250-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"8xmESSSS2m11SSS2m122222Jv043NNwBjWqBjWqBjWqHSxqBjBjBKLO87gmNSJX\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-519554.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[1,0,0,1,0,0],[0,1,0,1,1,1],[0,0,0,1,0,0],[0,1,0,1,1,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,1,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-190963-Netburners.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8pG4yoJra711w646g5SZuT8228L879UxBewf3OW09uFy5rbatG080TGxPuTi654Du1S\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347947-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,8,7,-10,-4,-10,3,4,6,-7,-9,10,0,-7,-8,3,9,-2,-3,1,3,0,0,-6,1,-3,-6,-10,1,-4,9,-1,10,0,-9],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-646415-NewTokyo.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[37,[2,4,5,6,8,11,12,13,14]],\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-930268.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010111100110110\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734429-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,8],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895921-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,26],[5,14],[3,10],[1,10],[20,26],[18,24],[24,29],[14,22],[21,26]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"42.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":772244747,\"moneyMax\":19306118675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":84,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113129.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":14718,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691292-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":683935002,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242300.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":6942388,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-843659.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,2,0,6,7,9,9,-7,-4,6,5,6,0,-1,1,-4,10,-2,-7,0,-2,-6,7,4,-7,-5,-6,-2,8],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558060-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[28,[1,2,4,7,9,11,12,13,15,17,18,20]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955797-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[145,7,190,18,109,127,157,90,197,71,78,129,172,38,12,167,199,125,147,35,33,115,4,155,164,117,195,22,167,129,95,19,64,85,34,101,89,33,4,137,194,93,91,9],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-693061-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,9,3,-8,-10,9,-4,-10,-1,-6,-6,0,3,1,8,8,-2,-8,-10,-10,8,0,9,2,-2,-6,-10,9,9,9,-6,6,6,-2,9,1,3,-10,-4],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-694108-TheSyndicate.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"hLBLBLBLBLBLBLBLBLMRIBLzRIBLzL1vYmPU8UOFVcjOFVcjOFVcFVcFVcFVc2DoDsVXnG1G1G1G1G100000Wb3f8FYN\",\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"32.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1098092855,\"moneyMax\":27452321375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28728-Ishima.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[2,3],[4,5],[0,5],[1,3],[0,6],[4,6],[2,3]]],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347734-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[4,2,6,4,-5,10,-4,0,0,-7,2,4,-5,9,2,-7,-9],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-199986-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[193,90,156,16,199,163,187,44,142,39,178,64,143,100,36,75,115,3,185,58,67,77,43,175,56,31,44,146,147]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-657656.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":5579,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-491356.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,1,1,1],[0,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,1,1,1,0,0,0],[0,1,0,0,1,0,0,0],[0,1,0,0,0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-544056.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,5],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"98.5.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":959330132,\"moneyMax\":23983253300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":918,\"serverGrowth\":70,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-75405.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"6Qz3qHry4WZKikJt4WZKikJiky8Mvfky8Mvfky76FtHFtHFtHFJGHFJGHFJGH8888888888888888Z\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616647.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,36,12,23,22,5]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347646-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":159,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-128800-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,8,6,3,1,4,9,2,1,1,0],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131921-NiteSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":931070196,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790105-SpeakersfortheDead.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"20411041148\",\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547934-Chongqing.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"WWZZ00000000nn880u55n7777777777766666lQQQr77777bQQQQQSSSSSSSSSSSSSSBBKKRRRRs33333333333H\",\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655059-Chongqing.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,6,4,4,2],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"45.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":1019553356,\"moneyMax\":25488833900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":792,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-67081.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,9,1,0,5,2,0,6,10,5,6,8,4,8,1,7,0,6],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-710020.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[8,8],[3,3,5],[4,4,6,7],[2,8,4,2,7]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-773731-TianDiHui.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":192030557,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-959653.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[18,5,26,36,47,35,19,45,39,1,10,47,2,47],[9,6,33,30,1,18,31,40,8,25,15,25,15,46],[35,30,24,47,27,30,34,36,6,33,39,39,44,40],[28,34,18,26,28,28,35,19,34,40,37,6,29,7],[14,41,48,32,42,3,35,22,18,40,41,36,20,7],[41,13,4,29,28,40,10,31,10,5,27,8,3,11],[28,35,43,21,2,15,32,22,48,32,39,42,35,30],[45,21,18,14,41,32,45,39,43,44,38,48,43,12],[43,25,15,1,38,32,48,37,27,29,32,49,32,10],[28,25,37,31,8,32,43,47,11,44,18,42,34,20],[30,26,32,34,41,34,41,38,25,18,37,48,24,22],[50,33,44,12,23,29,9,39,9,33,46,42,33,20],[39,44,27,49,18,46,7,17,36,48,8,35,16,5]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-274085.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[85,129,36,86,192,18],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-864741.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[146,[3,7,8,9,10,11,14,15,16,17]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410682-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1],[0,0,1,0,0,1],[0,0,0,0,1,1],[1,1,0,0,0,0],[0,0,1,1,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0],[1,0,1,1,0,1],[0,0,1,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-510314.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"85827312635\",6],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"48.4.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":946860001,\"moneyMax\":23671500025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738225-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,10,1],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-200386-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[3,4],[6,7],[4,5],[6,8],[1,5],[0,1],[8,9],[2,8],[1,7],[0,4],[5,6],[1,8],[4,7]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-446662-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[27,159,21,112,75,146,158,74,89,75,196,57,66,131,79,166,75,66,184,60],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775165.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":29363,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170572-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,9,9,0],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358674-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,4],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-260548.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSELINUXDEBUGLOGINTRASH\",\"PROCESS\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749637.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,2,9,6,7],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978279.cct\",\"type\":\"Total Ways to Sum\",\"data\":41,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306245.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":348694506309498,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"0.4.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":777450653,\"moneyMax\":19436266325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-992273.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[66,38,80,34,139,16,91,102,184,198,31,47,86],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802654.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[46,166,54,152,64,144,93,63,13,58,177,75,123,192,12,168,161,48,4,140,65,166,197,153,184,46,116,182,84,2,72,124,176,147,179,165,148,37,44,23,50,161,117,102,109],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235178-NewTokyo.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[0,7],[3,6],[4,6],[2,3],[0,9],[1,2],[9,10],[9,11],[1,7],[4,7],[0,5],[8,9],[7,10],[7,8],[2,11],[5,10],[2,4],[6,10],[4,9]]],\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-272146-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ubxZZGZGZGZGZGGGGv60LrWWllSFjKllSslSFjKg3UYSIcdCPnczHcnczHnczHcncz42BlOU8DE\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-977709.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"u6666666666666lA6ss888888888HmmmmmmDvvvvvvBff7n553INNGGEVGGGGGGGGGGGGGGUUDyymm\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244465-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[5,9],[1,8],[1,7],[5,8],[3,5],[8,9],[6,9],[7,9]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-499465.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,1,1,1,0],[1,0,0,0,0,0,1,0,0],[1,0,0,1,0,1,0,1,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,1],[1,0,1,1,0,1,0,0,0],[1,1,0,1,1,0,0,0,1],[1,1,1,0,0,0,0,1,0],[0,0,0,1,0,0,0,0,1],[0,0,0,0,0,1,1,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-329002.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[115,107,108,172,168,104,148,81,105,45,51,16,176,97,161,96,71,162,95],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"71.1.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1629359526,\"moneyMax\":40733988150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":50,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-872902.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[107,75,150,97,156,42,147,65,49,172,16,113,85,102,195,61,105,180,63,7,59,146,186,128,170,76,153,87],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-972981.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66592-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Pd3OOOCcdAcdAcdAcAdAcAdAcAdAdAcA5AdAcA5AdAnwAcyAcyAcyAcyAc6kMdKs63s63Bj\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-483142.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010000010000000100000000000000010000100001011001101000001111101\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"18.3.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1547569243,\"moneyMax\":38689231075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":80,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897312.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,2,3,2,3,2,3,0,3,0,1,1,3,3,1,1,5,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-537485-SpeakersfortheDead.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[9,2],[8,9,6],[7,5,9,9],[4,6,8,1,7],[6,5,7,5,2,1]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-282731-TheDarkArmy.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"hhyyHHHHHDDAA3KjWWcCCCCCCCCCCllLLLLLLLLLLLLSNecHHHHGbbgglxxxxHHMxxxxxffffffff\",\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-733157.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1524223598\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866259.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0],[0,0,0,1,1,0],[0,0,0,0,0,0],[1,0,1,0,1,0],[0,0,0,1,0,1],[1,0,0,0,0,0],[1,0,0,0,0,1],[0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224789-TheDarkArmy.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,10],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730523-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":49,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242015-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,3],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"61.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1127057139,\"moneyMax\":28176428475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622679.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-67130-TheDarkArmy.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,9],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-372823.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"vgFr5O8HfxHfxHfxHfEixHfxHzSksfxHzSksEMwwz61trgITqXqITqXqITFhrITFhr0Rhr0Rhhr0h\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-483695-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3YgA432nK662Pc764GEEn366YWV2Wc436ikVAVJ917J67j6t6\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-614821-NiteSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"141240734432\",-73],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937590.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"37Fx329lUpGR305k014792xS375Yb1yt199k0Y3k4cho09THXPulauk07XBCWWtI773uIa782Wn\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-234034.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974469-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[0,9],[0,5],[5,6],[3,6],[0,3],[2,4],[3,9],[4,9],[1,6],[4,8],[0,7],[6,9],[6,7],[0,8]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"92.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1333001101,\"moneyMax\":33325027525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-28865.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a(a))()()))\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-807926-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010000010000000000001001111110101000101000110001001001011001101\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-294020-MegaCorp.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9N4cKA4OoQ066Zz4Oo759xUMaMSaQD09rhxVAz5Lw633DxE934WR6L\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730645.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[130,41,69,121,120,24,18,74,92,54,22,160,103,155,81,50,12,188,95,139,54,55,194,49,41],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-820893.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[137,183,198,125,194,102,185,168,94,164,140,38,78,102,131,155,66,75,77,175,154,130,80,176,32,134,20,184,35,166,157,97,24],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52474.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,4,10,-2,3,5],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722940.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[139,166,87,66,169,19,178,174,46,87,67,158,148,15,28,24,93,96,71,129,183,83,143,167,24,140,164,68,106,178,81,84,195,115,149,174,77,190,125,191,194,71,79,164,180,146],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-265139-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[162,88,76,169,103,46,132,181,77,74,193,101,113,35,61,157,38,96,111,75,121,88,107,162,186,63,119,134],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-396381.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[0,4],[3,5],[1,5],[0,8],[7,8],[3,7],[1,7],[5,8],[4,5],[4,6],[2,6],[4,7],[5,6]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"8.1.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1082904960,\"moneyMax\":27072624000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":778,\"serverGrowth\":75,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-800258.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[53,[1,3,7,8,9,10,11,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783983-TianDiHui.cct\",\"type\":\"Total Ways to Sum\",\"data\":49,\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-327493-TheDarkArmy.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"3333333ee2wwwHH11f1Snn111sssssssssssooooooooooooWWWWWWQQQQQQQQQjjjjjjjjjjjjjWWWWWWWW\",\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-659288-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,9],[5,11],[16,21],[3,6],[12,20],[6,13],[21,23],[25,27],[8,18],[14,19],[22,28],[19,22],[25,35],[18,22],[12,13],[13,17],[7,9],[23,29]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523731.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,12],[22,27],[13,14],[3,12],[11,15],[25,30],[23,28],[5,15],[15,17],[15,22],[1,7],[17,22],[8,15],[18,26],[7,9],[3,7],[1,9]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621185.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"11001100000010110011010000110100\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-819473-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,1],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166222-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,9,-3,3,2,-9,1,-4,-5,0,3,1,0,4,-2,5,6,-5,-3,2,0,-2,3,1,9,6,-5,-7,-4,10],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-761384-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[49,122,116,87,54,7,121,88,103,145,163,115,88,141,65,196,22,129,84,135,115,117,79,169,117,118,43,157,91,191,110,82,171,74,43,111,198,30,91,63,199,17,122,50,38,87,116],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-802378-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":100,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532300.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()(a(((aa(a(()(()\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"64.7.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"lexo-corp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":740661944,\"moneyMax\":18516548600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":713,\"serverGrowth\":62,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":971.6100000000176,\"ramUsage\":2.8,\"server\":\"lexo-corp\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-717021.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-603318-SpeakersfortheDead.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"96uN7ycvEB09GU8Y5c7QE07waxqv43656a4UQrV750711j885eymyp827cMt60HD34\",\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-228294-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[3,7],[2,3],[2,5],[1,6],[6,7],[2,7],[0,7],[0,5],[2,4],[1,2],[5,6]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"10.1.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":573669388,\"moneyMax\":14341734700,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":972.6100000000176,\"ramUsage\":2.8,\"server\":\"rho-construction\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-357872-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MACRO INBOX POPUP LOGIC LOGIN\",4],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318313.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[16,18],[19,23],[3,6],[13,19],[23,30],[20,22],[11,14],[18,24],[9,19],[11,14],[8,17],[4,5],[12,21],[8,10],[14,24]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874689-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24026.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[39,[2,3,4,5,7,8,9,10]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4181.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0],[0,1,0,0,0,0,1,1,0],[1,1,0,1,0,0,0,0,0],[1,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[1,0,0,0,1,0,0,0,0],[0,1,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"54.5.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"alpha-ent\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":693972750,\"moneyMax\":17349318750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":583,\"serverGrowth\":53,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":970.6100000000176,\"ramUsage\":2.8,\"server\":\"alpha-ent\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-545123.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))()()\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-601104.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,1,1,1],[0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,1],[0,0,0,0,0,1,1,1,0,0,0],[0,1,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,1,0,1,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108565-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[155,[1,7,9,11,12,14,15,18,20,21]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46689.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,1,0,0,1,0,1,1],[0,0,1,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,1,0,0],[0,0,1,0,0,1,1,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-439600.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[165,143,106,78,21,4,151,90,157,49,165,84,91,156,159,159,57,84,140,136,143,196,185,8,53],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-288762.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"zKzKzKzKxNrpFDFDwc3XDwc3XDwcXDwcXSSYDyBzXSSYDyBzX4S4IAdsLdsLdsLdsLVsLdsLVsLsLVsKxBS4\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220279-Chongqing.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[30,176,156,103,106,188,111,190,1,199,175,171,134,158,154,69,75,64,112,164,162,158,132,142,173,33,135,6,108,101,77,90,116,60,173,60,109,37,119,181,117,44,77],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871045-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"974186194\",-23],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"29.8.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":395530393,\"moneyMax\":9888259825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":401,\"serverGrowth\":37,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-88991.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"yyGGKK33333pptYYWWcccccc444444444CCUUomkIIIIIIIIIIVVVVVVVjIIIIIIIIIIPPdd8888888888888\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-398724.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,9,2,0,7,3,6,2,0,10,0,10,0,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1976.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[65,38,190,166,77,47,194,160,120,102,195,79,37,186,105,58,4,145,178,155,101,100,60,161,20,20,126,128,78,97,10,68,79,192,190,81],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967717.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[184,82,63,58,160,66,160,93,58,122,195,102,185,129,77,28],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-674565.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[20,30],[4,11],[16,21],[5,9],[15,17],[15,21],[12,15],[15,21],[11,19]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828465-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[0,6],[1,4],[4,9],[2,5],[4,7],[1,8],[7,8],[6,8],[3,5],[0,7],[3,6],[8,9],[2,8]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340169-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,1,0,1],[0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,1,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291134.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,5],[6,1,9],[7,4,5,6],[6,1,2,8,4],[7,3,1,2,5,6],[6,5,3,1,9,4,1]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"63.5.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":216720619,\"moneyMax\":5418015475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":387,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":975.8100000000177,\"ramUsage\":2.8,\"server\":\"rothman-uni\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-95642.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"SHELLLOGICVIRUSARRAYPASTE\",\"REALTIME\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117148.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"PRINT FLASH SHIFT CLOUD LINUX\",18],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-260105-TheBlackHand.cct\",\"type\":\"Array Jumping Game\",\"data\":[7,4,6,0,10,0,1],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-876742-Netburners.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":49,\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-710207-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,20],[13,18],[17,20],[13,23],[8,15],[18,25],[23,28],[18,24],[6,12]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154548-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1],[0,0]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12902.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[9,2],[9,7,9],[2,5,6,3],[3,4,9,4,6],[3,9,7,7,6,2],[1,5,4,1,3,2,2],[8,6,4,4,1,4,5,1],[4,2,6,9,9,2,4,4,4],[6,7,8,3,6,4,8,2,6,4],[9,4,7,8,5,3,4,7,8,2,2],[5,5,2,2,8,9,5,3,7,6,7,6]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-778064.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"yKZHjILDrvL8Yh2WUliIEdpUliIEdp7liIUXfXpInfXpInfXofXpIppzA7qpzAymDsCvvvvvvD\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"23.6.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zb-institute\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":932707972,\"moneyMax\":23317699300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":769,\"serverGrowth\":84,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":973.8100000000177,\"ramUsage\":2.8,\"server\":\"zb-institute\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373757-NewTokyo.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))((aa())\",\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14029.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":21,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"82.9.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"summit-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":270034416,\"moneyMax\":6750860400,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":447,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":972.6100000000176,\"ramUsage\":2.8,\"server\":\"summit-uni\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-912341-MegaCorp.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[5,8],[3,4],[5,6],[1,8],[0,8],[6,7],[0,3],[4,8],[2,6],[1,3],[3,5],[6,9],[1,6],[2,3],[4,6],[8,9],[3,9],[0,6]]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-301187.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"5zA5L8HKo3TAX6QZ6QoOX6QZ6QoOAn8n8idKuAn8n8idrdrow48iL18ow448iL18ow4Fvyvyvy\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-628139-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"SSSSSSSSSSSSSSssXX4ttmmmmm8888888888888aaabvviGGGGGGGGGGdddype\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549023-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[42,81,140,161,83,129,114,28,73,89,138,25,61,197,147,142,146,59,74,104,3,91,62,16,195,161,1,90,149,80],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-555433.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,27],[10,11],[8,17],[17,21],[1,10],[6,7],[20,22],[6,13],[4,7],[9,11],[15,22],[22,26],[22,29],[20,27]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707079-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"zwqv4Vwqv4Vwqv4rv4VwKMwD0kVwD0kVwD0kBi4YSL81476N4fTK76zTTT\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-882-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[1,3],[1,6,3],[3,1,6,1]],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-991392.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[54,181,86,88,142,127,101,190,91,83,87,193,34,32,139,114,173,59,75,148,92,96,191]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-827460.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[94,105,159,128,146,70,189,41,45,149,9,27,113,158,171,159,86,30,65,75,17,199,178,200,166,200,171,5,32,188,110,184,165,23,10,134,73,82,150]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"20.4.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":597886802,\"moneyMax\":14947170050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":584,\"serverGrowth\":62,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-754605.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"zoI3Ey3XYxPOBhYxPOWPOWPOkFXWPOWPOkqPPLxkouiX8ZjtB7utB764CGyTifl\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-513462.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,10],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428161.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[191,61,133,7,49,165,196,36,99,162,102,147,77,54,10,136],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955695.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,0,1,0,1,1],[0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,1,1,1,0,0,0,1],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,1,1,0],[1,0,1,1,0,0,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-859575.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,4,4,7,2,4,1,3,4,2,2,2,2,1,1,4,7,2,4,3,3,0,0,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667702-TianDiHui.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,3,7,2,0,7,0,5,8,0,8,3,0,0,0,9,5,3,1,7,9,6],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449253.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0,0],[1,1,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-331918-MegaCorp.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"10100000100110101011001010110100\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306043-MegaCorp.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[10,10,-3,5,-5,-2,6,-4,-10,-3,4,-2,4,0,-5,4,-4,-8,10,-5,8,-3,3,7,-10,9,-1,1,-6,0],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259657.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[38,34],[33,19],[31,40],[34,9],[34,14],[8,30],[2,35],[2,36],[24,42],[37,47],[20,6],[42,24],[18,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"98.6.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"catalyst\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":485493893,\"moneyMax\":12137347325,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":974.8100000000177,\"ramUsage\":2.8,\"server\":\"catalyst\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70390-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,10,17,20,13,16],[7,3,25,18,35,33]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343198.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"MMMMmmmmKKIIVukkjRRRDDDD00jjjjjjjjjjjj0vvvvvvvvvvUUddssVVGGUUwVV0PP\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-975331-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,32],[8,10],[21,27],[2,5],[8,11],[19,27],[7,12],[4,9],[20,22],[13,23],[14,24],[1,4],[11,14],[18,23],[23,30],[7,12]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746798.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSEPOPUPFRAMEARRAYPRINT\",\"COMPUTING\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-406167-TheDarkArmy.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,1,0,1,0],[0,1,0,0,0,0,0,0,0,1],[1,0,0,0,1,0,0,1,0,1],[0,1,0,0,0,0,0,1,1,0],[1,0,0,0,0,0,1,1,1,1],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0,1,0],[0,0,0,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,1,0,0],[1,1,1,0,1,0,1,0,0,0],[0,0,1,0,0,0,1,0,0,0]],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"98.4.9.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":186640893,\"moneyMax\":4666022325,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":308,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":976.8100000000177,\"ramUsage\":2.8,\"server\":\"the-hub\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":1,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-676321-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((aa)(((\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-540050.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"QUEUEDEBUGMOUSELOGICFRAME\",\"ALGORITHM\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404748-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"U5JTlCK2hX2hX2hX2hC2hC2hC23uvXvXvXvXvZJ66vvXvZUjNvZUjNvZPNvK4sPNvK4sPNv\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682740-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"7777777777Fg0088660xjfxxxxxxxxf03333388peeeeeeeePLLLLLLLLyyy77fWWWWWWWWWWvvUUUUUUUU\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-478639.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,8,8,-10,8,-4,-6,1],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-833273-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC ARRAY TRASH CACHE MODEM\",14],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-658502-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[148,126,18,50,178,154,111,85,39,134,25,63,199,165,13,39,115,26,19],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"55.9.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":246713297,\"moneyMax\":6167832425,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":314,\"serverGrowth\":53,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76367.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"YYYYYY5QyyXXXXLP2NNdd22YYYYi4466666xxxxxxxxxrrZZVY44444ppppkWWWWW66ddOOttttDDD\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-554931.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,4,3,8,0,3,1,2,5,2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-371843-NewTokyo.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"66tUBne133BfT94535uBI553b2O793IIs682eA661D654cW6W351W\",\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-345656-MegaCorp.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,3,1,2,3,1,2,3,1,1,1,4,1,2],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-980436.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,2,3,5,4,1,0,0],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582728-TheDarkArmy.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[2,11],[4,10],[8,9],[5,7],[4,9],[3,4],[0,9],[3,7],[0,2],[2,7],[2,6],[2,8],[0,5],[4,5],[2,4]]],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463604-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[129,171,199,89,120,11,157,42,169,89,12,176,3,109,65,176,2,100,140,175,69,186,10,170,192,132,15,48,8,25,36,58,179,90,43,194,6,153,178,17,129,68,21,36,38,81,141],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226420-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[3,5],[9,4,5],[5,4,7,7]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"66.4.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":402,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":975.8100000000177,\"ramUsage\":2.8,\"server\":\"netlink\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518835-TianDiHui.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"yOcpdpnGMyOqqNNr8hV82LV82LV82BLV85sCpHpHp568pHpHp53HpJwJwJwJwJwJwJ1DhJwJwJ1DhtMJ1Dh\",\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-250459.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,1,4,2,7,1,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-669769.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,3,0,2,1,0,3,4,8,1,2,3,4,1,1,1,1,6,2,0,1,2,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-350741-CyberSec.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"215154192140\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780953.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"wpQBwpQBwpQBpQBwpQBpX2QBwpQQseULN7kVbWULN7kVPYCYCYCYCYCYqyYDfIIIIIIInRhNvYtYtYtYtY\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323973.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[70,[1,2,3,4,7,8,9,10,11,13,14]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204714.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"wwwwwwwRRNNNNNNNNNq6666q00yyXXxx6666666AjST5DQ6PP111111YYYYYYUUUUUUUUPPPPh\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89385.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"ddkk8fffffffqkkSSSSSSSIIkAAAAAAAAAAAAAACCSO00ZZFFWW77111111BBBBBrrAAAAAAnn\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"71.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":72436709,\"moneyMax\":1810917725,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":269,\"serverGrowth\":62,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-905607.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14710522520\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-605142-TheSyndicate.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-5,1,10,-1,-3,8,-5,3,-2,8,-6,-3,8,5,1,6,-5,10,-10,-1,9,-9,5,-8,-9],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-205768.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LINUXMODEMFRAMEMEDIAQUEUE\",\"MONITOR\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-125574-TheDarkArmy.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,9],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-470042-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[147,136,58,159,166,22,164,49,88,113,12,7,147,156,126,183,84,25,13],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938511.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[2,39,153,110,60,115,7,192,72,42,129,64,157,167,99,84,110,43,107,41,52,161,155,45,161,114,166,167,71,90,22,126,101,14,39,23],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-493826.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00101001111100100100101010011110\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752701-MegaCorp.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"DEBUGARRAYQUEUELOGINTRASH\",\"NETWORK\"],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"64.2.4.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-26676-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":183329341,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-111567-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"212199109\",46],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-380496-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[45,60,187,140,56,76,142],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155306-MegaCorp.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(a)()((\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392336.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHSHIFTTABLEMODEMPRINT\",\"PROGRAM\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766010.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-4,-5,-4,-1,1,2,-2,-10,-2,8,3,3,9],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-703919.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MODEMTABLEARRAYINBOXSHELL\",\"COMPUTING\"],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-532769-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":2172155,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-188113-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[200,[1,3,4,6,7,8,10,11,17,19,21,22]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907774.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"uuffuu4444444444444XVNNddyyyD77777CCuh4ySggggL777777qqqqqqqqWWWWWWAAAccjjjjjjjjjuuooooooooeEEE\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"16.4.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":986.2100000000177,\"ramUsage\":2.8,\"server\":\"foodnstuff\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-830289.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[126,67,4,42,153,192,170,94,79,7,24,126,169,84,126,33,44,119,179,5,13,83,72,148,191,92,152,122,165,10,19,44,64,121,144,92,145,199,128,153,96]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627821.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"60902616\",50],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-654429-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[8,6],[7,2,3],[5,4,1,6],[5,1,3,5,1],[2,7,3,7,3,9],[2,2,2,6,6,1,4],[7,2,8,4,1,6,1,6],[2,1,7,7,8,2,5,7,7],[9,2,6,6,2,3,8,9,6,3]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706821.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"564074\",24],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-830056.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"TTAAAAAAArrTTTTTTTTTTZZIIllIGSUwwHHHllllllllllllllUmmmmmmmmY6655Vssrrrr\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-25876-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"989722056\",\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-524440-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[178,25,126,121,101,112,58,195,82,113,157,48,72,25,19,132,142,141,155,1,133,111,146,165],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-632498-TheDarkArmy.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[191,179,146,95,22,185,72,160,101,31,76,73,17],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890026-MegaCorp.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,1,5,3,5,2,2,4,4,4,3,3,2,3,4,0,1,4,4,2,2,4,5],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-656028-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[81,81,101,67,82,92,1,145,191,148,77,194,123,33,23,86,29,165,84,2,145,4,110,132,45,194,39,89,95,15,6,79,12,43,63,97,138,191,104]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"37.8.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":985.0100000000177,\"ramUsage\":2.8,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-976656.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[5,8],[1,5],[0,2],[0,5],[2,8],[6,8],[5,10],[1,6],[0,3],[4,6],[1,3],[4,5],[2,9],[1,2],[6,10]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-891710-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"hJ665brQcbG7DrQcbGpG7DrQcbGdEdEdQcbGd30OjV1vxJYYYYYMza7YYYYYR\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-479899-SpeakersfortheDead.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[76,181,34,17,146,122,32,109,103,59,136,123,106,120,84,113,87,181,92,157,62,39,34,103,38,12,168,125,146,104,198,47,135,2,47,187,58,81,67,185,30,14,76,171,70,86]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-265777.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"18725336230\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"21.1.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":984.0100000000177,\"ramUsage\":2.8,\"server\":\"joesguns\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-43328.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[73,[1,3,4,6,7,9,12,14,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-393976.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a()(((\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78053.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[73,114,108,169],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-833328-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,1,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759659-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[37,42,15,45,41,49,18,29,17,41,40,14]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131162.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100000000000001100101001101010111111101100110110010011000101001\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-236489.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[8,71,194,19,162,62,9,60,199,199,197,168,141],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"78.3.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":984.0100000000177,\"ramUsage\":2.8,\"server\":\"zer0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561686-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"TABLE ARRAY TRASH POPUP CACHE\",17],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306409-Ishima.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,17],[20,28],[11,17],[2,5],[14,24],[4,8],[12,21],[7,16],[19,29],[15,24],[14,15],[2,9],[5,12],[25,32],[21,31],[10,11]],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-477770-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,101,25,1,116,17,9,126,14,181,25,112,86,137,180,157,18,131,107,198,146,27,128,97,73,193,57,160,122,62,48,164,32,85,97,22,68,135,198,91,28,96,99],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729786-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")))(((a((((aa)(((\",\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19092.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-441553-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[190,23,87,160,93,171,140,107,65,5],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707711.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[16,24],[2,5],[23,25],[4,6],[1,6],[4,13],[11,12],[19,25],[3,11],[20,27],[20,27],[19,22]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-357526-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":207717680,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737618-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"93572629208\",-7],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"88.9.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":985.0100000000177,\"ramUsage\":2.8,\"server\":\"nectar-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-344277-TheSyndicate.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,1,0],[1,0,0,0],[0,0,1,1],[0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737920-TheDarkArmy.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[83,165,51,106,182,65,16,120,113,79,185,127,121],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277539-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[3,6],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-264015.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-4,10,-5,-6,-3,-8,-7,4,6,8,-10,-2,6,-7,-10,-7,-5,8,8,-5,-9,-3,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-9284-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[6,1],[3,8,9],[8,9,2,7],[2,3,8,6,5],[3,8,1,7,5,8],[9,7,7,2,2,1,9]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-987258.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[82,99,173,194,52,149,74,75,55,29,108,125,9,54,49,180,16,173,50,187,166,160,36,55,35,148,4,22,22,110,34,184,168,107,71,116,189,127,180,29]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-18575-SpeakersfortheDead.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[108,148,192,34,167,55,6,74,138,141,45,143,198,37,19,65,70,132,154,110,39]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783011-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[135,195,133,120,96,64,28,191,132,42,148,129,172,177,32,119,143,43,73,199,101,111,167,117,43],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"75.5.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":978.8100000000177,\"ramUsage\":2.8,\"server\":\"neo-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-235499-TheSyndicate.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"MswypCpCpCpCpL4R6WF6R6WF6R6vkVUvUvUvHAi5LBguV3wLD4YguV3wSt6guV3wSt6gy7t6gy7UdTy7U\",\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826748-TianDiHui.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,8],[12,15],[21,23],[20,27],[15,16],[15,20],[22,30],[12,14],[13,22],[10,15],[19,28],[20,28],[15,20],[22,25],[22,30],[3,9],[14,17],[13,14],[8,17]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667325.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[22,187,188,198,89,86,115,57,158,103,142,159,65,77,110,175,15,44,158,24,52,131,157,140,166,141,41,174,163,67,143,46,10,183,87,85,59,56,173,23,48],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-712369-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[1,0,0,1,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[1,1,0,0,0,0,1],[0,0,0,0,0,1,1],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908929-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-884076.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"17121293177\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"57.1.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.8100000000177,\"ramUsage\":2.8,\"server\":\"silver-helix\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-597504-Ishima.cct\",\"type\":\"Total Ways to Sum\",\"data\":10,\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404456-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,13],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-195756-NiteSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,1,0,3,6,10],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-186851.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,0],[0,0,0,0,1,0,1,0,1],[0,1,1,0,0,0,0,0,0],[1,0,0,1,0,0,0,1,0],[0,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906498-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":730169186,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229264.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[16,47,72,134,102,167,51,189,161,184,26,29,85,147,122,155,117,98,81,81,152,58,103,44,149,69,18,118],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-37174.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,6,9,5,1,0,0,7,0,5,8,10,10,10,2,5],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-263474-MegaCorp.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3f8a5337W4318pF330WNi916vG2Tl6451x923xlA682Ul724itaf45\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"26.0.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":983.0100000000177,\"ramUsage\":2.8,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273075-MegaCorp.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,0,7,10,5,0,6,9,3,2],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-595815.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[35,17,28,3],[44,37,12,41],[44,15,15,10],[10,9,20,49],[11,27,30,4],[7,16,38,3],[15,24,30,25],[38,10,45,31],[43,41,44,2],[38,12,22,8],[46,31,44,37],[17,21,9,42],[14,13,22,29],[46,45,37,49]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450705-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE CACHE LOGIN LINUX POPUP\",16],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-185546-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LINUX MEDIA MACRO ARRAY LOGIN\",14],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64400.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[34,162,198]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"21.4.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":982.0100000000177,\"ramUsage\":2.8,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3982.cct\",\"type\":\"Total Ways to Sum\",\"data\":62,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-270621.cct\",\"type\":\"Total Ways to Sum\",\"data\":61,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59185-MegaCorp.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9TiR6UJDmR126w8g2zA313sXh128vyVyKpiT861p445FobyY148DWlZnwtV258FsKMpkB0118uJ42J436\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-855923.cct\",\"type\":\"Total Ways to Sum\",\"data\":56,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-420810.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-9,-7,-8,6,10,1,7,7,0,4,0,-1,2,-3,-1,7,2,-9,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91705.cct\",\"type\":\"Total Ways to Sum\",\"data\":42,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"35.1.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558429-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0],[1,0,0,0,1,1,0],[0,0,0,0,0,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,0],[0,1,0,1,0,0,0],[0,0,1,0,1,0,0],[0,0,0,0,1,0,0],[1,0,0,0,0,0,0],[1,0,1,1,0,1,0],[1,1,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-224902.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010000000000000100001100010010100010110000100110110111111110000\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640180-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,5],[6,2,7]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-460205-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":96,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187729.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"93w7fKrlWT035aX791d395kUWGX667NkHUowQ743jOp6432Ub3528j\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-104018-NewTokyo.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,2,6,10,2,5,7,0,7,5,1,0,5,0,6,0,9,0,8,5],\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-119803.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":867072890,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570698-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())(a))a(\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-936523.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2133202\",-48],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"51.9.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708837.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,7,38,36,5,44,9,9,40,29,20,46,38],[36,40,2,7,12,5,37,17,23,40,18,2,25],[44,41,45,47,42,20,43,3,28,8,16,20,36]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36862-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[178,158,93,159,158,174,154,166,180,149,94,145,69,168,52,157,8,170,17,33,131,157,160,25,107,176,93],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154196-Chongqing.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1],[0,0,0,0,1,0,0],[0,1,0,0,0,1,1],[0,1,0,1,1,1,1],[0,0,1,1,0,0,1],[0,0,0,0,0,0,0],[1,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,1,0,1,0,1,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709303.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-8,7,5,-1,6,3,10,6,6,-10,-2,10,-2,5,-9,-7,-6,-4,0,-3,-2,-4,-6,9,-10,1,-10,-8,6,-1,-2],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-984902-SpeakersfortheDead.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[0,6],[4,5],[2,5],[0,9],[6,7],[8,9],[2,8],[1,3],[4,8],[8,10],[1,4],[1,10],[0,3],[3,10],[5,10],[1,2]]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-792478-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[48,75,109,137,55,158,194,85,24,195,77,193,54,193,128,174,67],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"83.3.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":60204139,\"moneyMax\":1505103475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":192,\"serverGrowth\":40,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454230-MegaCorp.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":2585,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-936870-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"rrrrr8fffffff7SSnngg8ssdwwwwwaaccuAAvv5RimmmmmmmnnnnnnnnnnnnddPP0WWWSZJO\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293872-TheDarkArmy.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"l777sPPPPPPPPPjj1vo5LLLLLLLLL75566666666aEEG00000000800Z0jHWWWWWWWWWfff11\",\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-140736-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[9,4],[7,4,4],[2,8,6,6],[3,6,1,7,5],[2,8,6,5,9,5],[3,4,3,9,6,3,6],[5,1,4,5,6,6,3,9]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-238176.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[1,0,1,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-538531-TheBlackHand.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01001000100000001000101011000010\",\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921805-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[9,1],[3,1,7],[5,6,5,3]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-320857.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"29864\",-95],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-744055.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[37,[2,4,7,8,10,12,13,14,15,16,18]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21318.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"369243094\",-41],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"51.3.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":57904337,\"moneyMax\":1447608425,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":234,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866213-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[189,[1,3,4,6,8,10,11,13,15]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431241.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"dIIIIIIIIIIIIIrrjjyyyyyyyyyyVVGGcQQOkkkkkkkkkkkkkkuIIIIIIZZAALLEkKKKKKpGGGGGGGwwGGeed\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-368815-SpeakersfortheDead.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CACHE SHELL INBOX MOUSE ARRAY\",3],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518884-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[96,40,87,91,12,87,54,95,99,37,63,80,193,140,194,178,121,3,118,37,121,150,182,135,189,145,122,185,31],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805392-Chongqing.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,1,2,5],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145300-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,6,3,-10,-5,1,4,-5,3,-4,-9,7,1,8,-7,-8,-7,1,-8,-4,0,-9,-1,10,2],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-826089.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,0,0,2,10,0,9],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-926133.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"66iG00WYYFFFFFFFFDDDDDDDDDDDDD55wVVRRff77777777777706ttyyMSbbbbbbbbMMMMMMMM\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-350379-MegaCorp.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FLASH MEDIA MOUSE LOGIN DEBUG\",2],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-782541.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[167,82,140,30,1,8,35,77,92,197,124,31,123,78,109,115,158,99,116,165,117,173,117,30,35,91,122,53,141,6,57,150,54,9,182,171,23],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"61.9.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":62.548,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":981.0100000000177,\"ramUsage\":2.8,\"server\":\"iron-gym\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-324517-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,3],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-654446.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[172,176,17,35,22,94,36,72,116,107,189,183,25,132,49,161,175,24,109,56,105,189,127,47,98,79,51,30,136,148,185,82,154,20,36,4,159,30,145,85,163,79,36,174,169,192,33],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-261046.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[46,[1,2,5,6,7,8,11,12,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-143523-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[136,117,190,161,24,150,45,166,104,186,67],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-255506.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1011011101000111\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928117-NiteSec.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":479869062,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-21830.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,1,0,1,0,1],[0,1,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"24.4.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"millenium-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":969.6100000000176,\"ramUsage\":2.8,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-446543-Ishima.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,9,9,8,0,1,0,5,8,8,6,7,0,0,0,0,2,0,0,3,3],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-699667.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,16],[14,22],[3,11],[18,26],[11,16],[14,16],[13,23],[10,14],[21,28],[1,8],[19,27],[12,22],[25,29],[18,25],[6,10],[20,27],[21,25],[13,15],[5,9],[16,19]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385078-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":79,\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644061-MegaCorp.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHENTERFRAMEMOUSEINBOX\",\"NETWORK\"],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-258059.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":6988869,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780866-MegaCorp.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"PRINTENTERCLOUDMEDIAVIRUS\",\"COMMAND\"],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-905927-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,16],[4,6],[20,24],[6,8],[10,16],[13,20],[17,22],[13,20],[4,7],[6,15],[9,18],[12,20],[14,16],[24,29],[25,32]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4020-Ishima.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[0,7],[5,8],[4,5],[5,8],[1,5],[4,6],[0,3],[3,8],[6,8],[0,5]]],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749351.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,0,1],[0,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,1,1,0,0,1,0],[0,0,1,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-381440.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Vdahyyyyyyyyyiyyyyyyiy3Viy3Viy3ViKyRBKRIRBKRfOuvxHm4cxCUam4KRRRRRRRKRRRRRR\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59658-MegaCorp.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"37067342\",28],\"reward\":{\"type\":0,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"50.7.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":54,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"78.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":755,\"serverGrowth\":60,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-731828-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":313654434,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-311612.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,4,2,0,4,2,2,0,3,4,0,2,7],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-108016-Ishima.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"666666UUWWZZZZZZZZZZZZZZgTTTTTTTT222222222ZzllVVVVVVVTTTTTTTXeeeeeeppSSSSSSSS\",\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-569652.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a))(()((())(()(()()\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-55972-Ishima.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[113,21,123,35,178,70,153,175,130,136,172,80,107,68,69,139,40,156,33,32,179,18,117,152,143,182,92,114,147,33,145,199,4,97,117],\"reward\":{\"type\":0,\"name\":\"Ishima\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-717512.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,5],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"44.4.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":539,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71711-Chongqing.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")a()(()(a)(a)a)(\",\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-304799.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,1],[0,0,0,0,0,0,1,0],[1,0,1,0,1,1,0,0],[0,0,0,1,1,0,0,0],[0,1,1,0,1,0,0,1],[1,1,1,1,1,0,0,1],[1,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-36408.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-2,7,-6,-3,-4,-1,3,5,-10,-5,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-732286-NiteSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[2,4],[8,8,4],[3,8,3,9],[8,2,7,1,7],[2,8,9,1,8,3],[7,9,3,7,7,6,5],[2,7,9,7,5,6,5,4],[2,1,7,9,1,5,9,3,5]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"2.4.6.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":358,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-603694.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"22019913123\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-145688.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"0ggEoooooooll444444444666666666666xxxxsXwwYYYttZZAAAA\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397636-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[39,37,15,14,19,32,44],[18,43,32,25,43,38,10],[14,26,6,9,20,22,28],[30,40,43,23,19,22,30],[40,8,41,42,20,22,48],[35,47,48,50,36,36,30]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-861307-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[7,142,8,58,71,11,10,18,15,66,14,40,156,47,38,143,139,26,116,2,88,88,75],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-762191.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[200,[1,2,3,4,6,7,8,9,10,12,14]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783418.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[131,[3,4,5,10,11,13,14,15,18]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-620531.cct\",\"type\":\"Total Ways to Sum\",\"data\":23,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"86.9.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":210,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":974.8100000000177,\"ramUsage\":2.8,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-571476-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"RRLttGG6CCCCCCCCZ2222NNIIIIIIIww33FFFFFFFFFFFFF88MMMMMMMM\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-832718-Chongqing.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((())())a(a)a(a)a\",\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229321-TianDiHui.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,1,2],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-459126-MegaCorp.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[7,1],[3,4,2],[9,6,1,7],[2,5,2,2,3],[2,1,3,4,2,3],[5,2,9,1,3,2,9],[1,5,3,4,8,9,2,2],[7,8,9,8,9,9,3,6,7],[4,3,8,4,7,6,1,5,5,3],[8,1,2,6,3,2,2,4,9,7,9],[7,2,7,6,4,2,7,6,1,7,4,2]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-146991.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[48,[1,2,3,6,8,9,10,13,14]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-812033.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000100010101101100101100100011100100011110001000011000001101111\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-385340-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[128,[1,3,4,5,6,7,8,10,11,13,14]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"97.2.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-4661.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,2,2,5,4,4,4,1,3,2,2,1,4,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928845.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,11],[25,35],[9,13],[17,23],[13,15],[8,15],[17,19],[2,4],[21,22],[14,19],[17,24],[24,34],[10,11]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375786.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[156,198,135,191,130,81,192,37,98,10,37,46,160,134,150,180,30,168,84,184,13,161,132,72,190,15,194,43,43,82,164,96,170,78,80,54,110,144,74,25,153,162,175,147,5,25],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312074.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,3,25,26,5,17,43,6,16,5,31,47,23],[2,24,16,50,10,14,1,47,21,40,19,10,43]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-98186.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":51212531523475576,\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907786-TheSyndicate.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,1,0,0,0],[0,0,1,0,0,1,0,0,1,0,1],[0,0,0,0,1,1,1,0,0,1,0],[0,0,0,0,1,0,1,0,1,1,0],[1,1,0,0,0,0,1,0,0,0,0],[0,0,1,0,1,0,1,0,0,0,0],[0,1,0,0,1,1,0,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,1,1,0,0,0,0,0],[1,0,0,0,0,0,0,1,0,0,0],[1,0,0,1,0,0,0,0,0,1,0]],\"reward\":{\"type\":0,\"name\":\"The Syndicate\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226345-TianDiHui.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[29,18,5,30,44,22,21,13,42,25,13,34],[30,24,50,8,28,34,30,8,17,43,25,18],[5,1,3,33,48,8,12,5,35,11,31,11],[35,9,44,8,9,43,14,33,43,20,17,39],[11,34,9,15,21,4,5,49,7,27,33,48],[36,46,21,1,43,24,33,46,36,44,34,1],[23,47,11,10,18,50,21,32,46,37,48,15]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323416.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"YwWYUEwWYUEwfXtwfOi1qCwEaswx7gjr7gBiRsD4TFKD4TFK1lVKD4TFKQuKQuKM54wM54wM54wM\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"11.0.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"CSEC\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":59,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":979.8100000000177,\"ramUsage\":2.8,\"server\":\"CSEC\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":1,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-63430.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":300208042297,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645493-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,23],[16,17],[18,25],[17,25],[14,22],[5,11],[20,27],[3,12],[4,10],[19,21],[3,8],[8,18],[25,35]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-961029-TheDarkArmy.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[1,9],[6,9],[0,4],[3,8],[7,10],[4,6],[3,9],[0,2],[3,7],[6,8],[6,7],[2,10],[5,7],[0,8],[2,5],[2,3],[5,9]]],\"reward\":{\"type\":0,\"name\":\"The Dark Army\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-606569.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":258006894679905,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518593.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":187395653,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-66666-SpeakersfortheDead.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()()a()))\",\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"18.0.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"36.3.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892364-MegaCorp.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[2,29,48,47,35,41,32],[43,25,26,17,24,32,50]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690730-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,1,0,1,1,0],[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,1,1,0,0,0],[1,0,0,0,0,1,1,0,1,0,0],[1,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,1,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-596321.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[3,4],[3,8],[1,2],[0,3],[1,3],[2,4],[5,7],[4,5],[5,6],[3,9],[2,8],[3,6],[5,9],[2,3]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133523-SpeakersfortheDead.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,21],[1,10],[2,5],[13,19],[11,13],[19,28],[14,15],[13,15],[25,35],[12,17],[19,21],[12,19],[12,17],[10,15]],\"reward\":{\"type\":0,\"name\":\"Speakers for the Dead\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-147882-Chongqing.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[4],[6,4],[5,1,1],[1,9,2,4],[9,4,1,8,5],[4,1,4,7,2,5],[5,4,4,1,6,6,3]],\"reward\":{\"type\":0,\"name\":\"Chongqing\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"13.1.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"server0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server0\",\"httpPortOpen\":false,\"ip\":\"82.9.9.7\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server0\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":978.8100000000177,\"ramUsage\":2.8,\"server\":\"server0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":187244,\"temporary\":false}}]}},\"server1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server1\",\"httpPortOpen\":false,\"ip\":\"34.6.3.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server1\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":977.8100000000177,\"ramUsage\":2.8,\"server\":\"server1\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374489,\"temporary\":false}}]}},\"server2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server2\",\"httpPortOpen\":false,\"ip\":\"91.6.0.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server2\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":976.8100000000177,\"ramUsage\":2.8,\"server\":\"server2\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374489,\"temporary\":false}}]}},\"server3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server3\",\"httpPortOpen\":false,\"ip\":\"36.4.5.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1016.8100000000179,\"ramUsage\":2.8,\"server\":\"server3\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server4\",\"httpPortOpen\":false,\"ip\":\"69.6.2.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1015.8100000000179,\"ramUsage\":2.8,\"server\":\"server4\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server5\",\"httpPortOpen\":false,\"ip\":\"69.6.8.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1014.8100000000179,\"ramUsage\":2.8,\"server\":\"server5\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server6\",\"httpPortOpen\":false,\"ip\":\"56.5.6.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1013.6100000000179,\"ramUsage\":2.8,\"server\":\"server6\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server7\",\"httpPortOpen\":false,\"ip\":\"10.6.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1012.6100000000179,\"ramUsage\":2.8,\"server\":\"server7\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server8\",\"httpPortOpen\":false,\"ip\":\"70.2.1.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1011.6100000000179,\"ramUsage\":2.8,\"server\":\"server8\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server9\",\"httpPortOpen\":false,\"ip\":\"8.8.4.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1010.6100000000179,\"ramUsage\":2.8,\"server\":\"server9\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server10\",\"httpPortOpen\":false,\"ip\":\"94.3.0.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1009.6100000000179,\"ramUsage\":2.8,\"server\":\"server10\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server11\",\"httpPortOpen\":false,\"ip\":\"72.5.2.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1008.6100000000179,\"ramUsage\":2.8,\"server\":\"server11\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server12\",\"httpPortOpen\":false,\"ip\":\"79.0.3.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1007.6100000000179,\"ramUsage\":2.8,\"server\":\"server12\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server13\",\"httpPortOpen\":false,\"ip\":\"39.8.3.0\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1006.4100000000178,\"ramUsage\":2.8,\"server\":\"server13\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server14\",\"httpPortOpen\":false,\"ip\":\"12.4.3.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1005.4100000000178,\"ramUsage\":2.8,\"server\":\"server14\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server15\",\"httpPortOpen\":false,\"ip\":\"31.2.2.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1004.4100000000178,\"ramUsage\":2.8,\"server\":\"server15\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server16\",\"httpPortOpen\":false,\"ip\":\"18.4.9.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1003.4100000000178,\"ramUsage\":2.8,\"server\":\"server16\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}},\"server17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server17\",\"httpPortOpen\":false,\"ip\":\"70.8.1.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"megacorp\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1002.4100000000178,\"ramUsage\":2.8,\"server\":\"server17\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":374491,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":219.4095,\"playerReputation\":33525063.28711474}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.1507,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0214,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":209.1732,\"isBanned\":false,\"isMember\":true,\"playerReputation\":8062833.916988919}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":23.2942,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":144.8037,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6413189.82314533}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":196.1397,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7760290.065376739}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":101.641,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":4.0865,\"isBanned\":false,\"isMember\":true,\"playerReputation\":284027.24982742}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2,\"isBanned\":false,\"isMember\":true,\"playerReputation\":235397.7946415849}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":76.4372,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3155682.198331319}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":129.2457,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2,\"isBanned\":false,\"isMember\":true,\"playerReputation\":342440.2388889752}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":2,\"isBanned\":false,\"isMember\":true,\"playerReputation\":383586.1322764994}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":224.1884,\"isBanned\":false,\"isMember\":true,\"playerReputation\":8185111.14675716}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":74.4647,\"isBanned\":false,\"isMember\":true,\"playerReputation\":3645144.734615602}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":184.308,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7380884.462174732}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":188.0158,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7211312.82278106}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":111.8081,\"isBanned\":false,\"isMember\":true,\"playerReputation\":5319717.621095939}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":195.4019,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7708338.093037701}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":134.3561,\"isBanned\":false,\"isMember\":true,\"playerReputation\":30359.67473560517}}}","AliasesSave":"{\"crack\":\"run crack.js\",\"scanalyze\":\"scan-analyze\",\"sa\":\"scan-analyze\",\"2to\":\"run power.js 2\",\"cs\":\"run server.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":21599.439166460164,\"lastPrice\":21655.428675261945,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":21.03589766747222,\"otlkMagForecast\":30.302078272808476,\"cap\":63408959,\"spreadPerc\":0.4,\"shareTxForMovement\":38284,\"shareTxUntilMovement\":34748,\"totalShares\":128300000,\"maxShares\":25700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":53721.53040725984,\"lastPrice\":53558.99276175597,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":true,\"otlkMag\":18.014895852987035,\"otlkMagForecast\":69.5691502233241,\"cap\":696297122,\"spreadPerc\":0.4,\"shareTxForMovement\":51249,\"shareTxUntilMovement\":51249,\"totalShares\":76600000,\"maxShares\":15300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":13399.467978548453,\"lastPrice\":13458.769511647508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":12.899322942672114,\"otlkMagForecast\":36.69572795349454,\"cap\":251553824,\"spreadPerc\":0.4,\"shareTxForMovement\":36248,\"shareTxUntilMovement\":36248,\"totalShares\":122800000,\"maxShares\":24600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11497.045922788431,\"lastPrice\":11544.293544087917,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":12.165076042781276,\"otlkMagForecast\":62.13145350801584,\"cap\":279288180,\"spreadPerc\":0.5,\"shareTxForMovement\":58606,\"shareTxUntilMovement\":58606,\"totalShares\":94900000,\"maxShares\":19000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":73788.13930539804,\"lastPrice\":73486.14472695279,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":11.88405475387699,\"otlkMagForecast\":38.89157562101042,\"cap\":730636075,\"spreadPerc\":0.3,\"shareTxForMovement\":42560,\"shareTxUntilMovement\":42560,\"totalShares\":44000000,\"maxShares\":8800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":49086.294015301115,\"lastPrice\":48765.64666687929,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":13.598531604410505,\"otlkMagForecast\":67.26626136712478,\"cap\":147501167,\"spreadPerc\":0.1,\"shareTxForMovement\":55953,\"shareTxUntilMovement\":55953,\"totalShares\":35800000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":27097.835437814258,\"lastPrice\":26959.77109016715,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":11.597838582591063,\"otlkMagForecast\":40.23545510563956,\"cap\":412517660,\"spreadPerc\":0.3,\"shareTxForMovement\":52798,\"shareTxUntilMovement\":52798,\"totalShares\":89100000,\"maxShares\":17800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":111214.09423497411,\"lastPrice\":110369.75730733805,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":17.24941419525088,\"otlkMagForecast\":66.7506507710169,\"cap\":346584210,\"spreadPerc\":0.7,\"shareTxForMovement\":53231,\"shareTxUntilMovement\":53231,\"totalShares\":61900000,\"maxShares\":12400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":30407.176291564963,\"lastPrice\":30562.895230885508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":true,\"otlkMag\":6.497786085181288,\"otlkMagForecast\":57.35058409535014,\"cap\":503080985,\"spreadPerc\":0.8,\"shareTxForMovement\":44786,\"shareTxUntilMovement\":44786,\"totalShares\":54100000,\"maxShares\":10800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":14554.301222970857,\"lastPrice\":14618.713659127976,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":11.673117191401474,\"otlkMagForecast\":38.16326025919537,\"cap\":159387798,\"spreadPerc\":0.8,\"shareTxForMovement\":88160,\"shareTxUntilMovement\":88160,\"totalShares\":123500000,\"maxShares\":24700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":10449.26526461608,\"lastPrice\":10486.921849941195,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":7.982254913373384,\"otlkMagForecast\":58.50770642720021,\"cap\":49027605,\"spreadPerc\":0.7,\"shareTxForMovement\":47233,\"shareTxUntilMovement\":47233,\"totalShares\":71600000,\"maxShares\":14300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12199.708263936202,\"lastPrice\":12257.55662173541,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.024875180199653,\"otlkMagForecast\":43.12750697801682,\"cap\":158688740,\"spreadPerc\":1,\"shareTxForMovement\":101899,\"shareTxUntilMovement\":101899,\"totalShares\":78400000,\"maxShares\":15700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":14309.544134373136,\"lastPrice\":14370.159248489023,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":9.10137214469788,\"otlkMagForecast\":42.6104062501615,\"cap\":211382260,\"spreadPerc\":1,\"shareTxForMovement\":68682,\"shareTxUntilMovement\":68682,\"totalShares\":50200000,\"maxShares\":10000000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":20514.541581004294,\"lastPrice\":20588.470949805618,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":9.303246993363985,\"otlkMagForecast\":61.38413862816256,\"cap\":237447276,\"spreadPerc\":1,\"shareTxForMovement\":85223,\"shareTxUntilMovement\":85223,\"totalShares\":46200000,\"maxShares\":9200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14995.15145975398,\"lastPrice\":15049.190302304885,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":5.937447910851405,\"otlkMagForecast\":44.235875255917385,\"cap\":64869494,\"spreadPerc\":0.5,\"shareTxForMovement\":50581,\"shareTxUntilMovement\":50581,\"totalShares\":41700000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":17000.051604088116,\"lastPrice\":17072.063686253787,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":6.627158426587331,\"otlkMagForecast\":58.32747512814993,\"cap\":363022356,\"spreadPerc\":0.7,\"shareTxForMovement\":110598,\"shareTxUntilMovement\":110598,\"totalShares\":41200000,\"maxShares\":8200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":18101.60896204898,\"lastPrice\":18182.86503952444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":7.455939763552278,\"otlkMagForecast\":41.31379319699631,\"cap\":213700188,\"spreadPerc\":0.6,\"shareTxForMovement\":50392,\"shareTxUntilMovement\":50392,\"totalShares\":42500000,\"maxShares\":8500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18759.374451495853,\"lastPrice\":18824.606552683286,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":9.878543331739762,\"otlkMagForecast\":60.796232782018734,\"cap\":460885054,\"spreadPerc\":0.7,\"shareTxForMovement\":86780,\"shareTxUntilMovement\":86780,\"totalShares\":37100000,\"maxShares\":7400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24088.24714694543,\"lastPrice\":24202.468365155335,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.046753068262537,\"otlkMagForecast\":55.007545080670894,\"cap\":144753221,\"spreadPerc\":0.7,\"shareTxForMovement\":43878,\"shareTxUntilMovement\":43878,\"totalShares\":33300000,\"maxShares\":6700000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":30732.539507601752,\"lastPrice\":31218.29618938774,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":false,\"otlkMag\":6.571001063466545,\"otlkMagForecast\":45.12416002002285,\"cap\":116150290,\"spreadPerc\":1.2,\"shareTxForMovement\":46553,\"shareTxUntilMovement\":46553,\"totalShares\":67300000,\"maxShares\":13500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6610.223529579348,\"lastPrice\":6555.10323843497,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.33,\"b\":true,\"otlkMag\":5.691783570593571,\"otlkMagForecast\":57.03474339237548,\"cap\":39366178,\"spreadPerc\":0.5,\"shareTxForMovement\":68373,\"shareTxUntilMovement\":68373,\"totalShares\":54900000,\"maxShares\":11000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":7949.791073209582,\"lastPrice\":7981.455861639384,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":1.4549727107281067,\"otlkMagForecast\":52.55840561338086,\"cap\":93410725,\"spreadPerc\":0.5,\"shareTxForMovement\":93578,\"shareTxUntilMovement\":93578,\"totalShares\":30300000,\"maxShares\":6100000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":569.8887776577334,\"lastPrice\":562.8429382906847,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.98,\"b\":true,\"otlkMag\":18.45208163885805,\"otlkMagForecast\":60.502806765813276,\"cap\":115513111,\"spreadPerc\":1.2,\"shareTxForMovement\":60990,\"shareTxUntilMovement\":60990,\"totalShares\":30700000,\"maxShares\":6100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":8176.739855214771,\"lastPrice\":8093.840721139312,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":false,\"otlkMag\":6.038763960194856,\"otlkMagForecast\":43.42083615490006,\"cap\":117738852,\"spreadPerc\":0.8,\"shareTxForMovement\":18365,\"shareTxUntilMovement\":18365,\"totalShares\":26700000,\"maxShares\":5300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3892.1431007676824,\"lastPrice\":3915.2742376679134,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":false,\"otlkMag\":5.196518698777087,\"otlkMagForecast\":47.30627280883261,\"cap\":21573139,\"spreadPerc\":0.4,\"shareTxForMovement\":91507,\"shareTxUntilMovement\":91507,\"totalShares\":38000000,\"maxShares\":7600000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2228.9815108624416,\"lastPrice\":2267.313000405816,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.72,\"b\":false,\"otlkMag\":5.136515507070224,\"otlkMagForecast\":41.93357111671021,\"cap\":23810452,\"spreadPerc\":1.2,\"shareTxForMovement\":30295,\"shareTxUntilMovement\":30295,\"totalShares\":40800000,\"maxShares\":8200000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1435.4432163891438,\"lastPrice\":1445.2446611957985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":false,\"otlkMag\":5.403915787942299,\"otlkMagForecast\":46.29202301991152,\"cap\":3604539,\"spreadPerc\":1.1,\"shareTxForMovement\":45220,\"shareTxUntilMovement\":45220,\"totalShares\":40400000,\"maxShares\":8100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":676.2935213269894,\"lastPrice\":673.1865402361898,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":1.202901147502359,\"otlkMagForecast\":49.90763526031548,\"cap\":10536841,\"spreadPerc\":0.7,\"shareTxForMovement\":64997,\"shareTxUntilMovement\":64997,\"totalShares\":51400000,\"maxShares\":10300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1009.8048410921555,\"lastPrice\":1026.7234109247383,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.65,\"b\":true,\"otlkMag\":6.281254625372046,\"otlkMagForecast\":55.05358993278124,\"cap\":5566235,\"spreadPerc\":1,\"shareTxForMovement\":42982,\"shareTxUntilMovement\":42982,\"totalShares\":18100000,\"maxShares\":3600000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":1395.5279599869818,\"lastPrice\":1421.9971177738998,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3,\"b\":false,\"otlkMag\":6.356617956610021,\"otlkMagForecast\":46.533471916711036,\"cap\":2222710,\"spreadPerc\":1,\"shareTxForMovement\":17338,\"shareTxUntilMovement\":15078,\"totalShares\":49500000,\"maxShares\":9900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":4706.99491220417,\"lastPrice\":4662.1912004797705,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":true,\"otlkMag\":9.429547606397847,\"otlkMagForecast\":63.90871966862982,\"cap\":33831581,\"spreadPerc\":0.6,\"shareTxForMovement\":66032,\"shareTxUntilMovement\":66032,\"totalShares\":69600000,\"maxShares\":13900000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":21235.30651421252,\"lastPrice\":21129.770135093622,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":6.399309316478503,\"otlkMagForecast\":57.82367980853802,\"cap\":535313969,\"spreadPerc\":0.5,\"shareTxForMovement\":152876,\"shareTxUntilMovement\":152876,\"totalShares\":15800000,\"maxShares\":3200000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":23318.857405124458,\"lastPrice\":23224.88208417054,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":12.06805547761763,\"otlkMagForecast\":38.604717539437814,\"cap\":442291267,\"spreadPerc\":0.5,\"shareTxForMovement\":184072,\"shareTxUntilMovement\":184072,\"totalShares\":18300000,\"maxShares\":3700000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":7765212,\"lastUpdate\":1701099474633,\"ticksUntilCycle\":45}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1701099478227","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}