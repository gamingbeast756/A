{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":23,\"max\":23},\"skills\":{\"hacking\":387,\"strength\":131,\"defense\":139,\"dexterity\":135,\"agility\":155,\"charisma\":77,\"intelligence\":0},\"exp\":{\"hacking\":10978984.677278008,\"strength\":27054.404159815847,\"defense\":23894.666447581807,\"dexterity\":25089.768103805192,\"agility\":25045.79470953163,\"charisma\":4818.853878173786,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.0818196810500127,\"hacking_speed\":1.0932622423621474,\"hacking_money\":1.030304458142869,\"hacking_grow\":1.030304458142869,\"hacking\":1.2154244116596895,\"strength\":1.030304458142869,\"defense\":1.133334903957156,\"dexterity\":1.0818196810500127,\"agility\":1.249501731612765,\"charisma\":1.030304458142869,\"hacking_exp\":1.133334903957156,\"strength_exp\":1.133334903957156,\"defense_exp\":1.133334903957156,\"dexterity_exp\":1.133334903957156,\"agility_exp\":1.133334903957156,\"charisma_exp\":1.133334903957156,\"company_rep\":1.564002167460875,\"faction_rep\":1.3033351395507293,\"crime_money\":1.416668629946445,\"crime_success\":1.030304458142869,\"hacknet_node_money\":2.5985244344792666,\"hacknet_node_purchase_cost\":0.742498971011848,\"hacknet_node_ram_cost\":0.9705868902115661,\"hacknet_node_core_cost\":0.9705868902115661,\"hacknet_node_level_cost\":0.8249988566798312,\"work_money\":1.133334903957156,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Sector-12\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":41161.399999930254,\"ram\":64,\"totalMoneyGenerated\":225835131.57145777,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":41160.59999993027,\"ram\":64,\"totalMoneyGenerated\":207575751.77831876,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":39722.799999957,\"ram\":64,\"totalMoneyGenerated\":206660250.29845488,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":39721.799999957024,\"ram\":64,\"totalMoneyGenerated\":205444136.4149566,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":39721.59999995703,\"ram\":64,\"totalMoneyGenerated\":205444503.53993022,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":39721.39999995703,\"ram\":64,\"totalMoneyGenerated\":201415078.44972616,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":200,\"moneyGainRatePerSecond\":6809.106024370061,\"onlineTimeSeconds\":20594.20000003986,\"ram\":64,\"totalMoneyGenerated\":140168825.98199582,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":177,\"moneyGainRatePerSecond\":1155.8369587777179,\"onlineTimeSeconds\":20594.20000003986,\"ram\":16,\"totalMoneyGenerated\":23777791.60412395,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":3.8977866517189,\"onlineTimeSeconds\":20594.000000039858,\"ram\":1,\"totalMoneyGenerated\":80271.01830558288,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":3.8977866517189,\"onlineTimeSeconds\":20593.600000039856,\"ram\":1,\"totalMoneyGenerated\":80269.45919092219,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":3.8977866517189,\"onlineTimeSeconds\":20593.400000039856,\"ram\":1,\"totalMoneyGenerated\":80268.67963359185,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":1,\"moneyGainRatePerSecond\":3.8977866517189,\"onlineTimeSeconds\":20593.200000039855,\"ram\":1,\"totalMoneyGenerated\":80267.9000762615,\"name\":\"hacknet-node-11\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"MegaCorp\":\"IT Intern\"},\"karma\":-20086.272499999024,\"numPeopleKilled\":4636,\"location\":\"Travel Agency\",\"money\":9867878811.612396,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1263984,\"codingcontract\":0,\"corporation\":0,\"crime\":532716988.2620292,\"gang\":0,\"hacking\":9119459181.338623,\"hacknet\":1416642546.712142,\"hacknet_expenses\":-233550398.278601,\"hospitalization\":-6508570.8824968785,\"infiltration\":6883052.09508942,\"sleeves\":0,\"stock\":0,\"total\":9867877698.612396,\"work\":138858.9124366038,\"servers\":-675840000,\"other\":-290799975.62340033,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-77610240,\"codingcontract\":0,\"corporation\":0,\"crime\":1360674234.693815,\"gang\":0,\"hacking\":30527653765.92328,\"hacknet\":3450641896.9195604,\"hacknet_expenses\":-1026999395.2125458,\"hospitalization\":-28298570.882496882,\"infiltration\":6883052.09508942,\"sleeves\":0,\"stock\":0,\"total\":10077722292.01227,\"work\":142234.18984147944,\"servers\":-18573378016.59504,\"other\":-931299093.6894159,\"augmentations\":-4630687575.749999}},\"playtimeSinceLastAug\":41571400,\"playtimeSinceLastBitnode\":247876200,\"lastAugReset\":1698624784981,\"lastNodeReset\":-1,\"purchasedServers\":[\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\"],\"scriptProdSinceLastAug\":9119414995.946276,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698418731041},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698418851063},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698423350648},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698423831553},{\"ID\":\"NS2\",\"unlockedOn\":1698424491410},{\"ID\":\"TOR\",\"unlockedOn\":1698426124411},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698426244450},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698435726837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698435906834},{\"ID\":\"NITESEC\",\"unlockedOn\":1698469184520},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698470084511},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698519337342},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698528937339},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698533330755},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698612399549},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698623300568},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698623600566}],\"terminalCommandHistory\":[\"connect foodnstuff\",\"connect CSEC\",\"backdoor\",\"home\",\"run spread.j\",\"run spread.js\",\"connect darkweb\",\"buy -l\",\"buy relaysmtp.exe\",\"cls\",\"home\",\"run spread.j\",\"run spread.js\",\"run buyserver.js\",\"connect darkweb\",\"buy -l\",\"buy httpworm.exe\",\"buy autolink.ece\",\"buy autolink.exe\",\"home\",\"cls\",\"scan-analyze 5\",\"scan-analyze 3\",\"connect darkweb\",\"buy -l\",\"buy deepscanv1.exe\",\"buy serverprofiler.exe\",\"cls\",\"home\",\"cls\",\"scan-analyze 5\",\"crack avmnite-02h\",\"backdoor\",\"home\",\"nano crack.js\",\"nano hack.js\",\"run spread.js\",\"run hack.js -t 300\",\"connect darkweb\",\"buy -l\",\"buy sqlinject.exe\",\"home\",\"run spread.js\",\"scan-analyze 5\",\"crack darkweb\",\"nano crack.js\",\"nano buyserver.js\",\"run buyserver.js\",\"cls\",\"run buyserver.js\"],\"lastUpdate\":1698666356444,\"lastSave\":1698666353669,\"totalPlaytime\":247876200,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":103354,\"crimeType\":\"Homicide\",\"unitCompleted\":800}},\"focus\":false,\"entropy\":0,\"identifier\":\"1fbc07265b326\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.9.3.9\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"sigmahack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"sigma-cosmetics\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"sigmahack.js\",\"server\":\"home\"}}],[\"8gbserver/sigmahack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"sigma-cosmetics\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"8gbserver/sigmahack.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"home\"}}],[\"buyserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let serverGigs = 8096;\\n  let servers = 12;\\n  let ramUsage = ns.getScriptRam(\\\"hack.js\\\");\\n  while (true) {\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") > 55000 * serverGigs) {\\n      ns.purchaseServer(\\\"server\\\" + servers, serverGigs);\\n      ns.scp(\\\"hack.js\\\", \\\"server\\\" + servers);\\n      ns.exec(\\\"hack.js\\\", \\\"server\\\" + servers, Math.floor(serverGigs / ramUsage));\\n      ns.tprint(serverGigs + \\\"gb server bought\\\");\\n      servers++;\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"buyserver.js\",\"server\":\"home\"}}],[\"crack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  let ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n    ports++;\\n  }\\n  ns.tprint(ports + \\\"/\\\" + ns.getServerNumPortsRequired(target) + \\\" ports opened\\\")\\n  // Get root access to target server\\n  ns.nuke(target);\\n}\",\"filename\":\"crack.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[127.2172252408929,300,25500,25500]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":698700.9682895872,\"onlineMoneyMade\":127.2172252408929,\"onlineRunningTime\":34417.41000005421,\"ramUsage\":2.8,\"server\":\"home\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":300,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"84.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":69969547012,\"moneyMax\":1749238675300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1211,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"36.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":49446507050,\"moneyMax\":1236162676250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1266,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"44.6.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":22014087964,\"moneyMax\":550352199100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1011,\"serverGrowth\":78,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"92.5.7.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":19557626020,\"moneyMax\":488940650500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1005,\"serverGrowth\":84,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"60.7.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34213497590,\"moneyMax\":855337439750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":65,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580631.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010000010000000000000000000000000010010101101111100110100000001\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"59.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":15295006038,\"moneyMax\":382375150950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":966,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"51.4.3.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":17463117227,\"moneyMax\":436577930675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"42.3.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":23433777932,\"moneyMax\":585844448300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1242,\"serverGrowth\":93,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"47.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":20111255296,\"moneyMax\":502781382400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1180,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"67.5.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1638675111,\"moneyMax\":40966877775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":87,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"34.5.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1553,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"14.2.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1002041397,\"moneyMax\":25051034925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":68,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"42.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":937813190,\"moneyMax\":23445329750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":61,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"77.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":637741165,\"moneyMax\":15943529125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":62,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"67.6.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":632112786,\"moneyMax\":15802819650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":74,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"28.0.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":760812660,\"moneyMax\":19020316500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":73,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"2.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":927261995,\"moneyMax\":23181549875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"69.0.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1121334729,\"moneyMax\":28033368225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":86,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-956003.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[89,[1,2,4,6,8,9,10,11,14,15]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"60.9.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":784768581,\"moneyMax\":19619214525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":867,\"serverGrowth\":68,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"51.1.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":595034041,\"moneyMax\":14875851025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":81,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"79.4.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":841372380,\"moneyMax\":21034309500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":904,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"67.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":759026367,\"moneyMax\":18975659175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":71,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"29.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1172064680,\"moneyMax\":29301617000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"57.1.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"omnia\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":925582133,\"moneyMax\":23139553325,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":855,\"serverGrowth\":61,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-765205-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"emTTTTTTTTTTTTTTTTT770000Fee44444444444444KLOE5555511uuuuuuuuucccc\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"52.0.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":949584948,\"moneyMax\":23739623700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":67,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"87.6.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":754927637,\"moneyMax\":18873190925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"43.8.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":767018968,\"moneyMax\":19175474200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":72,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"42.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1462631025,\"moneyMax\":36565775625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":63,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"81.5.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"global-pharm\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1561730018,\"moneyMax\":39043250450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":822,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[709758.3313147895,24,272,384]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9084.812590120577,\"onlineMoneyMade\":709758.3313147895,\"onlineRunningTime\":34410.81000005433,\"ramUsage\":2.8,\"server\":\"global-pharm\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"59.1.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1121602935,\"moneyMax\":28040073375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":72,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"98.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1370922887,\"moneyMax\":34273072175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":77,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"68.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1096974262,\"moneyMax\":27424356550,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":812,\"serverGrowth\":79,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"92.6.5.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":710546256,\"moneyMax\":17763656400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":683,\"serverGrowth\":56,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"68.5.1.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":660065569,\"moneyMax\":16501639225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":513,\"serverGrowth\":54,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"28.9.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":663717719,\"moneyMax\":16592942975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":551,\"serverGrowth\":59,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"54.3.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"aevum-police\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":349434501,\"moneyMax\":8735862525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":448,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[4828124.5724007115,20,296,372]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9302.412891680351,\"onlineMoneyMade\":4828124.5724007115,\"onlineRunningTime\":34412.81000005429,\"ramUsage\":2.8,\"server\":\"aevum-police\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"28.1.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":245671877,\"moneyMax\":6141796925,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":386,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[117265010.01584303,264,3520,3916]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":103972.14408902985,\"onlineMoneyMade\":117265010.01584303,\"onlineRunningTime\":34413.810000054276,\"ramUsage\":2.8,\"server\":\"rothman-uni\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"23.3.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zb-institute\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1011164269,\"moneyMax\":25279106725,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":748,\"serverGrowth\":82,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"5.3.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":224053788,\"moneyMax\":5601344700,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":54,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"12.2.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":569246490,\"moneyMax\":14231162250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":590,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"35.5.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":419200950,\"moneyMax\":10480023750,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":432,\"serverGrowth\":53,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"40.0.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":159330213,\"moneyMax\":3983255325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":325,\"serverGrowth\":46,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[2046.3230871890246,8,288,384]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9220.812778595437,\"onlineMoneyMade\":2046.3230871890246,\"onlineRunningTime\":34415.01000005425,\"ramUsage\":2.8,\"server\":\"the-hub\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"2.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":246503307,\"moneyMax\":6162582675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":349,\"serverGrowth\":61,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"70.9.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":407,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[73858657.51954667,352,3300,4048]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104420.94471099689,\"onlineMoneyMade\":73858657.51954667,\"onlineRunningTime\":34411.810000054305,\"ramUsage\":2.8,\"server\":\"netlink\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"19.2.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":72939244,\"moneyMax\":1823481100,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":292,\"serverGrowth\":60,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"34.7.6.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.006,\"minDifficulty\":1,\"moneyAvailable\":1727784,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"0.1.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[560522.6883755598,16,288,376]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9220.812778595437,\"onlineMoneyMade\":560522.6883755598,\"onlineRunningTime\":34423.010000054106,\"ramUsage\":2.8,\"server\":\"foodnstuff\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"53.7.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":14123.234894781755,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[9265.856288045912,24,284,368]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9071.21257127309,\"onlineMoneyMade\":9265.856288045912,\"onlineRunningTime\":34422.01000005413,\"ramUsage\":2.8,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"83.3.4.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6023576.924518693,28,272,388]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9275.21285398538,\"onlineMoneyMade\":6023576.924518693,\"onlineRunningTime\":34421.01000005414,\"ramUsage\":2.8,\"server\":\"joesguns\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"9.7.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[25350904.73490649,54,603,882]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20869.22892146713,\"onlineMoneyMade\":25350904.73490649,\"onlineRunningTime\":34420.010000054164,\"ramUsage\":2.8,\"server\":\"zer0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"74.4.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[545245.4833785682,20,288,372]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9180.012722052978,\"onlineMoneyMade\":545245.4833785682,\"onlineRunningTime\":34421.01000005414,\"ramUsage\":2.8,\"server\":\"nectar-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"20.0.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[1327244.6268946454,45,585,891]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20746.82875183976,\"onlineMoneyMade\":1327244.6268946454,\"onlineRunningTime\":34421.01000005414,\"ramUsage\":2.8,\"server\":\"neo-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"59.8.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[29866.283913179763,189,1323,2079]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48337.866988676746,\"onlineMoneyMade\":29866.283913179763,\"onlineRunningTime\":34416.01000005424,\"ramUsage\":2.8,\"server\":\"silver-helix\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"22.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[131777.87972279356,16,264,392]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9084.812590120577,\"onlineMoneyMade\":131777.87972279356,\"onlineRunningTime\":34420.010000054164,\"ramUsage\":2.8,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"87.9.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6115010.696011498,24,288,372]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9193.612740900464,\"onlineMoneyMade\":6115010.696011498,\"onlineRunningTime\":34419.01000005418,\"ramUsage\":2.8,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"33.7.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[4783.88183652844,36,648,855]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20838.62887906029,\"onlineMoneyMade\":4783.88183652844,\"onlineRunningTime\":34415.01000005425,\"ramUsage\":2.8,\"server\":\"phantasy\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"92.1.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[13549.814420054028,36,612,873]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20685.628667026074,\"onlineMoneyMade\":13549.814420054028,\"onlineRunningTime\":34417.010000054215,\"ramUsage\":2.8,\"server\":\"max-hardware\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"30.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":26,\"minDifficulty\":9,\"moneyAvailable\":67161089,\"moneyMax\":1679027225,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[25747791.970710617,63,630,855]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20930.429006280818,\"onlineMoneyMade\":25747791.970710617,\"onlineRunningTime\":34413.810000054276,\"ramUsage\":2.8,\"server\":\"omega-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"5.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":42079498,\"moneyMax\":1051987450,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":272,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"84.2.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[243.6051745373032,36,657,855]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20991.629091094506,\"onlineMoneyMade\":243.6051745373032,\"onlineRunningTime\":34418.0100000542,\"ramUsage\":2.8,\"server\":\"iron-gym\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"3.8.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"millenium-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":487,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[1361947.8753991101,72,603,873]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21114.029260721876,\"onlineMoneyMade\":1361947.8753991101,\"onlineRunningTime\":34411.810000054305,\"ramUsage\":2.8,\"server\":\"millenium-fitness\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287099-TianDiHui.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[9,10,4,29,15,57,86,75,160,13,197,195,122,169,106],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"85.0.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"0.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":747,\"serverGrowth\":53,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"49.3.1.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":507,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"41.3.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":351,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"49.9.4.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":215,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[62257245.05103611,176,3476,4048]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":104271.34450367455,\"onlineMoneyMade\":62257245.05103611,\"onlineRunningTime\":34420.010000054164,\"ramUsage\":2.8,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"90.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"16.9.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"CSEC\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":54,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[136206.5719325652,6,70,94]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2315.4032087844735,\"onlineMoneyMade\":136206.5719325652,\"onlineRunningTime\":34422.01000005413,\"ramUsage\":2.8,\"server\":\"CSEC\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":1,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-536300.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,1],[0,1,0,0,1,0,0,0],[0,1,0,0,1,1,0,0],[0,0,0,0,0,0,0,0],[1,1,0,0,1,0,0,0]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"2.2.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"22.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"56.4.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"server0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server0\",\"httpPortOpen\":false,\"ip\":\"58.2.3.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[2378499424.4795184,3650,27740,30295]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":836435.1591675021,\"onlineMoneyMade\":2378499424.4795184,\"onlineRunningTime\":22670.010000047412,\"ramUsage\":2.8,\"server\":\"server0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server1\",\"httpPortOpen\":false,\"ip\":\"44.9.9.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[582784140.3864911,1095,29200,29930]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":821543.138529505,\"onlineMoneyMade\":582784140.3864911,\"onlineRunningTime\":22669.01000004741,\"ramUsage\":2.8,\"server\":\"server1\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server2\",\"httpPortOpen\":false,\"ip\":\"9.7.0.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[425213424.6729388,1460,28470,28835]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":797964.1058526762,\"onlineMoneyMade\":425213424.6729388,\"onlineRunningTime\":21690.41000004385,\"ramUsage\":2.8,\"server\":\"server2\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server3\",\"httpPortOpen\":false,\"ip\":\"72.6.4.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[478471007.47720456,1095,27740,28835]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":784313.0869345122,\"onlineMoneyMade\":478471007.47720456,\"onlineRunningTime\":21299.210000042425,\"ramUsage\":2.8,\"server\":\"server3\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server4\",\"httpPortOpen\":false,\"ip\":\"68.4.7.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[965619485.2541003,1460,27740,28835]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":785554.0886543454,\"onlineMoneyMade\":965619485.2541003,\"onlineRunningTime\":21298.21000004242,\"ramUsage\":2.8,\"server\":\"server4\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server5\",\"httpPortOpen\":false,\"ip\":\"32.6.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,730,28105,28835]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":778108.0783353468,\"onlineMoneyMade\":0,\"onlineRunningTime\":21297.210000042418,\"ramUsage\":2.8,\"server\":\"server5\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server6\",\"httpPortOpen\":false,\"ip\":\"67.8.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[1849428930.8381283,2190,27010,29200]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":791759.0972535108,\"onlineMoneyMade\":1849428930.8381283,\"onlineRunningTime\":21296.210000042414,\"ramUsage\":2.8,\"server\":\"server6\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server7\",\"httpPortOpen\":false,\"ip\":\"67.6.9.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[488089669.6615333,2190,27010,28470]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":776867.0766155138,\"onlineMoneyMade\":488089669.6615333,\"onlineRunningTime\":21295.01000004241,\"ramUsage\":2.8,\"server\":\"server7\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server8\",\"httpPortOpen\":false,\"ip\":\"5.3.7.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[500000026.0515252,1460,27740,28835]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":786795.0903741785,\"onlineMoneyMade\":500000026.0515252,\"onlineRunningTime\":21294.010000042406,\"ramUsage\":2.8,\"server\":\"server8\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server9\",\"httpPortOpen\":false,\"ip\":\"43.5.1.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[520629107.5941509,2190,27740,28105]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":784313.0869345122,\"onlineMoneyMade\":520629107.5941509,\"onlineRunningTime\":21293.010000042403,\"ramUsage\":2.8,\"server\":\"server9\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server10\",\"httpPortOpen\":false,\"ip\":\"55.7.0.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[505077506.5534949,2190,26645,29200]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":783072.0852146792,\"onlineMoneyMade\":505077506.5534949,\"onlineRunningTime\":21292.0100000424,\"ramUsage\":2.8,\"server\":\"server10\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}},\"server11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server11\",\"httpPortOpen\":false,\"ip\":\"70.8.5.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[41823365.053251624,1460,27375,28105]},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":770662.0680163483,\"onlineMoneyMade\":41823365.053251624,\"onlineRunningTime\":21255.810000042267,\"ramUsage\":2.8,\"server\":\"server11\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":365,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":551.90764500485}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0214,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":7.7134,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":19.888,\"isBanned\":false,\"isMember\":true,\"playerReputation\":4501.4723726296115}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":11.2958,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2264.7249048850954}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0.1022,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1242.675749931194}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":26.8833,\"isBanned\":false,\"isMember\":true,\"playerReputation\":4303.846992746858}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":31.8031,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6811.285089205195}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":12.4221,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2942.0825594125085}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":40.0256,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7163.240321887456}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":11.8466,\"isBanned\":false,\"isMember\":true,\"playerReputation\":6571.4806110458285}}}","AliasesSave":"{\"crack\":\"run crack.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-25,\"y\":28,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698553852165","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}