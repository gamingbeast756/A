{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":27,\"max\":27},\"skills\":{\"hacking\":575,\"strength\":156,\"defense\":172,\"dexterity\":186,\"agility\":209,\"charisma\":301,\"intelligence\":0},\"exp\":{\"hacking\":1365677958.1714358,\"strength\":58936.502210097424,\"defense\":58936.502210097424,\"dexterity\":111742.55905757268,\"agility\":96295.43098362908,\"charisma\":1048771.2182386739,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.1359106651025135,\"hacking_speed\":1.1151274872093904,\"hacking_money\":1.030304458142869,\"hacking_grow\":1.030304458142869,\"hacking\":1.2154244116596895,\"strength\":1.030304458142869,\"defense\":1.133334903957156,\"dexterity\":1.0818196810500127,\"agility\":1.249501731612765,\"charisma\":1.2363653497714429,\"hacking_exp\":1.3685018965282658,\"strength_exp\":1.3033351395507293,\"defense_exp\":1.3033351395507293,\"dexterity_exp\":1.3033351395507293,\"agility_exp\":1.3033351395507293,\"charisma_exp\":1.3033351395507293,\"company_rep\":1.564002167460875,\"faction_rep\":1.3033351395507293,\"crime_money\":1.416668629946445,\"crime_success\":1.030304458142869,\"hacknet_node_money\":2.5985244344792666,\"hacknet_node_purchase_cost\":0.742498971011848,\"hacknet_node_ram_cost\":0.9705868902115661,\"hacknet_node_core_cost\":0.9705868902115661,\"hacknet_node_level_cost\":0.8249988566798312,\"work_money\":1.133334903957156,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"SoA - Hunt of Artemis\"},{\"level\":1,\"name\":\"SoA - Chaos of Dionysus\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"SoA - phyzical WKS harmonizer\"},{\"level\":1,\"name\":\"SoA - Flood of Poseidon\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"SoA - Might of Ares\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"NiteSec\",\"New Tokyo\",\"Tetrads\",\"Slum Snakes\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\",\"Shadows of Anarchy\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":153519.40000002683,\"ram\":64,\"totalMoneyGenerated\":1108844322.8039937,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":153519.0000000268,\"ram\":64,\"totalMoneyGenerated\":1108848492.144563,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":153518.8000000268,\"ram\":64,\"totalMoneyGenerated\":1108836610.4472752,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86666.59999942445,\"ram\":64,\"totalMoneyGenerated\":1081792500.6140482,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86666.39999942445,\"ram\":64,\"totalMoneyGenerated\":1081765189.264555,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86666.19999942445,\"ram\":64,\"totalMoneyGenerated\":1081750814.6127353,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86665.79999942446,\"ram\":64,\"totalMoneyGenerated\":1081763237.0492904,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86665.59999942446,\"ram\":64,\"totalMoneyGenerated\":1081727527.5954573,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":6,\"level\":200,\"moneyGainRatePerSecond\":12483.361044678444,\"onlineTimeSeconds\":86665.39999942447,\"ram\":64,\"totalMoneyGenerated\":1081739395.8235176,\"name\":\"hacknet-node-8\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{\"MegaCorp\":\"IT Manager\"},\"karma\":-25152.927499999474,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":12344247961.642815,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":800010000,\"class\":-98025856,\"codingcontract\":0,\"corporation\":0,\"crime\":5036256.979459596,\"gang\":0,\"hacking\":182450709000.4101,\"hacknet\":9817068089.990355,\"hacknet_expenses\":-339494300.9990487,\"hospitalization\":-60306117.4805507,\"infiltration\":172594134.98712778,\"sleeves\":0,\"stock\":-1000000000,\"total\":12343247961.642784,\"work\":33800650.44238386,\"servers\":-177537756399.73962,\"other\":-315900000,\"augmentations\":-1584487500}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":800010000,\"class\":-175636096,\"codingcontract\":0,\"corporation\":0,\"crime\":1464586878.7005227,\"gang\":0,\"hacking\":222251287227.1372,\"hacknet\":18494626684.052616,\"hacknet_expenses\":-2021599759.3123426,\"hospitalization\":-106104688.36304757,\"infiltration\":179477187.0822172,\"sleeves\":0,\"stock\":-1200766008.8844678,\"total\":13006529914.19381,\"work\":34078242.89981112,\"servers\":-202892640676.05194,\"other\":-6272995592.492188,\"augmentations\":-17547793487.749996}},\"playtimeSinceLastAug\":153600600,\"playtimeSinceLastBitnode\":431367200,\"lastAugReset\":1698696247191,\"lastNodeReset\":-1,\"purchasedServers\":[\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\",\"server12\"],\"scriptProdSinceLastAug\":168977591924.37134,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1698418731041},{\"ID\":\"WORKOUT\",\"unlockedOn\":1698418851063},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1698423350648},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1698423831553},{\"ID\":\"NS2\",\"unlockedOn\":1698424491410},{\"ID\":\"TOR\",\"unlockedOn\":1698426124411},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1698426244450},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1698435726837},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1698435906834},{\"ID\":\"NITESEC\",\"unlockedOn\":1698469184520},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1698470084511},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1698519337342},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1698528937339},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1698533330755},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1698612399549},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1698623300568},{\"ID\":\"TRAVEL\",\"unlockedOn\":1698623600566},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1698672609188},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1698672849779},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1698796056687},{\"ID\":\"4S\",\"unlockedOn\":1698797856683}],\"terminalCommandHistory\":[\"scan\",\"connect darkweb\",\"buy -l\",\"buy httpworm.exe\",\"buy sqlinject.exe\",\"buy serverprofiler.exe\",\"buy deepscanv2.exe\",\"cls\",\"home\",\"cls\",\"crack darkweb\",\"connect darkweb\",\"backdoor\",\"hack\",\"grow\",\"home\",\"cls\",\"nano hack.js\",\"nano spread.js\",\"run spread.js\",\"run buyserver.js\",\"scan-analyze 10\",\"scan\",\"cls\",\"scan-analyze 10\",\"ls\",\"run fl1ght.exe\",\"cls\",\"scan-analyze 10\",\"home\",\"crack run4theh111z\",\"backdoor\",\"home\",\"cls\",\"nano findserver.js\",\"run findserver.js n00dles\",\"nano findserver.js\",\"scan-analyze 10\",\"home\",\"scan\",\"connect joesguns\",\"scan\",\"connect zer0\",\"scan\",\"home\",\"cls\",\"scan-analyze 2\",\"nano buyserver.js\",\"run buyserer.js\",\"run buyserver.js\"],\"lastUpdate\":1698849848640,\"lastSave\":1698849845562,\"totalPlaytime\":431367200,\"currentWork\":{\"ctor\":\"CompanyWork\",\"data\":{\"type\":\"COMPANY\",\"singularity\":false,\"cyclesWorked\":12434,\"companyName\":\"MegaCorp\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1fbc07265b326\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"41.9.3.9\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"sigmahack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"sigma-cosmetics\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"sigmahack.js\",\"server\":\"home\"}}],[\"8gbserver/sigmahack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"sigma-cosmetics\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"8gbserver/sigmahack.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\" /** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let threads = 0;\\n  let maxRam;\\n  let spreadFile=\\\"spread.js\\\";\\n  let hackFile=\\\"hack.js\\\";\\n  let useRam = ns.getScriptRam(hackFile);\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(spreadFile)+ns.getScriptRam(hackFile)) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(spreadFile, servers[i]);//copy the spread file to the server\\n\\n        ns.scp(hackFile, servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          try{\\n            ns.nuke(servers[i]);\\n          }catch(exception){}\\n        }\\n        ns.exec(spreadFile, servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(hackFile, servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"home\"}}],[\"buyserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let serverGigs = 524288;\\n  let servers = ns.getPurchasedServers().length;\\n  let ramUsage = ns.getScriptRam(\\\"hack.js\\\");\\n  while (true) {\\n    if (ns.getServerMoneyAvailable(\\\"home\\\") > 55000 * serverGigs) {\\n      ns.purchaseServer(\\\"server\\\" + servers, serverGigs);\\n      ns.scp(\\\"hack.js\\\", \\\"server\\\" + servers);\\n      ns.exec(\\\"hack.js\\\", \\\"server\\\" + servers, Math.floor(serverGigs / ramUsage));\\n      ns.tprint(serverGigs + \\\"gb server bought\\\");\\n      servers++;\\n    }\\n    await ns.sleep(1000);\\n  }\\n} \",\"filename\":\"buyserver.js\",\"server\":\"home\"}}],[\"crack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let target = ns.args[0];\\n  let ports = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n    ports++;\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n    ports++;\\n  }\\n  ns.tprint(ports + \\\"/\\\" + ns.getServerNumPortsRequired(target) + \\\" ports opened\\\")\\n  // Get root access to target server\\n  ns.nuke(target);\\n}\",\"filename\":\"crack.js\",\"server\":\"home\"}}],[\"clear.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  for(let i=0;i<100;i++){\\n    ns.deleteServer(\\\"server\\\"+i);\\n  }\\n}\",\"filename\":\"clear.js\",\"server\":\"home\"}}],[\"findserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n  let seenServers = [\\\"home\\\"]; \\n  let currentServer = \\\"home\\\";\\n  let servers;\\n  let server;\\n  if (ns.serverExists(target)) {\\n    servers = ns.scan(currentServer);\\n    if (!servers.includes(target)) {\\n      for (let i = 0; i < servers.length; i++) {//if scan doesent contain target server\\n\\n        if (!seenServers.includes(servers[i])) {\\n\\n          currentServer=servers[i];\\n          break;\\n        } else if (i == servers.length - 1) {\\n          seenServers.push(currentServer);\\n          currentServer = \\\"home\\\";\\n        }\\n\\n      }\\n    }else{//if scan contains target server\\n      \\n    }\\n  }\\n}\",\"filename\":\"findserver.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"server0\",\"server1\",\"server2\",\"server3\",\"server4\",\"server5\",\"server6\",\"server7\",\"server8\",\"server9\",\"server10\",\"server11\",\"server12\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[3767421421.442851,35000,60200,115500]},\"filename\":\"hack.js\",\"offlineExpGained\":652760.3416383457,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.918000000005,\"onlineExpGained\":3161239.3809802854,\"onlineMoneyMade\":3767421421.442851,\"onlineRunningTime\":64098.20999968347,\"ramUsage\":2.8,\"server\":\"home\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":700,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362555.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[27,183,65,26,183,55,123,10,151,60,107,174,66,103,57,101,197,57,36,167,69,75,59,172,176,178,27,175,6,189,196,99,156,129,131,45,123,91,52,106,184,57,140,118]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970414.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"92186617471\",27],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":61382483657,\"moneyMax\":1534562091425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1204,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-428280.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[80,[4,7,10,13,15,18,19,20,22]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"12.1.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55468758497,\"moneyMax\":1386718962425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1340,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-222784-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0],[1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"83.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":16921628256,\"moneyMax\":423040706400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1022,\"serverGrowth\":78,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-591977-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[108,22,171,183,167,87,50,184,175,163,122,178,44,60,133,43,71,113,27,28,167,123,186,125,34,50,168,158,191,163,86,15,109,198],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"78.9.6.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":20415933315,\"moneyMax\":510398332875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1020,\"serverGrowth\":73,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"37.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37003334926,\"moneyMax\":925083373150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1115,\"serverGrowth\":89,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"11.5.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":19828061066,\"moneyMax\":495701526650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1048,\"serverGrowth\":74,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45961-CyberSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"6iiiiiiiiiiiiiGGGGGGGGRRa444seiFNNllCCzzYV66nJ4ppXXXXXXggY\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"33.0.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":19037650885,\"moneyMax\":475941272125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":976,\"serverGrowth\":95,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"72.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":19624308097,\"moneyMax\":490607702425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":994,\"serverGrowth\":77,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642069-MegaCorp.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":961161091,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"0.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25594953854,\"moneyMax\":639873846350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1150,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"95.1.5.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":1648889137,\"moneyMax\":41222228425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1059,\"serverGrowth\":99,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"16.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1203,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-665002-NiteSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":24586222238786572,\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-432802.cct\",\"type\":\"Total Ways to Sum\",\"data\":64,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"56.3.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1193580885,\"moneyMax\":29839522125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":91,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358425.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,5,0,0,8,0,1,1,9,2,1,8],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"10.8.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":801223753,\"moneyMax\":20030593825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":65,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"66.2.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":704255773,\"moneyMax\":17606394325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":45,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"8.9.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":647031325,\"moneyMax\":16175783125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":885,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"71.3.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":799026435,\"moneyMax\":19975660875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":62,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"28.9.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":990307822,\"moneyMax\":24757695550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795511-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[138,74,14,59,118,25,56,176,134,113,1,197,18,137,195,73,126,1,42,46,104,95,125,139,111],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343372.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"23684330776\",-43],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814960.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[89,49,24,33,18,93,19,117,130,181,135,122,179,194,178,122,142,23,66,126,67,26,148,165,23,119,187,138,135,15,69,115,109,194,98,172,58,10,157],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-374394-MegaCorp.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,9],[5,8],[1,5],[16,18],[2,12],[3,9]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"46.0.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1181406868,\"moneyMax\":29535171700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":84,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"72.0.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":840614581,\"moneyMax\":21015364525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":77,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"8.0.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":637716131,\"moneyMax\":15942903275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":77,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"88.4.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":885338053,\"moneyMax\":22133451325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":75,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"39.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":767833041,\"moneyMax\":19195826025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":89,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"22.1.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1179630519,\"moneyMax\":29490762975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915549.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,1,1,0],[1,1,0,0,1,0,1,0,1],[0,1,1,0,1,0,0,0,0],[0,1,0,0,1,0,0,0,1],[0,0,1,0,1,0,1,0,0]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-72462-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,1,1,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,1,0,0,0,0],[0,0,1,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,0,1,0],[1,1,0,0,1,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"34.5.7.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":931773206,\"moneyMax\":23294330150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"52.3.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":909676606,\"moneyMax\":22741915150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":71,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512707-Netburners.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[122,49,190,141,168,176,48,104,24,21,180,118,52,136,129,109,119,41,194,160,151,121,27,79,104,35,55,111,58,200,108,42,60,24,82,85,36,90,69,68,34,57,97,36,158,69,168,19,35],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749191-MegaCorp.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,1,6,1,4,2,3,3,3,4,5,4,1,3,3,6,3,2,2,7,2],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"73.7.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":974385912,\"moneyMax\":24359647800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"93.8.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":719542502,\"moneyMax\":17988562550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":72,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-8761-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":30,\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"95.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1553592080,\"moneyMax\":38839802000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":834,\"serverGrowth\":63,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130413.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[0,3],[4,7],[6,7],[6,8],[0,10],[0,8],[0,6],[3,7],[3,9],[9,10],[7,10],[1,5],[7,8],[5,8],[0,2],[2,5],[4,5]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"89.3.1.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1520605573,\"moneyMax\":38015139325,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":89,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"58.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":1181327550,\"moneyMax\":29533188750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":76,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-309966.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,-6,2,5,-3,1,-10],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"84.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1460499659,\"moneyMax\":36512491475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":75,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-692321-CyberSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"UUUUUUEESSSSSSSSS777777755111111SIIIIIIuQt2ZZNN1BBWWWWWWWWWWWWWSSSSSSSSpppppp\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"87.3.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1054972836,\"moneyMax\":26374320900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":80,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-676740.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,12],[14,21],[12,18]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30331-TianDiHui.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[5,8],[5,6,2],[3,9,8,9],[4,9,5,3,2],[1,4,4,7,5,8]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"79.0.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":772571682,\"moneyMax\":19314292050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":717,\"serverGrowth\":60,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-52383-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[78,165,50,84,124,91,56,25,139,29,178,157,94,85,18,172,38,65]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"7.5.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":671411524,\"moneyMax\":16785288100,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":514,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[96918613.94749428,1155,1617,3213]},\"filename\":\"hack.js\",\"offlineExpGained\":17206.94667146848,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.92,\"onlineExpGained\":85784.54138387466,\"onlineMoneyMade\":96918613.94749428,\"onlineRunningTime\":64096.809999683486,\"ramUsage\":2.8,\"server\":\"rho-construction\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-201610-MegaCorp.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"uuuuuuuqqp6WqqzqqqqqqqYUUUuMMMMeeeeeeeeekkkkkkkkkkkkkBDRRRRRRRRRRRRRDDDDD\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166913-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-382757-NewTokyo.cct\",\"type\":\"Total Ways to Sum\",\"data\":56,\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"8.8.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":690913242,\"moneyMax\":17272831050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":581,\"serverGrowth\":55,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"20.4.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":291473767,\"moneyMax\":7286844175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":50,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"43.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":212733456,\"moneyMax\":5318336400,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":393,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[11174312.758710217,248,312,640]},\"filename\":\"hack.js\",\"offlineExpGained\":3346.3518057169003,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.922000000006,\"onlineExpGained\":16898.261418330996,\"onlineMoneyMade\":11174312.758710217,\"onlineRunningTime\":64097.80999968348,\"ramUsage\":2.8,\"server\":\"rothman-uni\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-507823-CyberSec.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"59.3.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":989046118,\"moneyMax\":24726152950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":766,\"serverGrowth\":85,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-862669.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,28,28,20],[47,36,28,20],[1,41,44,24],[7,3,19,36],[24,44,7,16],[47,37,3,42],[48,26,22,23],[15,2,18,24],[45,23,20,4],[37,15,33,18],[14,36,6,46],[50,11,38,46],[26,27,25,24],[42,24,26,50]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150864.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"t33cZ83cZ83cZ83JQKZsyoRJQKZsyo3yojow3yoj3yoj3yoj3Iyoj3yoj\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"43.5.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"summit-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":242792914,\"moneyMax\":6069822850,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":443,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[127063481.04834384,1344,1680,3381]},\"filename\":\"hack.js\",\"offlineExpGained\":17844.837699863234,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.923,\"onlineExpGained\":90957.47855275156,\"onlineMoneyMade\":127063481.04834384,\"onlineRunningTime\":64097.80999968348,\"ramUsage\":2.8,\"server\":\"summit-uni\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"68.8.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":593125476,\"moneyMax\":14828136900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":566,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"52.8.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":386343421,\"moneyMax\":9658585525,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":46,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-84369.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[21,168,61,90,1,149,155,182,105,15,183,167,166,125,107,49,92],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"14.0.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":157070168,\"moneyMax\":3926754200,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":284,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[22266785.632004887,232,304,636]},\"filename\":\"hack.js\",\"offlineExpGained\":3336.191815786876,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.925,\"onlineExpGained\":16816.1513045393,\"onlineMoneyMade\":22266785.632004887,\"onlineRunningTime\":64098.809999683464,\"ramUsage\":2.8,\"server\":\"the-hub\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"41.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":241927745,\"moneyMax\":6048193625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":394,\"serverGrowth\":64,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.0.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":415,\"serverGrowth\":68,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[68673887.09130009,2200,3344,6644]},\"filename\":\"hack.js\",\"offlineExpGained\":35561.81487984306,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.937000000005,\"onlineExpGained\":175042.34058113804,\"onlineMoneyMade\":68673887.09130009,\"onlineRunningTime\":64098.809999683464,\"ramUsage\":2.8,\"server\":\"netlink\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"18.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":83294436,\"moneyMax\":2082360900,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":257,\"serverGrowth\":62,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915739-MegaCorp.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[49,[2,3,4,7,9,13,16,17,19,20]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751604-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ELQJRr8gH858gH858NxYqxYqxWxThK6VOTJK6VOTJ364eCjkno4FWeCo4FWeCWeCo4FWvPW5n00000000\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-980715-BitRunners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,0]],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"24.8.2.0\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267752-MegaCorp.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"IxxP0zvciDB0avciPUqePUqePUqePePePePePeYgruujkgf7Fvg0Fvg0FvgSMHnOLCnOLCNm\",\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"1.9.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6328744.020767898,224,312,628]},\"filename\":\"hack.js\",\"offlineExpGained\":3305.6518813981716,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.938,\"onlineExpGained\":16569.820963164213,\"onlineMoneyMade\":6328744.020767898,\"onlineRunningTime\":64103.8099996834,\"ramUsage\":2.8,\"server\":\"foodnstuff\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"17.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":4.579999999999999,\"minDifficulty\":3,\"moneyAvailable\":735708.0183159013,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[18956702.562636573,180,296,592]},\"filename\":\"hack.js\",\"offlineExpGained\":3200.3629085563534,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.939,\"onlineExpGained\":15715.875779730575,\"onlineMoneyMade\":18956702.562636573,\"onlineRunningTime\":64102.809999683406,\"ramUsage\":2.8,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-50457-BitRunners.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9Ooft7hH5W02KJ3843Fz46882K7ecgTD566SnjwD0681K82265638GK65QLX4\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"15.6.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[19648653.20353597,224,296,616]},\"filename\":\"hack.js\",\"offlineExpGained\":3251.029302759915,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.941,\"onlineExpGained\":16208.53646248075,\"onlineMoneyMade\":19648653.20353597,\"onlineRunningTime\":64101.80999968342,\"ramUsage\":2.8,\"server\":\"joesguns\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-546359-MegaCorp.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0,1,1,0],[0,0,0,0,0,1,1,0,0,0,1,1],[0,0,0,0,1,0,0,1,0,1,1,0],[0,0,1,0,0,0,0,1,0,0,0,0],[1,0,1,0,1,0,0,0,0,0,0,0],[0,0,0,1,1,0,1,0,0,0,0,0],[1,0,0,0,1,0,0,1,0,0,0,1],[1,0,0,0,0,0,1,0,0,0,0,0]],\"reward\":{\"type\":2,\"name\":\"MegaCorp\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"67.1.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[26467286.985246636,495,765,1440]},\"filename\":\"hack.js\",\"offlineExpGained\":7647.56956881939,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.941,\"onlineExpGained\":38797.02876657644,\"onlineMoneyMade\":26467286.985246636,\"onlineRunningTime\":64100.809999683435,\"ramUsage\":2.8,\"server\":\"zer0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-207311.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[4,5],[1,6],[5,9],[1,4],[2,8],[3,7],[2,10],[0,4],[9,10],[1,3],[2,7],[5,6],[6,7],[2,5],[0,3],[2,8]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"29.5.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0.048733640951293844,216,276,644]},\"filename\":\"hack.js\",\"offlineExpGained\":3251.0296263148757,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.943,\"onlineExpGained\":16208.53646248075,\"onlineMoneyMade\":0.048733640951293844,\"onlineRunningTime\":64101.80999968342,\"ramUsage\":2.8,\"server\":\"nectar-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-287581.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[6,[[0,3],[2,5],[4,5],[1,3],[1,2]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"36.8.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[22.989729294806963,522,738,1413]},\"filename\":\"hack.js\",\"offlineExpGained\":7506.366707842451,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.944,\"onlineExpGained\":38021.08819124491,\"onlineMoneyMade\":22.989729294806963,\"onlineRunningTime\":64099.80999968345,\"ramUsage\":2.8,\"server\":\"neo-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"11.3.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[59637714.938175395,1176,1785,3297]},\"filename\":\"hack.js\",\"offlineExpGained\":17706.0923113503,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.944,\"onlineExpGained\":90267.75359690136,\"onlineMoneyMade\":59637714.938175395,\"onlineRunningTime\":64100.809999683435,\"ramUsage\":2.8,\"server\":\"silver-helix\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":21,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"79.4.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6268054.201266697,224,312,632]},\"filename\":\"hack.js\",\"offlineExpGained\":3311.825101683178,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.945,\"onlineExpGained\":16701.197145230926,\"onlineMoneyMade\":6268054.201266697,\"onlineRunningTime\":64100.809999683435,\"ramUsage\":2.8,\"server\":\"hong-fang-tea\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"33.9.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[7139695.603176719,284,320,660]},\"filename\":\"hack.js\",\"offlineExpGained\":3427.3111105886787,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.947,\"onlineExpGained\":17571.5643514229,\"onlineMoneyMade\":7139695.603176719,\"onlineRunningTime\":64099.80999968345,\"ramUsage\":2.8,\"server\":\"harakiri-sushi\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":4,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161121-NiteSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,18],[21,24],[10,19],[20,27],[4,10],[5,8],[11,14],[11,18],[20,29],[20,30],[15,16],[24,33],[22,27],[5,6]],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"89.1.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[27508693.4292053,639,702,1557]},\"filename\":\"hack.js\",\"offlineExpGained\":7839.056910715402,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.947,\"onlineExpGained\":40570.60722447713,\"onlineMoneyMade\":27508693.4292053,\"onlineRunningTime\":64099.80999968345,\"ramUsage\":2.8,\"server\":\"phantasy\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"62.0.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[28364650.90250634,540,684,1467]},\"filename\":\"hack.js\",\"offlineExpGained\":7611.113214858673,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.948,\"onlineExpGained\":38464.48280572008,\"onlineMoneyMade\":28364650.90250634,\"onlineRunningTime\":64100.809999683435,\"ramUsage\":2.8,\"server\":\"max-hardware\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-631456.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[75,[1,2,3,4,5,6,8,9,10,12,14,15]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"92.8.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":63796642,\"moneyMax\":1594916050,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":185,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[18037681.854630746,522,630,1395]},\"filename\":\"hack.js\",\"offlineExpGained\":7274.010478883776,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.95,\"onlineExpGained\":35988.862874900384,\"onlineMoneyMade\":18037681.854630746,\"onlineRunningTime\":64098.809999683464,\"ramUsage\":2.8,\"server\":\"omega-net\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"20.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":44926128,\"moneyMax\":1123153200,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":225,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"39.0.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6653775.617635338,432,711,1305]},\"filename\":\"hack.js\",\"offlineExpGained\":7191.976078720594,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.95,\"onlineExpGained\":35508.518709218944,\"onlineMoneyMade\":6653775.617635338,\"onlineRunningTime\":64098.809999683464,\"ramUsage\":2.8,\"server\":\"iron-gym\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":9,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-640530.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\")(a)))a(()(\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"59.8.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":482,\"serverGrowth\":27,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-47094.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[196,151,183,5,195,137,19,57,193,195,195,20,115,76,39,120,122,76,132,100,33,68,99,75,174,90],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"4.6.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":52,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449918-NiteSec.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MEDIAMOUSEENTERTRASHVIRUS\",\"PODCAST\"],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"93.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":733,\"serverGrowth\":41,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-884760.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,7,16],[14,14,41],[46,13,6],[31,25,29]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"85.8.1.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":511,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"55.5.6.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":361,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"50.7.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":211,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[67012170.88086697,2772,3696,6996]},\"filename\":\"hack.js\",\"offlineExpGained\":37210.987935991434,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.951,\"onlineExpGained\":190758.21636086894,\"onlineMoneyMade\":67012170.88086697,\"onlineRunningTime\":64097.80999968348,\"ramUsage\":2.8,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":44,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162620.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,1,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[1,0,0,0,1,1,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"69.6.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-722726-NewTokyo.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":813584016,\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"26.9.0.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"CSEC\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[3185885.044655997,62,80,161]},\"filename\":\"hack.js\",\"offlineExpGained\":849.7386586256262,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.952000000005,\"onlineExpGained\":4298.464456995275,\"onlineMoneyMade\":3185885.044655997,\"onlineRunningTime\":64099.80999968345,\"ramUsage\":2.8,\"server\":\"CSEC\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":1,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590524-NewTokyo.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1925070123\",\"reward\":{\"type\":0,\"name\":\"New Tokyo\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582222.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,18],[7,13],[2,6],[2,12],[17,20],[12,15],[6,13],[12,17],[13,14],[2,5],[23,33]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906157.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[119,44,107,200,158],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"28.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"8.5.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"29.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.006,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"server0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server0\",\"httpPortOpen\":false,\"ip\":\"28.4.0.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server0\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[14000000795.353611,1591472,1895724,3534004]},\"filename\":\"hack.js\",\"offlineExpGained\":18615109.620812546,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.952000000005,\"onlineExpGained\":105309439.6543107,\"onlineMoneyMade\":14000000795.353611,\"onlineRunningTime\":64096.809999683486,\"ramUsage\":2.8,\"server\":\"server0\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23404,\"temporary\":false}}]}},\"server1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server1\",\"httpPortOpen\":false,\"ip\":\"90.8.8.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server1\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[8493607873.413052,1755300,1965936,3651024]},\"filename\":\"hack.js\",\"offlineExpGained\":18615314.722412556,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.954,\"onlineExpGained\":105597695.41978782,\"onlineMoneyMade\":8493607873.413052,\"onlineRunningTime\":64095.8099996835,\"ramUsage\":2.8,\"server\":\"server1\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23404,\"temporary\":false}}]}},\"server2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server2\",\"httpPortOpen\":false,\"ip\":\"60.5.4.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server2\"}}],[\"spread.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  let servers = ns.scan();\\n  let availablePorts = 0;\\n  let ram;\\n  let useRam = ns.getScriptRam(\\\"hack.js\\\");\\n  let threads = 0;\\n  let maxRam;\\n  for (let i = 0; i < servers.length; i++) {//loop thru all the servers\\n    maxRam = ns.getServerMaxRam(servers[i]);\\n    ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n    if (ram > ns.getScriptRam(\\\"spread.js\\\")+ns.getScriptRam(\\\"hack.js\\\")) {//check if the server has enough ram\\n      if (servers[i] != \\\"home\\\") {\\n        ns.scp(\\\"spread.js\\\", servers[i]);//copy the spread file to the server\\n\\n        ns.scp(\\\"hack.js\\\", servers[i]);//copy the hack file to the server\\n\\n        if (!ns.hasRootAccess(servers[i])) {//get root access\\n          if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {//check which ports we can open\\n            availablePorts++;\\n            ns.brutessh(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.ftpcrack(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.relaysmtp(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.httpworm(servers[i]);\\n          }\\n          if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n            availablePorts++;\\n            ns.sqlinject(servers[i]);\\n          }\\n          ns.nuke(servers[i]);\\n        }\\n        ns.exec(\\\"spread.js\\\", servers[i]);//spread\\n        ram = maxRam - ns.getServerUsedRam(servers[i]);//get amount of unused ram on server\\n        threads = Math.floor(ram / useRam);//get amount of threads we can run\\n        ns.exec(\\\"hack.js\\\", servers[i], threads)//run the hack\\n      }\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\",\"filename\":\"spread.js\",\"server\":\"server2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[10434508076.433777,1310624,1965936,3206348]},\"filename\":\"hack.js\",\"offlineExpGained\":20428420.295286924,\"offlineMoneyMade\":0,\"offlineRunningTime\":34348.954,\"onlineExpGained\":97334363.4761102,\"onlineMoneyMade\":10434508076.433777,\"onlineRunningTime\":64094.809999683515,\"ramUsage\":2.8,\"server\":\"server2\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23404,\"temporary\":false}}]}},\"server3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server3\",\"httpPortOpen\":false,\"ip\":\"45.3.8.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[12912921431.738115,1357490,1802185,3206485]},\"filename\":\"hack.js\",\"offlineExpGained\":11863409.433047025,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.798,\"onlineExpGained\":96377628.74672666,\"onlineMoneyMade\":12912921431.738115,\"onlineRunningTime\":59508.809999749144,\"ramUsage\":2.8,\"server\":\"server3\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server4\",\"httpPortOpen\":false,\"ip\":\"21.3.5.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[17464171407.08586,1591540,1802185,3323510]},\"filename\":\"hack.js\",\"offlineExpGained\":12685349.377638327,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.799,\"onlineExpGained\":101470364.86195737,\"onlineMoneyMade\":17464171407.08586,\"onlineRunningTime\":59507.80999974916,\"ramUsage\":2.8,\"server\":\"server4\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server5\",\"httpPortOpen\":false,\"ip\":\"91.5.0.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[19000000057.885567,1942615,1708565,3651180]},\"filename\":\"hack.js\",\"offlineExpGained\":13725591.687343862,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.799,\"onlineExpGained\":108677066.91181234,\"onlineMoneyMade\":19000000057.885567,\"onlineRunningTime\":59506.80999974917,\"ramUsage\":2.8,\"server\":\"server5\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server6\",\"httpPortOpen\":false,\"ip\":\"70.8.7.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[12761812678.84654,1544730,1661755,3159675]},\"filename\":\"hack.js\",\"offlineExpGained\":12723007.979357539,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.799,\"onlineExpGained\":93783216.00877881,\"onlineMoneyMade\":12761812678.84654,\"onlineRunningTime\":55229.809999811405,\"ramUsage\":2.8,\"server\":\"server6\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server7\",\"httpPortOpen\":false,\"ip\":\"97.0.5.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[11130101766.955666,1521325,1731970,3253295]},\"filename\":\"hack.js\",\"offlineExpGained\":13694951.513699433,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.799,\"onlineExpGained\":96377628.74672662,\"onlineMoneyMade\":11130101766.955666,\"onlineRunningTime\":53224.209999840605,\"ramUsage\":2.8,\"server\":\"server7\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server8\",\"httpPortOpen\":false,\"ip\":\"13.6.6.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[6000000000,1497920,1591540,3019245]},\"filename\":\"hack.js\",\"offlineExpGained\":12671517.36957501,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.799,\"onlineExpGained\":86192156.51626499,\"onlineMoneyMade\":6000000000,\"onlineRunningTime\":51472.2099998661,\"ramUsage\":2.8,\"server\":\"server8\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server9\",\"httpPortOpen\":false,\"ip\":\"12.0.9.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[15887247491.319393,1451110,1474515,3019245]},\"filename\":\"hack.js\",\"offlineExpGained\":13579050.25626037,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.8,\"onlineExpGained\":90227909.66418374,\"onlineMoneyMade\":15887247491.319393,\"onlineRunningTime\":49889.60999988914,\"ramUsage\":2.8,\"server\":\"server9\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server10\",\"httpPortOpen\":false,\"ip\":\"90.9.3.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[7000001078.055617,865985,1521325,2457525]},\"filename\":\"hack.js\",\"offlineExpGained\":11386881.804366339,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.8,\"onlineExpGained\":74084897.07250868,\"onlineMoneyMade\":7000001078.055617,\"onlineRunningTime\":48394.409999910895,\"ramUsage\":2.8,\"server\":\"server10\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server11\",\"httpPortOpen\":false,\"ip\":\"70.9.3.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[10806564769.011932,1217060,1404300,2644765]},\"filename\":\"hack.js\",\"offlineExpGained\":12491821.698574986,\"offlineMoneyMade\":0,\"offlineRunningTime\":7362.8,\"onlineExpGained\":78312828.94175693,\"onlineMoneyMade\":10806564769.011932,\"onlineRunningTime\":46995.409999931246,\"ramUsage\":2.8,\"server\":\"server11\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":23405,\"temporary\":false}}]}},\"server12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"server12\",\"httpPortOpen\":false,\"ip\":\"37.8.0.2\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  // Defines the \\\"target server\\\", which is the server\\n  // that we're going to hack. In this case, it's \\\"n00dles\\\"\\n  const target = \\\"iron-gym\\\";\\n\\n  // Defines how much money a server should have before we hack it\\n  // In this case, it is set to the maximum amount of money.\\n  const moneyThresh = ns.getServerMaxMoney(target);\\n\\n  // Defines the maximum security level the target server can\\n  // have. If the target's security level is higher than this,\\n  // we'll weaken it before doing anything else\\n  const securityThresh = ns.getServerMinSecurityLevel(target);\\n\\n  // If we have the BruteSSH.exe program, use it to open the SSH Port\\n  // on the target server\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    ns.brutessh(target);\\n  }\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n    ns.ftpcrack(target);\\n  }\\n  if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n    ns.relaysmtp(target);\\n  }\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n    ns.httpworm(target);\\n  }\\n  if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n    ns.sqlinject(target);\\n  }\\n  // Get root access to target server\\n  ns.nuke(target);\\n\\n  // Infinite loop that continously hacks/grows/weakens the target server\\n  while (true) {\\n    if (ns.getServerSecurityLevel(target) > securityThresh) {\\n      // If the server's security level is above our threshold, weaken it\\n      await ns.weaken(target);\\n    } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n      // If the server's money is less than our threshold, grow it\\n      await ns.grow(target);\\n    } else {\\n      // Otherwise, hack it\\n      await ns.hack(target);\\n    }\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"server12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"ramUsage\":2.8,\"server\":\"server12\",\"scriptKey\":\"hack.js*[]\",\"title\":\"hack.js \",\"threads\":187245,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":2.7843,\"playerReputation\":109139.56515222655}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0214,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":0,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2923.9563577015947}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":20.2814,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":51.8665,\"isBanned\":false,\"isMember\":true,\"playerReputation\":105271.09762690931}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":70836.34863109697}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":39.1518,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":32.0754,\"isBanned\":false,\"isMember\":true,\"playerReputation\":735.9415312241538}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":48.3499,\"isBanned\":false,\"isMember\":true,\"playerReputation\":58488.18699277998}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":51.5447,\"isBanned\":false,\"isMember\":true,\"playerReputation\":36857.23473603269}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":34.6374,\"isBanned\":false,\"isMember\":true,\"playerReputation\":108729.83203018933}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":59.0502,\"isBanned\":false,\"isMember\":true,\"playerReputation\":69457.27223029573}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":50.0353,\"isBanned\":false,\"isMember\":true,\"playerReputation\":95731.09452996474}}}","AliasesSave":"{\"crack\":\"run crack.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":34245.88000882427,\"lastPrice\":34261.51846769999,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":23.35942504720927,\"otlkMagForecast\":26.85943688234168,\"cap\":349852082,\"spreadPerc\":0.1,\"shareTxForMovement\":52326,\"shareTxUntilMovement\":52326,\"totalShares\":118200000,\"maxShares\":23600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":124151.65051002223,\"lastPrice\":124082.23902563799,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":18.359121104619003,\"otlkMagForecast\":65.99846323670694,\"cap\":219928711,\"spreadPerc\":0.5,\"shareTxForMovement\":36237,\"shareTxUntilMovement\":36237,\"totalShares\":91500000,\"maxShares\":18300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":7802.390005417947,\"lastPrice\":7796.070839538628,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":11.08930465846278,\"otlkMagForecast\":40.097737135007854,\"cap\":136736240,\"spreadPerc\":0.5,\"shareTxForMovement\":32730,\"shareTxUntilMovement\":32730,\"totalShares\":133300000,\"maxShares\":26700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":38365.88140484522,\"lastPrice\":38394.351188508015,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":13.53035636290625,\"otlkMagForecast\":39.27117533001312,\"cap\":187924994,\"spreadPerc\":0.5,\"shareTxForMovement\":47287,\"shareTxUntilMovement\":47287,\"totalShares\":83300000,\"maxShares\":16700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":166567.11522069498,\"lastPrice\":166688.81642297708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":11.30450142882572,\"otlkMagForecast\":60.824755410762954,\"cap\":544936525,\"spreadPerc\":0.3,\"shareTxForMovement\":54821,\"shareTxUntilMovement\":54821,\"totalShares\":51000000,\"maxShares\":10200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":120368.85773240608,\"lastPrice\":120231.59765214525,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":true,\"otlkMag\":10.740942417209943,\"otlkMagForecast\":62.36672822424851,\"cap\":558241069,\"spreadPerc\":0.3,\"shareTxForMovement\":45252,\"shareTxUntilMovement\":45252,\"totalShares\":36100000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":9276.504739091426,\"lastPrice\":9267.828780220485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":11.069351273261699,\"otlkMagForecast\":60.067800668129706,\"cap\":594055693,\"spreadPerc\":0.6,\"shareTxForMovement\":65561,\"shareTxUntilMovement\":65561,\"totalShares\":68900000,\"maxShares\":13800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":100549.68414684095,\"lastPrice\":100694.32030790002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":9.136867567298971,\"otlkMagForecast\":61.12515740745688,\"cap\":588753180,\"spreadPerc\":0.3,\"shareTxForMovement\":71645,\"shareTxUntilMovement\":71645,\"totalShares\":61700000,\"maxShares\":12300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":10471.164236613185,\"lastPrice\":10480.847140492055,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":7.6552339821747095,\"otlkMagForecast\":42.946987036943476,\"cap\":260415880,\"spreadPerc\":0.5,\"shareTxForMovement\":63090,\"shareTxUntilMovement\":63090,\"totalShares\":50800000,\"maxShares\":10200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":11196.088433597455,\"lastPrice\":11187.786425471077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.459574656256226,\"otlkMagForecast\":59.95142040418934,\"cap\":370762374,\"spreadPerc\":0.4,\"shareTxForMovement\":60442,\"shareTxUntilMovement\":60442,\"totalShares\":51700000,\"maxShares\":10300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":3906.4587624587707,\"lastPrice\":3903.962907520535,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.921332447927398,\"otlkMagForecast\":61.34760941483369,\"cap\":153444328,\"spreadPerc\":0.6,\"shareTxForMovement\":101162,\"shareTxUntilMovement\":101162,\"totalShares\":73000000,\"maxShares\":14600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":11220.174460335566,\"lastPrice\":11230.037617769394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":6.235716337597467,\"otlkMagForecast\":42.397320378880956,\"cap\":243500492,\"spreadPerc\":0.8,\"shareTxForMovement\":66187,\"shareTxUntilMovement\":66187,\"totalShares\":79500000,\"maxShares\":15900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":13041.415018623853,\"lastPrice\":13031.893348716505,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":10.357273973227203,\"otlkMagForecast\":58.168937530586,\"cap\":329012954,\"spreadPerc\":0.6,\"shareTxForMovement\":63975,\"shareTxUntilMovement\":63975,\"totalShares\":37700000,\"maxShares\":7500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":72045.9497352823,\"lastPrice\":72090.36466313463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":false,\"otlkMag\":10.429774076418733,\"otlkMagForecast\":39.232019885624034,\"cap\":564722650,\"spreadPerc\":0.3,\"shareTxForMovement\":88641,\"shareTxUntilMovement\":88641,\"totalShares\":34400000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":8008.132267340797,\"lastPrice\":8013.891934903302,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.950641074209055,\"otlkMagForecast\":54.357795720280805,\"cap\":123893318,\"spreadPerc\":0.4,\"shareTxForMovement\":57508,\"shareTxUntilMovement\":57508,\"totalShares\":71600000,\"maxShares\":14300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":9291.862401406295,\"lastPrice\":9299.181835271333,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":6.265764919510825,\"otlkMagForecast\":42.64745293770012,\"cap\":156614110,\"spreadPerc\":0.6,\"shareTxForMovement\":68786,\"shareTxUntilMovement\":68786,\"totalShares\":87800000,\"maxShares\":17600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":59055.54622115907,\"lastPrice\":59005.69781223807,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.542038869945377,\"otlkMagForecast\":56.10793464747676,\"cap\":414891029,\"spreadPerc\":0.9,\"shareTxForMovement\":66757,\"shareTxUntilMovement\":66757,\"totalShares\":25800000,\"maxShares\":5200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":29188.274144193718,\"lastPrice\":29169.29282526473,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":8.416475720827986,\"otlkMagForecast\":39.976461320062754,\"cap\":99872507,\"spreadPerc\":1,\"shareTxForMovement\":47139,\"shareTxUntilMovement\":47139,\"totalShares\":41100000,\"maxShares\":8200000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":34781.632238124366,\"lastPrice\":34811.01599411795,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":6.515313803030799,\"otlkMagForecast\":57.483696050653414,\"cap\":77159140,\"spreadPerc\":1.1,\"shareTxForMovement\":118616,\"shareTxUntilMovement\":118616,\"totalShares\":29900000,\"maxShares\":6000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1141.1068466212348,\"lastPrice\":1144.3375986250487,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":false,\"otlkMag\":37.29575617961357,\"otlkMagForecast\":16.761906527166946,\"cap\":90957730,\"spreadPerc\":1.2,\"shareTxForMovement\":35816,\"shareTxUntilMovement\":35816,\"totalShares\":82900000,\"maxShares\":16600000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":16723.765850632175,\"lastPrice\":16699.363283699575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":6.470251316034696,\"otlkMagForecast\":55.89732570695682,\"cap\":27168413,\"spreadPerc\":1,\"shareTxForMovement\":68468,\"shareTxUntilMovement\":68468,\"totalShares\":56500000,\"maxShares\":11300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3527.6893973747397,\"lastPrice\":3529.8238761458406,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":2.618931503212916,\"otlkMagForecast\":53.05443922363033,\"cap\":92584992,\"spreadPerc\":1,\"shareTxForMovement\":116997,\"shareTxUntilMovement\":116997,\"totalShares\":31300000,\"maxShares\":6300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":491920.96262114623,\"lastPrice\":490772.3869554772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":true,\"otlkMag\":5.511638243995258,\"otlkMagForecast\":55.60506947847992,\"cap\":8498361,\"spreadPerc\":1.6,\"shareTxForMovement\":63773,\"shareTxUntilMovement\":63773,\"totalShares\":47100000,\"maxShares\":9400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4932.736796360201,\"lastPrice\":4941.409096380869,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":true,\"otlkMag\":1.6017639513156794,\"otlkMagForecast\":52.50107891408623,\"cap\":122374339,\"spreadPerc\":0.8,\"shareTxForMovement\":66393,\"shareTxUntilMovement\":66393,\"totalShares\":28900000,\"maxShares\":5800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5830.135638350348,\"lastPrice\":5836.5918241969985,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.97,\"b\":true,\"otlkMag\":2.1142610343473285,\"otlkMagForecast\":51.98264132364322,\"cap\":74224876,\"spreadPerc\":1.1,\"shareTxForMovement\":96834,\"shareTxUntilMovement\":96834,\"totalShares\":53700000,\"maxShares\":10700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2525.3543503215033,\"lastPrice\":2532.6483959748925,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.53,\"b\":true,\"otlkMag\":5.6764453758432625,\"otlkMagForecast\":56.01823173588056,\"cap\":36221350,\"spreadPerc\":1,\"shareTxForMovement\":41518,\"shareTxUntilMovement\":41518,\"totalShares\":24500000,\"maxShares\":4900000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":1315.385031022815,\"lastPrice\":1316.9317654438119,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":5.746445197094678,\"otlkMagForecast\":44.2569981649211,\"cap\":24702866,\"spreadPerc\":0.9,\"shareTxForMovement\":59552,\"shareTxUntilMovement\":59552,\"totalShares\":9600000,\"maxShares\":1900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":4977.733429576744,\"lastPrice\":4982.22278879419,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":1.9900258518133391,\"otlkMagForecast\":52.209986214293274,\"cap\":44949505,\"spreadPerc\":0.8,\"shareTxForMovement\":70562,\"shareTxUntilMovement\":70562,\"totalShares\":16900000,\"maxShares\":3400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1002448.248243505,\"lastPrice\":1005366.5337086433,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.55,\"b\":true,\"otlkMag\":7.5330433002268835,\"otlkMagForecast\":56.50330900317744,\"cap\":64358494,\"spreadPerc\":1.4,\"shareTxForMovement\":24187,\"shareTxUntilMovement\":24187,\"totalShares\":9500000,\"maxShares\":1900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":0.23415696666052802,\"lastPrice\":0.23508189654702366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.46,\"b\":true,\"otlkMag\":10.22227831144066,\"otlkMagForecast\":61.073197274160925,\"cap\":2883352,\"spreadPerc\":0.9,\"shareTxForMovement\":20677,\"shareTxUntilMovement\":20677,\"totalShares\":104200000,\"maxShares\":20800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":8901.251172453163,\"lastPrice\":8888.161545181769,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":15.93579689482923,\"otlkMagForecast\":64.66821479750487,\"cap\":8842331,\"spreadPerc\":1.3,\"shareTxForMovement\":27500,\"shareTxUntilMovement\":27500,\"totalShares\":216900000,\"maxShares\":43400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":12006.744133869108,\"lastPrice\":12017.435802470554,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":12.020328317691353,\"otlkMagForecast\":38.664939530224046,\"cap\":294231365,\"spreadPerc\":0.8,\"shareTxForMovement\":118867,\"shareTxUntilMovement\":118867,\"totalShares\":23500000,\"maxShares\":4700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":80262.74409105565,\"lastPrice\":80198.65402045994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":14.609516508282253,\"otlkMagForecast\":65.99209853789532,\"cap\":215215454,\"spreadPerc\":0.2,\"shareTxForMovement\":211602,\"shareTxUntilMovement\":211602,\"totalShares\":31400000,\"maxShares\":6300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":203463,\"lastUpdate\":1698849848046,\"ticksUntilCycle\":7}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-25,\"y\":29,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1698763450004","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}